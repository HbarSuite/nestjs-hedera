var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccountBalance.html",[0,0.8,1,2.059]],["body/interfaces/AccountBalance.html",[0,1.151,1,3.557,2,2.031,3,0.311,4,0.311,5,0.208,6,3.824,7,0.815,8,1.07,9,5.102,10,5.102,11,3.953,12,0.726,13,0.031,14,3.433,15,0.506,16,4.572,17,2.669,18,4.572,19,0.259,20,0.026,21,0.026]],["title/modules/AccountsModule.html",[22,0.566,23,1.855]],["body/modules/AccountsModule.html",[3,0.261,4,0.261,5,0.175,13,0.032,15,0.559,19,0.217,20,0.023,21,0.023,22,0.878,23,3.808,24,1.232,25,2.013,26,3.213,27,3.213,28,3.213,29,3.213,30,2.285,31,3.218,32,3.218,33,2.48,34,3.416,35,2.386,36,1.861,37,1.861,38,3.842,39,1.855,40,2.013,41,2.013,42,0.508,43,3.842,44,2.037,45,2.242,46,3.213,47,3.213,48,1.861,49,0.564]],["title/injectables/AccountsService.html",[34,1.685,50,0.334]],["body/injectables/AccountsService.html",[1,1.385,3,0.222,4,0.086,5,0.058,7,0.225,8,0.417,9,1.788,10,2.727,11,0.82,12,0.609,13,0.032,14,0.739,15,0.388,17,0.739,19,0.072,20,0.01,21,0.01,34,1.133,42,0.167,49,0.186,50,0.224,51,0.406,52,1.059,53,1.232,54,1.806,55,0.633,56,2.922,57,2.774,58,2.138,59,2.138,60,2.138,61,2.138,62,2.138,63,2.774,64,1.132,65,0.739,66,1.806,67,2.229,68,1.257,69,2.138,70,1.308,71,1.308,72,1.113,73,1.266,74,2.66,75,3.643,76,3.643,77,1.266,78,2.138,79,3.643,80,3.26,81,3.26,82,4.609,83,3.697,84,1.728,85,1.544,86,2.132,87,2.001,88,2.138,89,3.617,90,3.802,91,4.421,92,1.803,93,1.266,94,2.138,95,3.26,96,3.26,97,2.375,98,2.138,99,1.266,100,3.26,101,3.26,102,2.138,103,1.266,104,3.26,105,2.001,106,2.138,107,1.266,108,2.138,109,1.266,110,2.138,111,1.266,112,2.727,113,2.727,114,2.36,115,1.266,116,2.138,117,1.557,118,0.517,119,0.517,120,1.612,121,2.138,122,1.227,123,2.138,124,2.138,125,3.26,126,2.138,127,2.138,128,2.23,129,2.138,130,2.138,131,0.44,132,0.739,133,1.266,134,1.266,135,1.266,136,0.739,137,1.059,138,1.059,139,4.658,140,0.805,141,1.245,142,1.448,143,1.488,144,1.719,145,1.471,146,2.99,147,2.953,148,3.047,149,1.619,150,2.297,151,1.385,152,1.557,153,1.266,154,1.266,155,1.615,156,1.719,157,1.266,158,1.266,159,1.788,160,1.059,161,0.82,162,1.266,163,1.266,164,1.266,165,1.266,166,1.266,167,0.922,168,1.266,169,1.788,170,1.266,171,0.82,172,2.113,173,1.059,174,1.059,175,0.82,176,0.517,177,2.113,178,1.798,179,1.266,180,2.307,181,2.113,182,1.059,183,0.739,184,1.385,185,1.266,186,1.788,187,1.266,188,1.266,189,1.266,190,1.266,191,1.266,192,1.266,193,1.266,194,0.922,195,0.739,196,0.922,197,1.903,198,1.266,199,1.788,200,1.385,201,2.138,202,1.788,203,1.557,204,2.138,205,0.922,206,1.059,207,0.739,208,1.059,209,1.266,210,3.26,211,2.138,212,2.727,213,1.788,214,2.138,215,2.138,216,1.266,217,1.266,218,1.266,219,0.922,220,0.82]],["title/modules/ClientModule.html",[22,0.566,30,1.196]],["body/modules/ClientModule.html",[3,0.256,4,0.256,5,0.172,12,0.644,13,0.032,15,0.544,19,0.213,20,0.023,21,0.023,22,1.015,24,1.209,30,2.145,39,1.833,40,1.541,41,1.989,42,0.499,49,0.554,55,1.116,66,2.41,68,1.329,70,1.441,71,1.441,72,1.225,85,1.441,141,1.441,176,1.541,221,3.771,222,4.15,223,2.444,224,3.547,225,2.683,226,3.771,227,3.927,228,4.297,229,2.444,230,3.547,231,3.771,232,2.747,233,3.771,234,3.547,235,2.747,236,2.201,237,4.071,238,3.154,239,2.747,240,3.154,241,2.444,242,3.154]],["title/injectables/ClientService.html",[50,0.334,66,1.298]],["body/injectables/ClientService.html",[3,0.195,4,0.195,5,0.131,7,0.511,8,0.789,12,0.737,13,0.032,14,2.363,15,0.495,19,0.162,20,0.019,21,0.019,42,0.38,49,0.422,50,0.425,51,0.92,54,2.277,55,1.198,64,1.406,66,1.654,68,1.597,70,0.85,71,0.85,72,0.722,85,1.507,118,1.173,119,1.173,120,1.198,122,1.524,131,0.997,139,2.401,140,2.378,141,1.198,161,3.301,175,3.905,176,2.534,220,2.623,225,2.598,232,2.091,236,1.675,241,1.86,243,2.401,244,2.955,245,3.417,246,5.094,247,5.094,248,2.401,249,4.048,250,2.737,251,3.386,252,2.87,253,4.048,254,2.87,255,4.048,256,4.048,257,4.048,258,2.87,259,4.048,260,2.87,261,4.048,262,2.949,263,3.922,264,2.87,265,2.87,266,2.87,267,2.87,268,2.401,269,2.401,270,2.401,271,4.048,272,2.87,273,2.87,274,2.87,275,1.86,276,2.87,277,5.094,278,2.87,279,4.69,280,2.87,281,2.87,282,2.87,283,2.87,284,2.87,285,2.87,286,2.87]],["title/modules/HcsModule.html",[22,0.566,287,1.855]],["body/modules/HcsModule.html",[3,0.278,4,0.278,5,0.186,13,0.031,15,0.541,19,0.231,20,0.024,21,0.024,22,0.913,24,1.312,25,2.095,30,2.323,33,2.52,35,2.483,36,1.982,37,1.982,39,1.931,40,2.095,41,2.095,42,0.541,44,2.169,45,2.388,48,1.982,49,0.601,287,3.775,288,3.422,289,4.092,290,3.422,291,3.422,292,3.445,293,4.092,294,4.092]],["title/injectables/HcsService.html",[50,0.334,292,1.685]],["body/injectables/HcsService.html",[3,0.214,4,0.103,5,0.069,7,0.269,8,0.482,12,0.629,13,0.032,15,0.29,19,0.085,20,0.012,21,0.012,42,0.2,49,0.222,50,0.26,51,0.484,53,1.397,54,1.762,55,0.732,64,0.859,65,0.881,66,1.762,68,1.299,70,1.348,71,1.348,72,1.147,74,2.61,84,2.752,85,1.277,86,2.165,87,2.296,92,1.579,105,2.296,114,3.283,117,1.099,118,0.616,119,0.616,120,1.697,122,1.184,128,1.928,131,0.524,132,0.881,140,0.568,141,1.277,143,1.762,144,1.762,145,2.129,146,3.428,147,2.943,149,0.881,150,2.321,151,2.357,152,1.099,156,1.762,160,3.81,171,2.038,172,2.602,177,3.283,178,2.357,180,2.123,181,2.357,183,1.444,184,2.357,194,1.099,196,2.65,197,2.518,200,0.978,205,3.142,207,1.444,219,3.142,220,2.795,275,0.978,292,1.312,295,1.262,296,3.144,297,3.144,298,3.144,299,3.144,300,3.637,301,3.144,302,2.474,303,1.509,304,5.191,305,3.319,306,1.509,307,5.067,308,1.509,309,5.075,310,1.509,311,1.509,312,3.144,313,4.924,314,2.474,315,3.144,316,3.144,317,3.144,318,1.509,319,1.509,320,1.509,321,3.144,322,1.509,323,1.509,324,1.509,325,1.509,326,3.144,327,1.509,328,2.474,329,2.474,330,1.509,331,2.474,332,2.474,333,2.474,334,1.509,335,1.509,336,1.262,337,3.977,338,4.313,339,2.474,340,3.042,341,2.474,342,2.474,343,3.637,344,2.474,345,2.474,346,2.474,347,2.63,348,2.474,349,2.474,350,1.509,351,1.509,352,1.802,353,3.144,354,1.509,355,1.509,356,1.509,357,1.509,358,1.509,359,1.509,360,1.262,361,3.144,362,1.509,363,1.262,364,1.509,365,1.509,366,1.509,367,1.509,368,1.509,369,3.144,370,1.509,371,1.509,372,1.509,373,1.509,374,1.509,375,1.509,376,1.509,377,1.509,378,1.509,379,1.509]],["title/modules/HederaModule.html",[22,0.566,380,2.059]],["body/modules/HederaModule.html",[3,0.222,4,0.222,5,0.149,12,0.586,13,0.032,15,0.583,19,0.185,20,0.021,21,0.021,22,0.959,23,3.284,24,1.047,30,1.23,31,2.983,32,2.983,33,1.334,39,1.667,40,1.809,41,1.809,42,0.432,44,1.732,45,1.906,46,2.732,47,2.732,49,0.48,55,0.967,68,1.209,70,1.31,71,1.31,72,1.114,85,1.31,141,1.31,176,1.334,222,3.921,223,2.116,224,3.225,225,2.391,227,3.225,228,4.098,229,2.116,230,3.225,232,2.379,236,1.906,287,3.284,380,3.488,381,3.266,382,3.266,383,3.266,384,3.266,385,3.645,386,3.266,387,3.284,388,3.266,389,1.451,390,2.379,391,3.266,392,3.284,393,3.266,394,3.266,395,4.427,396,4.427,397,4.427,398,4.427,399,4.427,400,4.427]],["title/interfaces/HederaOptions.html",[0,0.8,225,1.411]],["body/interfaces/HederaOptions.html",[0,1.105,2,1.949,3,0.298,4,0.298,5,0.2,7,0.782,8,1.044,12,0.764,13,0.031,14,3.373,15,0.494,19,0.248,20,0.025,21,0.025,176,1.793,225,2.378,244,3.19,245,4.383,262,4.21,263,4.833,389,2.849,401,3.67,402,4.388,403,4.388]],["title/injectables/HederaService.html",[50,0.334,385,2.059]],["body/injectables/HederaService.html",[3,0.31,4,0.31,5,0.207,7,0.812,8,1.069,12,0.603,13,0.031,15,0.42,19,0.258,20,0.026,21,0.026,42,0.603,49,0.67,50,0.575,51,1.462,53,2.61,54,2.587,68,1.245,118,1.863,119,1.863,120,1.622,122,2.063,385,3.551,404,3.813,405,5.48,406,4.56]],["title/modules/HfsModule.html",[22,0.566,392,1.855]],["body/modules/HfsModule.html",[3,0.288,4,0.288,5,0.192,13,0.031,15,0.524,19,0.239,20,0.025,21,0.025,22,0.932,24,1.356,25,2.139,30,2.342,35,2.535,36,2.048,37,2.048,39,1.971,40,2.139,41,2.139,42,0.559,44,2.242,48,2.048,49,0.621,392,3.748,407,3.537,408,4.229,409,3.537,410,3.537,411,3.46,412,4.229,413,4.229]],["title/injectables/HfsService.html",[50,0.334,411,1.685]],["body/injectables/HfsService.html",[3,0.115,4,0.115,5,0.194,7,0.303,8,0.531,11,1.101,12,0.658,13,0.032,15,0.314,19,0.096,20,0.013,21,0.013,42,0.225,49,0.249,50,0.286,51,0.545,53,1.514,54,1.861,55,0.806,56,3.114,64,0.946,65,0.991,66,1.861,68,1.358,70,1.416,71,1.416,72,1.205,74,2.904,84,2.537,85,1.348,86,2.238,87,2.357,92,1.83,97,1.237,105,2.032,112,2.851,113,2.851,114,2.952,117,2.483,118,0.694,119,0.694,120,1.669,122,1.025,128,2.067,131,0.59,132,0.991,140,1.468,141,1.348,142,2.024,143,1.861,144,1.861,145,2.415,146,3.521,147,3.138,149,2.659,150,2.418,151,1.765,155,1.861,156,1.861,167,1.984,169,2.278,171,2.527,172,2.766,173,1.42,174,1.42,178,2.527,180,2.903,183,1.99,194,2.841,275,2.209,360,2.851,411,1.444,414,1.42,415,3.409,416,3.409,417,3.409,418,2.723,419,1.698,420,6.147,421,5.131,422,5.477,423,1.698,424,1.698,425,1.698,426,1.698,427,1.698,428,1.698,429,1.698,430,1.698,431,1.698,432,1.698,433,1.698,434,2.723,435,2.723,436,2.723,437,2.723,438,2.723,439,1.698,440,2.723,441,2.723,442,1.698,443,3.409,444,2.723,445,3.9,446,3.9,447,3.9,448,2.483,449,2.851,450,3.9,451,2.841,452,3.9,453,1.698,454,4.269,455,1.698,456,1.698,457,1.698,458,1.698,459,1.698]],["title/modules/HtsModule.html",[22,0.566,31,1.685]],["body/modules/HtsModule.html",[3,0.26,4,0.26,5,0.174,13,0.031,15,0.546,19,0.216,20,0.023,21,0.023,22,0.875,24,1.226,25,2.007,30,2.375,31,3.468,33,2.477,35,2.379,36,1.852,37,1.852,39,1.849,40,2.007,41,2.007,42,0.506,44,2.027,45,2.232,48,1.852,49,0.562,460,3.198,461,3.198,462,3.824,463,3.198,464,3.758,465,3.758,466,3.824,467,3.824,468,3.824,469,2.478]],["title/injectables/HtsRestService.html",[50,0.334,464,1.855]],["body/injectables/HtsRestService.html",[3,0.206,4,0.206,5,0.138,7,0.541,12,0.69,13,0.032,15,0.446,19,0.172,20,0.02,21,0.02,42,0.402,49,0.446,50,0.442,51,0.973,55,1.246,64,1.462,68,1.425,70,1.545,71,1.545,72,1.314,85,1.43,86,2.318,90,3.132,92,1.992,120,1.43,140,1.143,141,1.43,142,2.147,143,1.975,144,1.975,150,2.24,155,1.975,156,1.975,186,3.521,207,3.2,464,2.457,470,4.585,471,2.212,472,4.21,473,4.21,474,4.21,475,2.539,476,3.008,477,3.036,478,4.21,479,3.036,480,4.21,481,4.833,482,3.036,483,4.21,484,3.036,485,2.539,486,4.21,487,4.585,488,3.036,489,2.539,490,5.673,491,3.036,492,5.22,493,3.521,494,3.521,495,4.21,496,4.21,497,4.21,498,3.036]],["title/injectables/HtsService.html",[50,0.334,465,1.855]],["body/injectables/HtsService.html",[3,0.092,4,0.092,5,0.061,7,0.24,8,0.439,11,1.459,12,0.662,13,0.032,15,0.313,19,0.076,20,0.011,21,0.011,42,0.178,49,0.198,50,0.236,51,0.432,53,1.289,54,1.666,55,0.666,56,3.16,64,0.782,65,0.786,66,1.666,68,1.366,70,1.441,71,1.441,72,1.226,74,2.897,84,2,85,1.396,86,2.285,87,2.41,89,3.511,90,4.045,92,1.512,105,2.285,114,2.643,118,0.55,119,0.55,120,1.725,122,0.847,128,2.295,131,0.468,132,0.786,140,0.507,141,1.396,142,1.812,143,1.666,144,1.927,145,1.538,146,3.423,147,3.16,148,1.882,149,1.693,150,2.458,152,2.113,155,1.927,156,1.927,159,2.426,167,1.64,171,1.88,172,2.941,177,2.941,178,2.941,180,2.919,181,2.941,182,2.426,183,1.979,197,1.693,199,2.426,200,2.444,202,2.426,203,2.113,244,1.538,250,1.693,449,3.155,451,2.113,465,1.314,499,1.126,500,2.901,501,2.901,502,2.901,503,2.901,504,2.251,505,2.901,506,2.901,507,2.901,508,2.251,509,2.251,510,1.346,511,1.346,512,1.346,513,1.346,514,1.346,515,4.539,516,1.346,517,1.346,518,2.901,519,2.901,520,1.346,521,2.251,522,4.079,523,1.346,524,1.346,525,1.346,526,4.33,527,1.346,528,1.346,529,1.346,530,3.772,531,1.346,532,2.251,533,1.346,534,2.251,535,2.251,536,2.251,537,2.251,538,2.251,539,2.251,540,3.39,541,1.126,542,2.251,543,2.251,544,1.346,545,0.872,546,1.346,547,2.251,548,2.251,549,1.346,550,1.346,551,1.126,552,2.251,553,1.346,554,1.346,555,1.346,556,1.346,557,1.346,558,1.346,559,1.346,560,2.251,561,2.901,562,2.901,563,2.901,564,2.901,565,2.901,566,2.251,567,2.251,568,2.251,569,1.346,570,1.346]],["title/modules/KeysModule.html",[22,0.566,32,1.685]],["body/modules/KeysModule.html",[3,0.3,4,0.3,5,0.201,13,0.031,15,0.495,19,0.249,20,0.026,21,0.026,22,0.957,24,1.415,25,2.195,32,3.372,35,2.602,36,2.137,37,2.137,39,2.023,41,2.195,42,0.584,48,2.137,49,0.648,67,3.178,571,3.69,572,3.69,573,3.69,574,4.412,575,4.412]],["title/injectables/KeysService.html",[50,0.334,67,1.539]],["body/injectables/KeysService.html",[3,0.207,4,0.207,5,0.138,7,0.542,8,0.822,12,0.558,13,0.032,14,1.775,15,0.446,19,0.172,20,0.02,21,0.02,42,0.402,49,0.619,50,0.443,51,0.975,53,2.149,54,2.319,55,1.248,64,1.68,67,2.042,68,1.426,70,0.9,71,0.9,72,0.766,74,3.009,84,2.565,85,1.248,86,2.134,87,1.243,92,1.551,105,1.977,118,1.243,119,1.243,120,1.723,122,1.587,131,1.056,136,1.775,137,2.544,138,2.544,141,1.248,142,1.872,143,1.722,144,1.722,147,1.612,150,1.243,155,1.722,156,1.722,184,2.732,197,2.824,305,3.997,347,2.544,352,2.216,448,3.071,576,2.544,577,5.224,578,4.838,579,4.215,580,3.041,581,3.041,582,4.838,583,5.82,584,3.041,585,4.215,586,4.215,587,2.544,588,3.041,589,4.215,590,3.041,591,3.041,592,3.041,593,3.041,594,3.041,595,3.041,596,4.588,597,4.215,598,3.041,599,2.544,600,3.041,601,3.041,602,3.041,603,3.041]],["title/interfaces/MirrorNode.html",[0,0.8,389,1.411]],["body/interfaces/MirrorNode.html",[0,1.177,2,2.078,3,0.318,4,0.318,5,0.213,7,0.833,8,1.085,12,0.736,13,0.03,19,0.264,20,0.026,21,0.026,72,1.4,92,2.042,389,2.472,604,3.912,605,6.147,606,4.478]],["title/interfaces/Operator.html",[0,0.8,176,1.298]],["body/interfaces/Operator.html",[0,1.148,2,2.025,3,0.31,4,0.31,5,0.207,7,0.812,8,1.069,12,0.777,13,0.03,19,0.258,20,0.026,21,0.026,72,1.379,87,2.49,89,3.558,92,2.084,176,2.239,587,5.098,607,3.813]],["title/interfaces/PrivateKeyList.html",[0,0.8,136,1.855]],["body/interfaces/PrivateKeyList.html",[0,1.157,2,2.043,3,0.313,4,0.313,5,0.209,7,0.819,8,1.074,12,0.729,13,0.031,15,0.424,19,0.26,20,0.026,21,0.026,87,2.497,105,1.879,131,1.597,136,3.215,305,4.711,596,5.112,608,3.846,609,3.846]],["title/modules/RestModule.html",[22,0.566,33,1.298]],["body/modules/RestModule.html",[3,0.252,4,0.252,5,0.168,12,0.636,13,0.032,15,0.554,19,0.209,20,0.023,21,0.023,22,1.008,24,1.187,33,2.311,39,1.811,40,1.966,41,1.966,42,0.49,49,0.544,55,1.096,68,1.314,70,1.424,71,1.424,72,1.211,85,1.424,141,1.424,222,4.122,223,2.399,224,3.505,225,2.67,227,3.893,228,4.272,229,2.399,230,3.505,234,3.505,235,2.697,236,2.161,237,4.023,238,3.097,239,2.697,240,3.097,241,2.399,242,3.097,389,1.645,390,2.697,469,2.399,476,3.109,610,3.703,611,3.703,612,3.703,613,5.344,614,2.697]],["title/injectables/RestService.html",[50,0.334,476,1.685]],["body/injectables/RestService.html",[3,0.231,4,0.231,5,0.155,7,0.606,8,0.887,12,0.724,13,0.032,15,0.504,19,0.192,20,0.022,21,0.022,42,0.45,49,0.5,50,0.478,51,1.091,53,2.277,54,2.398,55,1.347,56,2.718,64,1.58,68,1.494,70,1.347,71,1.347,72,1.145,85,1.007,86,1.859,92,1.644,118,1.39,119,1.39,120,1.517,122,1.713,140,2.148,141,1.007,142,1.511,143,1.39,144,1.39,150,1.39,155,1.39,156,1.39,195,2.656,207,1.986,225,2.607,236,1.986,241,2.205,248,2.845,270,2.845,389,2.607,390,2.478,476,2.412,614,2.478,615,2.845,616,4.55,617,5.994,618,4.55,619,4.55,620,3.402,621,3.402,622,4.55,623,3.402,624,3.402,625,3.402,626,5.473,627,3.402,628,3.402,629,3.402,630,3.402,631,3.402,632,3.402,633,3.402]],["title/interfaces/TokenBalance.html",[0,0.8,17,1.855]],["body/interfaces/TokenBalance.html",[0,1.154,2,2.037,3,0.312,4,0.312,5,0.209,7,0.817,8,1.072,12,0.779,13,0.03,17,3.209,19,0.259,20,0.026,21,0.026,74,3.361,83,5.107,90,3.957,92,1.888,213,5.107,634,3.835]],["title/interfaces/TransactionDetails.html",[0,0.8,545,2.059]],["body/interfaces/TransactionDetails.html",[0,1.164,2,2.054,3,0.314,4,0.314,5,0.21,7,0.824,8,1.078,12,0.731,13,0.031,15,0.426,19,0.261,20,0.026,21,0.026,128,3.432,131,1.606,203,4.461,545,3.581,635,3.867,636,4.461]],["title/modules/TransactionsModule.html",[22,0.566,387,1.855]],["body/modules/TransactionsModule.html",[3,0.264,4,0.264,5,0.176,13,0.031,15,0.548,19,0.219,20,0.024,21,0.024,22,0.883,24,1.243,25,2.025,30,2.291,33,2.486,35,2.401,36,1.878,37,1.878,39,1.866,40,2.025,41,2.025,42,0.513,44,2.056,45,2.264,48,1.878,49,0.57,195,2.264,387,3.799,469,2.513,637,3.243,638,3.243,639,3.878,640,3.243,641,3.42,642,3.42,643,3.878,644,3.878]],["title/injectables/TransactionsRestService.html",[50,0.334,641,1.685]],["body/injectables/TransactionsRestService.html",[3,0.182,4,0.182,5,0.122,7,0.477,12,0.692,13,0.032,15,0.355,19,0.151,20,0.018,21,0.018,42,0.354,49,0.393,50,0.405,51,0.859,55,1.14,64,1.338,68,1.428,70,1.548,71,1.548,72,1.316,84,1.42,85,1.461,86,2.346,89,3.053,92,2.025,120,1.612,140,1.008,141,1.461,142,2.193,143,2.017,144,2.017,150,2.346,155,2.017,156,2.017,195,3.179,207,3.179,471,1.951,475,2.239,476,2.887,485,2.239,487,4.555,489,3.222,493,3.222,494,3.222,606,2.807,636,1.951,641,2.043,645,4.555,646,3.853,647,3.853,648,3.853,649,3.853,650,2.678,651,3.853,652,4.936,653,2.678,654,3.853,655,2.678,656,2.678,657,3.853,658,2.678,659,3.853,660,2.678,661,2.678,662,4.936,663,3.853,664,3.853,665,3.853,666,3.853,667,3.853,668,3.853,669,3.853,670,3.853,671,3.853,672,2.678,673,2.678,674,2.678,675,2.678,676,2.678]],["title/injectables/TransactionsService.html",[50,0.334,642,1.685]],["body/injectables/TransactionsService.html",[3,0.233,4,0.155,5,0.104,7,0.406,8,0.668,12,0.706,13,0.032,15,0.379,19,0.129,20,0.016,21,0.016,42,0.302,49,0.335,50,0.36,51,0.732,53,1.827,54,2.101,55,1.014,56,3.21,64,1.19,65,1.332,66,2.101,68,1.457,70,1.522,71,1.522,72,1.295,85,1.45,86,2.336,87,1.867,92,1.318,97,1.662,105,2.001,118,0.932,119,0.932,120,1.741,122,1.289,128,1.816,131,0.792,132,1.332,140,0.859,141,1.45,142,1.521,143,2.001,144,2.001,145,1.816,146,3.471,147,2.597,149,1.999,150,2.242,151,2.664,155,1.399,156,2.001,175,2.219,176,1.399,177,2.219,180,3.002,181,2.219,183,1.332,184,1.478,197,2.4,200,1.478,205,2.996,206,1.908,208,1.908,219,2.996,220,2.664,244,1.21,250,1.332,340,1.908,363,1.908,451,1.662,541,2.864,551,2.864,636,4.089,642,1.816,677,1.908,678,3.425,679,3.425,680,3.425,681,3.425,682,3.425,683,3.425,684,3.425,685,2.282,686,2.282,687,3.425,688,2.282,689,5.488,690,3.425,691,2.282,692,3.425,693,2.282,694,3.425,695,2.282,696,3.425,697,4.112,698,3.425,699,3.425,700,3.425,701,3.425,702,3.425,703,3.425,704,3.425,705,2.282,706,3.425,707,2.282,708,2.864,709,3.425,710,2.282,711,2.282,712,2.282,713,2.282,714,2.282,715,2.282]],["title/coverage.html",[716,3.633]],["body/coverage.html",[0,1.544,1,2.427,5,0.17,6,3.132,12,0.495,13,0.031,17,2.186,20,0.023,21,0.023,34,1.985,50,0.67,52,3.132,66,1.53,67,1.814,105,1.53,120,1.108,136,2.186,176,1.53,212,5.458,225,1.664,243,3.132,292,1.985,295,3.132,385,2.427,389,1.664,401,3.132,404,3.132,411,1.985,414,3.132,464,2.186,465,2.186,470,3.132,471,3.531,476,1.985,499,3.132,545,2.427,576,3.132,604,3.132,607,3.132,608,3.132,609,3.132,615,3.132,634,3.132,635,3.132,641,1.985,642,1.985,645,3.132,677,3.132,716,3.132,717,3.745,718,3.745,719,3.745,720,3.745,721,3.745,722,3.745,723,3.745,724,4.847,725,3.745,726,5.373,727,3.745,728,3.745,729,3.745,730,5.682,731,5.373,732,3.745,733,3.745]],["title/dependencies.html",[25,1.562,734,2.216]],["body/dependencies.html",[13,0.031,20,0.027,21,0.027,25,1.973,42,0.639,131,1.677,235,3.518,268,4.039,269,4.039,614,3.518,735,4.829,736,4.829,737,4.829,738,4.829,739,4.829,740,4.829,741,4.829,742,4.829,743,4.829]],["title/index.html",[7,0.472,708,2.216,744,2.65]],["body/index.html",[5,0.12,13,0.032,15,0.563,19,0.215,20,0.018,21,0.018,22,0.678,34,2.369,39,0.99,40,1.554,42,0.503,48,1.274,49,0.559,50,0.399,56,1.394,64,0.914,67,2.164,82,3.181,87,1.554,89,2.22,105,1.554,120,1.126,122,0.99,131,0.914,140,2.102,145,2.016,155,2.212,161,2.465,175,1.704,195,1.535,196,1.916,223,1.704,229,1.704,234,1.916,239,1.916,244,2.016,245,2.771,250,2.857,251,2.2,262,1.916,275,1.704,292,2.369,309,2.2,336,2.2,337,2.2,352,3.783,380,2.465,389,1.69,411,2.369,448,1.916,469,1.704,599,3.181,606,1.916,641,2.016,642,1.394,745,4.871,746,5.009,747,2.63,748,2.63,749,2.63,750,2.63,751,3.804,752,2.63,753,2.63,754,2.63,755,2.63,756,3.804,757,2.63,758,2.63,759,3.804,760,2.63,761,2.63,762,3.804,763,2.63,764,2.63,765,2.63,766,2.63,767,3.804,768,3.804,769,2.63,770,4.468,771,2.63,772,2.63,773,2.63,774,2.63,775,2.63,776,2.63,777,2.63,778,4.895,779,2.63,780,2.63,781,2.63,782,2.63,783,2.63,784,2.63,785,2.63,786,2.63,787,2.63,788,2.63,789,2.63,790,2.63,791,2.63,792,2.63,793,2.63,794,2.63,795,2.63,796,2.63,797,2.63,798,3.804,799,2.63,800,2.63,801,2.63,802,2.63,803,2.63,804,2.63,805,2.63,806,2.63,807,4.468,808,5.413,809,2.63,810,2.63,811,2.63,812,2.63,813,2.63,814,2.63,815,2.63,816,2.63,817,2.63,818,2.63,819,2.63,820,2.63,821,2.63,822,2.63,823,2.63,824,2.63]],["title/modules.html",[24,1.393]],["body/modules.html",[13,0.026,20,0.026,21,0.026,23,2.661,24,1.462,30,1.717,31,2.417,32,2.417,33,1.863,287,2.661,380,2.955,387,2.661,392,2.661,825,6.332,826,6.332,827,6.332,828,6.501,829,5.875,830,5.875]],["title/overview.html",[831,3.633]],["body/overview.html",[2,1.431,13,0.031,20,0.021,21,0.021,23,3.687,24,1.033,25,1.792,26,2.694,27,2.694,28,2.694,29,2.694,30,2.265,31,3.385,32,3.062,33,2.36,34,3.134,35,2.124,36,1.56,37,1.56,51,1.033,67,2.862,287,3.56,288,2.694,290,2.694,291,2.694,292,3.134,387,3.662,392,3.45,407,2.694,409,2.694,410,2.694,411,3.134,460,2.694,461,2.694,463,2.694,464,3.45,465,3.45,571,2.694,572,2.694,573,2.694,637,2.694,638,2.694,640,2.694,641,3.134,642,3.134,831,2.694,832,3.221,833,3.221,834,3.221]],["title/properties.html",[8,0.746,734,2.216]],["body/properties.html",[8,0.912,13,0.031,20,0.026,21,0.026,161,3.031,244,2.48,250,3.248,745,4.967,746,3.912,835,4.677,836,4.677,837,4.677,838,4.677,839,4.677,840,4.677,841,4.677,842,4.677,843,4.677,844,4.677,845,4.677,846,4.677,847,4.677,848,4.677,849,4.677,850,4.677,851,4.677]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["0/12",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":796,"title":{},"body":{"index.html":{}}}],["1.0.2",{"_index":836,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":568,"title":{},"body":{"injectables/HtsService.html":{}}}],["1000",{"_index":669,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["11",{"_index":833,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["3/9",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":834,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["8/10",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":832,"title":{},"body":{"overview.html":{}}}],["account",{"_index":82,"title":{},"body":{"injectables/AccountsService.html":{},"index.html":{}}}],["account's",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":804,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":799,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"interfaces/AccountBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":89,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(6",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfo",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":43,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":394,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":23,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":34,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":757,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":557,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":558,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":549,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":570,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":567,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":338,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":307,"title":{},"body":{"injectables/HcsService.html":{}}}],["amount",{"_index":526,"title":{},"body":{"injectables/HtsService.html":{}}}],["apikey",{"_index":605,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["app.controller",{"_index":769,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":761,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":771,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":768,"title":{},"body":{"index.html":{}}}],["append",{"_index":415,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":419,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":759,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":770,"title":{},"body":{"index.html":{}}}],["array",{"_index":14,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":601,"title":{},"body":{"injectables/KeysService.html":{}}}],["associatetoken",{"_index":500,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":510,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":56,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":815,"title":{},"body":{"index.html":{}}}],["author",{"_index":851,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":628,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":830,"title":{},"body":{"modules.html":{}}}],["await",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":83,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["browse",{"_index":828,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":825,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":843,"title":{},"body":{"properties.html":{}}}],["call",{"_index":616,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":676,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":488,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":491,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":496,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":498,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":675,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":670,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":661,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":619,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":674,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":312,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":378,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":780,"title":{},"body":{"index.html":{}}}],["catch",{"_index":219,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["cid",{"_index":519,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":282,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":281,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":233,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":44,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":30,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":395,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":399,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":66,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":26,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":27,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":29,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":28,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":288,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":290,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":289,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":291,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":407,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":409,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":408,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":410,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":460,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":461,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":462,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":463,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":571,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":573,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":572,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":637,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":638,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":639,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":640,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":234,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":778,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":785,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":784,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":783,"title":{},"body":{"index.html":{}}}],["connect",{"_index":766,"title":{},"body":{"index.html":{}}}],["connection",{"_index":276,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(error",{"_index":808,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":797,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":819,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":818,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":807,"title":{},"body":{"index.html":{}}}],["const",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":64,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":65,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":248,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":475,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":421,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":456,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":716,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":275,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"index.html":{}}}],["create(key",{"_index":424,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":57,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":73,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":78,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":678,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":684,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":296,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":303,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":326,"title":{},"body":{"injectables/HcsService.html":{}}}],["decimals",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["decorators",{"_index":252,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":68,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":360,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":426,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":297,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":308,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":837,"title":{},"body":{"properties.html":{}}}],["dex",{"_index":840,"title":{},"body":{"properties.html":{}}}],["dissociatetoken",{"_index":501,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":512,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":356,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":228,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":269,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":316,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":621,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":220,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":789,"title":{},"body":{"index.html":{}}}],["execute",{"_index":348,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(this.clientservice.getclient",{"_index":555,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":359,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetches",{"_index":100,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":435,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":436,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":437,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":438,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":420,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":439,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":440,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":441,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":652,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":349,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":760,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":223,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":224,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":229,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":230,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":58,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":88,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":91,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":94,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(this.clientservice.getclient",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":343,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":319,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":598,"title":{},"body":{"injectables/KeysService.html":{}}}],["generated",{"_index":798,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":577,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":578,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":581,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":800,"title":{},"body":{"index.html":{}}}],["getallholders",{"_index":472,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":478,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":473,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":480,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":646,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":651,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":647,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":654,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":246,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":416,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":428,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":59,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":98,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":417,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfos(fileid",{"_index":430,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":713,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":60,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":102,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatesttransactions",{"_index":648,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":657,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":298,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":311,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":502,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":514,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":247,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":61,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":106,"title":{},"body":{"injectables/AccountsService.html":{}}}],["gets",{"_index":259,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":649,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":659,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":679,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":687,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":708,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":474,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":483,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionquery",{"_index":680,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":690,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":681,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":692,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":849,"title":{},"body":{"properties.html":{}}}],["given",{"_index":810,"title":{},"body":{"index.html":{}}}],["gives",{"_index":255,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":397,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":829,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":16,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["hbar",{"_index":11,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["hbar(amount",{"_index":559,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(maxtransactionfee",{"_index":447,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbars",{"_index":9,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["hcs",{"_index":336,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":294,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":391,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":816,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":287,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":292,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":626,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":250,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":850,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":386,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":845,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":772,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":793,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":791,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":792,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":790,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":794,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":758,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":755,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":380,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":773,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":781,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":225,"title":{"interfaces/HederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["hederaservice",{"_index":385,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":820,"title":{},"body":{"index.html":{}}}],["hfs.service",{"_index":413,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":393,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":392,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":411,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":490,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":492,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":841,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":745,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts",{"_index":468,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts.service",{"_index":467,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":31,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":464,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":465,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":613,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":844,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":842,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":776,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":617,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":97,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["if(adminkey",{"_index":345,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(currentadminkey",{"_index":354,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(end",{"_index":371,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(filters",{"_index":673,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["if(key",{"_index":561,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(keyslength",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(length",{"_index":600,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(limit",{"_index":373,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(maxtransactionfee",{"_index":445,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(memo",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["if(newkey",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["if(publickeys",{"_index":593,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(start",{"_index":368,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(submitkey",{"_index":365,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(this.mirrornode.apikey",{"_index":627,"title":{},"body":{"injectables/RestService.html":{}}}],["if(tokenid",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":788,"title":{},"body":{"index.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":458,"title":{},"body":{"injectables/HfsService.html":{}}}],["inject",{"_index":241,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":270,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":50,"title":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":51,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":754,"title":{},"body":{"index.html":{}}}],["installation",{"_index":750,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{}},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"overview.html":{}}}],["invalid",{"_index":256,"title":{},"body":{"injectables/ClientService.html":{}}}],["isc",{"_index":847,"title":{},"body":{"properties.html":{}}}],["js",{"_index":747,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":817,"title":{},"body":{"index.html":{}}}],["key",{"_index":105,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":806,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":305,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":597,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":448,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["keys.service",{"_index":575,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":46,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":588,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":75,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":32,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":67,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":76,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":838,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":809,"title":{},"body":{"index.html":{}}}],["length",{"_index":582,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":846,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":317,"title":{},"body":{"injectables/HcsService.html":{}}}],["list.types",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":609,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["lodash",{"_index":486,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":495,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":54,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":261,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":328,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":405,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":434,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":534,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":586,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":622,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":696,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":262,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["matching",{"_index":21,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxtransactionfee",{"_index":422,"title":{},"body":{"injectables/HfsService.html":{}}}],["memo",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":313,"title":{},"body":{"injectables/HcsService.html":{}}}],["method",{"_index":762,"title":{},"body":{"index.html":{}}}],["methods",{"_index":55,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mintnfttoken",{"_index":503,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":517,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":767,"title":{},"body":{"index.html":{}}}],["mirror.types",{"_index":402,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["mirrornode",{"_index":389,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{},"index.html":{}}}],["module",{"_index":22,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":80,"title":{},"body":{"injectables/AccountsService.html":{}}}],["name",{"_index":71,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":599,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":765,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":746,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":614,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":235,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":268,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":244,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":494,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":663,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":666,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":665,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nftid",{"_index":542,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":552,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":553,"title":{},"body":{"injectables/HtsService.html":{}}}],["node",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["npm",{"_index":751,"title":{},"body":{"index.html":{}}}],["null",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":74,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/TokenBalance.html":{}}}],["number(amount",{"_index":569,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(response.tokendecimals?._map.get(tokenid",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(response.tokens._map.get(tokenid)?.tostring",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["offline",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{}}}],["once",{"_index":787,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":267,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":253,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":176,"title":{"interfaces/Operator.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/Operator.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["operator.types",{"_index":403,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["operators",{"_index":245,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["optional",{"_index":72,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":227,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":242,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":240,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":763,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":347,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":831,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":734,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["parameters",{"_index":70,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":764,"title":{},"body":{"index.html":{}}}],["pausekey",{"_index":522,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":504,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":521,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":87,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":822,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":805,"title":{},"body":{"index.html":{}}}],["privatekey.generate",{"_index":589,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":136,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":596,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":602,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":86,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve,reject",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["promise(resolve",{"_index":667,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":779,"title":{},"body":{"index.html":{}}}],["protected",{"_index":53,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":237,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":592,"title":{},"body":{"injectables/KeysService.html":{}}}],["provider",{"_index":384,"title":{},"body":{"modules/HederaModule.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":104,"title":{},"body":{"injectables/AccountsService.html":{}}}],["public.mirrornode.hedera.com",{"_index":777,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":587,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":591,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":603,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":595,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":585,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":594,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(this.clientservice.getclient",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":257,"title":{},"body":{"injectables/ClientService.html":{}}}],["receipt",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":714,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["reject",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":95,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":848,"title":{},"body":{"properties.html":{}}}],["request",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":451,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(balance",{"_index":218,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":457,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":497,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":363,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":459,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":590,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":556,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(receipt",{"_index":551,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":453,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":350,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":367,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":489,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":633,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":715,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":379,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":565,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":671,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next.split",{"_index":664,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":216,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest.service",{"_index":469,"title":{},"body":{"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":471,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:10",{"_index":655,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:11",{"_index":484,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:24",{"_index":479,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:39",{"_index":653,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:5",{"_index":650,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:50",{"_index":482,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:6",{"_index":477,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:73",{"_index":658,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:86",{"_index":660,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":45,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":485,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":33,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":396,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":400,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":476,"title":{"injectables/RestService.html":{}},"body":{"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":20,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":85,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":753,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":709,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":697,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":710,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(this.clientservice.getclient",{"_index":712,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":689,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":698,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":699,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":748,"title":{},"body":{"index.html":{}}}],["sender",{"_index":562,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":515,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":443,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":454,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":705,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":704,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setinitialbalance(new",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkey(keyslength",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":442,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":364,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":554,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([new",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":711,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":706,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["settimeout(resolve",{"_index":668,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":547,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":361,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":703,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":752,"title":{},"body":{"index.html":{}}}],["sig",{"_index":81,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":353,"title":{},"body":{"injectables/HcsService.html":{}}}],["sign(key",{"_index":707,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{}}}],["signatures",{"_index":358,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":344,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":682,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":694,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(this.clientservice.getclient",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":357,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":79,"title":{},"body":{"injectables/AccountsService.html":{}}}],["smart",{"_index":839,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":101,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":52,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:163",{"_index":77,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:215",{"_index":93,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:243",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:27",{"_index":69,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:270",{"_index":107,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:44",{"_index":99,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:74",{"_index":103,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:93",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":221,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:23",{"_index":231,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:9",{"_index":226,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":243,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:10",{"_index":260,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:11",{"_index":265,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:12",{"_index":266,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:13",{"_index":264,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:14",{"_index":249,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:38",{"_index":254,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:54",{"_index":258,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":293,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":295,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:123",{"_index":310,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:147",{"_index":324,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:162",{"_index":322,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:195",{"_index":318,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:21",{"_index":302,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:30",{"_index":306,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:73",{"_index":327,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":381,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:17",{"_index":382,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:46",{"_index":383,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":404,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:5",{"_index":406,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":412,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":414,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:143",{"_index":427,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:174",{"_index":429,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:19",{"_index":418,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:192",{"_index":431,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:25",{"_index":425,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:62",{"_index":423,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:95",{"_index":433,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":470,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":466,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":499,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:109",{"_index":520,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:131",{"_index":516,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:149",{"_index":525,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:194",{"_index":531,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:240",{"_index":528,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:25",{"_index":509,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:31",{"_index":511,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:53",{"_index":513,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:75",{"_index":523,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:92",{"_index":533,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":574,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":576,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:13",{"_index":580,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:24",{"_index":584,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:7",{"_index":579,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":610,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:10",{"_index":611,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:25",{"_index":612,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":615,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:18",{"_index":620,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:8",{"_index":623,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:9",{"_index":618,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":645,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":643,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":677,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:102",{"_index":688,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:20",{"_index":683,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:26",{"_index":691,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:41",{"_index":693,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:57",{"_index":695,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:80",{"_index":685,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/account_balance.types.ts",{"_index":6,"title":{},"body":{"interfaces/AccountBalance.html":{},"coverage.html":{}}}],["src/types/hedera_options.types.ts",{"_index":401,"title":{},"body":{"interfaces/HederaOptions.html":{},"coverage.html":{}}}],["src/types/mirror.types.ts",{"_index":604,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":607,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":608,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["src/types/token_balance.types.ts",{"_index":634,"title":{},"body":{"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["src/types/transaction_details.types.ts",{"_index":635,"title":{},"body":{"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["start",{"_index":315,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":744,"title":{"index.html":{}},"body":{}}],["statements",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":222,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":92,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":340,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":304,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":299,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":320,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":563,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":450,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(this.clientservice.getclient",{"_index":452,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":812,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":375,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":518,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":826,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":827,"title":{},"body":{"modules.html":{}}}],["table",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":263,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["then((response",{"_index":824,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":795,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":803,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":277,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":285,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":377,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.getclient",{"_index":278,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":280,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":813,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.mirrornode",{"_index":625,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":272,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":274,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":821,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":630,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":801,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(undefined",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":624,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":629,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":631,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":271,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":279,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":286,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":273,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":284,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":283,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":487,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":811,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":583,"title":{},"body":{"injectables/KeysService.html":{}}}],["timestamp",{"_index":656,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":96,"title":{},"body":{"injectables/AccountsService.html":{}}}],["token_balance.types",{"_index":18,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":535,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":17,"title":{"interfaces/TokenBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["tokendecimals",{"_index":530,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":539,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":90,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["tokenminttransaction",{"_index":536,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":544,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":543,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":537,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":10,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["tokens.push",{"_index":217,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":538,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":337,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":329,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":331,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":309,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":814,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":300,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":323,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":335,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":362,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":334,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":333,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":332,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":330,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":351,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":632,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(this.clientservice.getclient",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(this.clientservice.getclient",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":339,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":372,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":444,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setkey(newkey",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":455,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":374,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":446,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setstarttime(start",{"_index":370,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":341,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":342,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":560,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":346,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":355,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":449,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":548,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":366,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":550,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":376,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{}}}],["transactiondetails",{"_index":545,"title":{"interfaces/TransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["transactionid",{"_index":636,"title":{},"body":{"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":541,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":700,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":701,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":702,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":662,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":644,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":672,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":388,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":387,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":641,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":642,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":686,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":566,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":505,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":524,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":506,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":527,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":507,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":529,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":540,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":398,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(this.clientservice.getclient",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":564,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":12,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/account_balance.types",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/hedera_options.types",{"_index":236,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/mirror.types",{"_index":390,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/operator.types",{"_index":232,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{}}}],["types/private",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/token_balance.types",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/transaction_details.types",{"_index":546,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":321,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":369,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":62,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpausetoken",{"_index":508,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":532,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":432,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":63,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":301,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":325,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":802,"title":{},"body":{"index.html":{}}}],["url",{"_index":606,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":786,"title":{},"body":{"index.html":{}}}],["use",{"_index":352,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":782,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":239,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":238,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":251,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":835,"title":{},"body":{"properties.html":{}}}],["void",{"_index":314,"title":{},"body":{"injectables/HcsService.html":{}}}],["walletid",{"_index":481,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["while(response.links.next",{"_index":493,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["workound",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{}}}],["wrapper",{"_index":749,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":756,"title":{},"body":{"index.html":{}}}],["yes",{"_index":84,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":823,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":774,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":775,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccountBalance.html":{"url":"interfaces/AccountBalance.html","title":"interface - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/account_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { TokenBalance } from \"./token_balance.types\";\n\nexport interface AccountBalance {\n  hbars: Hbar\n  tokens: Array  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService],\n  exports: [AccountsService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, keysThreshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:163\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:215\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:44\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:74\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:243\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:93\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { \n  AccountBalanceQuery,\n  AccountCreateTransaction, \n  AccountId, \n  AccountInfo, \n  AccountInfoQuery, \n  AccountUpdateTransaction, \n  Hbar,\n  PrivateKey,\n  Status, \n  TokenFreezeTransaction, \n  TokenId, \n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { TokenBalance } from '../../types/token_balance.types';\nimport { AccountBalance } from '../../types/account_balance.types';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class AccountsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) {}\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountInfoQuery()\n            .setAccountId(accountId);\n\n\n        /**\n         * Signing the transaction...\n         */\n        const accountInfo = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * resolving the account's info...\n         */\n        resolve(accountInfo);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetches Specific account public key\n   * @param {AccountId} accountId \n   * @returns {any} Account Public Key\n   */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new AccountUpdateTransaction()\n         /**\n         * setting single node accountId, as a workound for offline signature...\n         */\n            .setNodeAccountIds([new AccountId(6)])    \n            .setAccountId(accountId);\n\n            /**\n             * If there is a memo...\n             */\n        if(memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        /**\n         * If there is a new key...\n         */\n        if(newKey) {\n          transaction.setKey(newKey);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Signing the transaction with the client operator...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Request the receipt of the transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction consensus status...\n         */\n        resolve(receipt.status);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Creates a single or multi-sig account\n   * @param {number} balance \n   * @param {number} keysLength \n   * @param {number} keysThreshold \n   * @returns {AccountId, PrivateKey} single or multi-sig account\n   */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    keysThreshold?: number\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        let key = null;\n\n        if(keysLength > 1) {\n          key = await this.keysService.generateKeyList(undefined, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountCreateTransaction()\n            .setKey(keysLength > 1 ? (key).keyList : (key).publicKey)\n            .setInitialBalance(new Hbar(balance));\n\n        /**\n         * Executing the transactions...\n         */\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * Fetching the receipt...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving the accountId...\n         */\n        resolve({\n          accountId: receipt.accountId,\n          key: key\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  /**\n   * Freezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenFreezeTransaction()\n            .setAccountId(accountId)\n            .setTokenId(tokenId)\n            .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));   \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unfreezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenUnfreezeTransaction()\n            .setAccountId(accountId)\n            .setTokenId(tokenId)\n            .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));   \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * \n   * @param {string} accountId \n   * @param {string} tokenId \n   * @returns {AccountBalance}\n   */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(this.clientService.getClient());\n        let balance = null;\n\n        if(tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()): 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)): 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n          \n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()): 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)): 0\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:14\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:38\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:54\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Operator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Injectable()\nexport class ClientService {\n\n  private client: Client;\n  private operator: Operator;\n  private operators: Array;\n  private network: 'mainnet' | 'testnet';\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {HederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n    \n    /**\n     * Create our connection to the Hedera network...\n     */\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n    \n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {Operator}\n   */\n  getNodeOperator(): Operator {\n    return this.operator;\n  }  \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HcsService {\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {\n    // HCS Service\n  }\n\n  // Create topic...\n  createTopic(\n    adminKey?: PrivateKey, \n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n        // setting the admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if there is an admin key, transaction must be signed...\n        if(adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n        // finally, fetching the topicId from the response...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Update topic...\n  updateTopic(\n    topicId: TopicId, \n    currentAdminKey?: PrivateKey, \n    adminKey?: PrivateKey, \n    submitKey?: Key | KeyList, \n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n        // setting the new admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the new submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the new topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if the transaction has got an admin key, we must use it to sign...\n        if(currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n          // if there is a new admin key, we must use it to double sign it...\n          if(adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n          // executing the transaction, after signatures...\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise we can just sign the transaction...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n        // fetching the status of the executed transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Delete topic...\n  deleteTopic(\n    topicId: TopicId, \n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction, and freezing it...\n        const transaction = new TopicDeleteTransaction()\n        .setTopicId(topicId)\n        .freezeWith(this.clientService.getClient());\n        // signing the transaction with admin key...\n        const signTx = await transaction.sign(adminKey);\n        // fetching response...\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        // resolving status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Get topic info...\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = new TopicInfoQuery().setTopicId(topicId);  \n        const info = await transaction.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Submit Message...\n  submitMessage(\n    topicId: TopicId, \n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let txResponse = null;\n        // creating the transaction, setting topic and message...\n        const transaction = new TopicMessageSubmitTransaction()\n        .setTopicId(topicId)\n        .setMessage(message);\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if there is an submit key, transaction must be signed...\n        if(submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }        \n        // finally, fetching the status...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Get topic message...\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicMessageQuery()\n        .setTopicId(topicId);\n\n        if(start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if(end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if(limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(), \n          null, \n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { HederaOptions } from '../types/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HederaOptions.html":{"url":"interfaces/HederaOptions.html","title":"interface - HederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/hedera_options.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         MirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MirrorNode } from \"./mirror.types\";\nimport { Operator } from \"./operator.types\";\n\nexport interface HederaOptions {\n  operators: Array\n  mirrorNode: MirrorNode\n  network: 'mainnet' | 'testnet'\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class HederaService {\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { \n  FileAppendTransaction, \n  FileContentsQuery, \n  FileCreateTransaction, \n  FileDeleteTransaction, \n  FileId, \n  FileInfo, \n  FileInfoQuery, \n  FileUpdateTransaction, \n  Hbar, \n  PrivateKey, \n  Status \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HfsService {\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the file ID\n        resolve(receipt.fileId);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,    \n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }          \n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        if(newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n        \n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n        \n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = new FileContentsQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const contents = await transaction.execute(this.clientService.getClient());\n        resolve(contents.toString());\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = new FileInfoQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const infos = await transaction.execute(this.clientService.getClient());\n        resolve(infos);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n@Injectable()\nexport class HtsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, supplyKey: PrivateKey, CID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId, from: AccountId, to: AccountId, amount: number, tokenDecimals: number, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { \n  AccountId, \n  Hbar, \n  PrivateKey, \n  Status, \n  TokenAssociateTransaction, \n  TokenId, \n  TokenMintTransaction, \n  TokenPauseTransaction, \n  TokenUnpauseTransaction, \n  TokenDissociateTransaction,\n  Transaction, \n  TransferTransaction, \n  TransactionReceipt, \n  NftId, \n  TokenNftInfoQuery, \n  TokenNftInfo \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { TransactionDetails } from '../../types/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HtsService {\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async dissociateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenDissociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async pauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenPauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenUnpauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async mintNftToken(\n    tokenId: TokenId,\n    supplyKey: PrivateKey,\n    CID: string\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenMintTransaction()\n        .setTokenId(tokenId)\n        .addMetadata(Buffer.from(CID))\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n        .setNftId(nftId)\n        .execute(this.clientService.getClient());\n\n        resolve(nftInfos);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount))\n          .addHbarTransfer(to, new Hbar(amount));\n\n        if(memo) {\n          transaction.setTransactionMemo(memo);\n        }\n          \n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,    \n    amount: number,\n    tokenDecimals: number,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addTokenTransfer(tokenId, from, Number(-amount  * (10 ** tokenDecimals)))\n          .addTokenTransfer(tokenId, to, Number(amount  * (10 ** tokenDecimals)));\n\n          if(memo) {\n            transaction.setTransactionMemo(memo);\n          }\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class KeysService {\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n  constructor() {\n    // KeyService Class\n  }\n\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n  url: string\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n  accountId: string\n  privateKey: string\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\nexport interface PrivateKeyList {\n  privateKeys: PrivateKey[]\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Injectable()\nexport class RestService {\n  private mirrorNode: MirrorNode;\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenBalance.html":{"url":"interfaces/TokenBalance.html","title":"interface - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/token_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenBalance {\n  tokenId: string\n  balance: number\n  decimals: number  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionDetails.html":{"url":"interfaces/TransactionDetails.html","title":"interface - TransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/transaction_details.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\nexport interface TransactionDetails {\n  status: Status\n  transaction_id: TransactionId\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n@Injectable()\nexport class TransactionsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string):  Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if(filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n        .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`schedules/${transactionId}`);\n        \n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { \n  PrivateKey, \n  ScheduleCreateTransaction, \n  ScheduleId, \n  ScheduleInfoQuery, \n  ScheduleSignTransaction, \n  Status, \n  Transaction, \n  TransactionId, \n  TransactionReceipt, \n  TransactionReceiptQuery,\n  TransactionRecordQuery, \n  TransactionResponse \n} from '@hashgraph/sdk';\n\n@Injectable()\nexport class TransactionsService {\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionRecordQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error: any) {\n        reject(error);\n      }\n    });\n  }  \n\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionReceiptQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true)\n        .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n            .setScheduleId(scheduleId)\n            .freezeWith(this.clientService.getClient())\n            .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating a schedule transaction...\n        let  scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n            .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(this.clientService.getClient());\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/types/account_balance.types.ts\n            \n            interface\n            AccountBalance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/hedera_options.types.ts\n            \n            interface\n            HederaOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/token_balance.types.ts\n            \n            interface\n            TokenBalance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/transaction_details.types.ts\n            \n            interface\n            TransactionDetails\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install hsuite-nestjs-hederainstead, if you use yarn:\nyarn add hsuite-nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from 'hsuite-nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from 'hsuite-nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from 'hsuite-nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from 'hsuite-nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from 'hsuite-nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from 'hsuite-nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.2\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
