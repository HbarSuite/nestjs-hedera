var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccountBalance.html",[0,0.8,1,2.059]],["body/interfaces/AccountBalance.html",[0,1.465,1,3.505,2,1.982,3,0.303,4,0.303,5,0.203,6,3.731,7,0.795,8,0.795,9,1.055,10,5.06,11,5.269,12,4.082,13,0.715,14,0.032,15,3.002,16,5.409,17,0.499,18,4.461,19,2.604,20,4.461,21,0.252,22,0.026,23,0.026]],["title/modules/AccountsModule.html",[24,0.566,25,1.855]],["body/modules/AccountsModule.html",[3,0.273,4,0.273,5,0.183,14,0.032,17,0.566,21,0.227,22,0.024,23,0.024,24,0.903,25,3.827,26,1.289,27,2.072,28,3.363,29,3.363,30,3.363,31,3.363,32,2.312,33,3.256,34,3.256,35,2.509,36,3.437,37,2.456,38,1.947,39,1.947,40,4.021,41,1.909,42,2.072,43,2.072,44,0.532,45,4.021,46,2.132,47,2.347,48,3.363,49,3.363,50,1.947,51,0.59]],["title/injectables/AccountsService.html",[36,1.685,52,0.334]],["body/injectables/AccountsService.html",[1,1.52,3,0.238,4,0.096,5,0.064,7,0.252,8,0.252,9,0.458,10,1.962,11,2.925,12,0.917,13,0.636,14,0.032,15,0.685,17,0.408,19,0.826,21,0.08,22,0.011,23,0.011,36,1.244,44,0.187,51,0.208,52,0.367,53,0.454,54,1.183,55,1.335,56,1.893,57,0.694,58,2.998,59,3.006,60,2.346,61,2.346,62,2.346,63,2.346,64,2.346,65,3.006,66,1.215,67,0.826,68,1.893,69,2.328,70,1.313,71,2.346,72,1.372,73,1.372,74,1.166,75,1.415,76,2.755,77,4.181,78,3.878,79,1.415,80,2.346,81,3.243,82,3.497,83,3.497,84,4.12,85,4.145,86,1.854,87,1.594,88,2.2,89,2.078,90,2.346,91,3.663,92,3.893,93,4.634,94,1.846,95,1.415,96,2.346,97,3.497,98,2.266,99,1.854,100,2.346,101,1.415,102,3.497,103,3.497,104,2.346,105,1.415,106,2.925,107,1.914,108,2.346,109,1.415,110,2.19,111,2.346,112,1.415,113,2.346,114,1.415,115,2.925,116,3.497,117,2.709,118,1.415,119,2.346,120,1.709,121,0.578,122,0.578,123,1.657,124,2.346,125,1.121,126,2.346,127,2.346,128,3.497,129,2.346,130,2.346,131,2.348,132,2.346,133,2.346,134,0.491,135,0.826,136,1.415,137,1.415,138,1.415,139,0.826,140,1.183,141,1.183,142,2.149,143,0.694,144,1.311,145,1.809,146,2.025,147,1.809,148,1.809,149,1.594,150,2.353,151,3.026,152,3.243,153,1.754,154,2.352,155,1.52,156,1.709,157,1.415,158,1.415,159,1.809,160,1.667,161,1.809,162,1.415,163,1.415,164,1.183,165,0.75,166,1.415,167,1.415,168,1.415,169,1.415,170,1.415,171,1.415,172,1.415,173,0.917,174,2.266,175,1.183,176,1.183,177,0.917,178,0.578,179,2.266,180,1.948,181,1.415,182,2.44,183,2.266,184,1.183,185,0.826,186,1.52,187,1.962,188,1.415,189,1.415,190,1.415,191,1.415,192,1.415,193,1.415,194,1.415,195,1.031,196,0.75,197,1.031,198,1.415,199,1.962,200,1.52,201,2.346,202,1.962,203,1.709,204,2.346,205,0.826,206,1.183,207,3.497,208,2.346,209,3.497,210,1.962,211,2.346,212,2.346,213,1.415,214,1.415,215,1.415]],["title/modules/ClientModule.html",[24,0.566,32,1.196]],["body/modules/ClientModule.html",[3,0.269,4,0.269,5,0.18,13,0.664,14,0.032,17,0.552,21,0.224,22,0.024,23,0.024,24,1.033,26,1.268,32,2.183,41,1.89,42,1.616,43,2.051,44,0.523,51,0.581,57,1.171,68,2.445,70,1.371,72,1.486,73,1.486,74,1.263,87,1.486,144,1.486,178,1.616,216,3.956,217,4.225,218,2.563,219,3.657,220,2.717,221,3.956,222,4.017,223,4.36,224,2.563,225,3.657,226,3.956,227,2.882,228,3.956,229,3.657,230,2.882,231,2.309,232,4.198,233,3.308,234,2.882,235,3.308,236,2.563,237,3.308]],["title/injectables/ClientService.html",[52,0.334,68,1.298]],["body/injectables/ClientService.html",[3,0.199,4,0.199,5,0.133,7,0.52,8,0.52,9,0.799,13,0.741,14,0.032,15,2.486,17,0.498,21,0.165,22,0.019,23,0.019,44,0.386,51,0.429,52,0.539,53,0.936,56,2.4,57,1.213,66,1.423,68,1.674,70,1.604,72,0.864,73,0.864,74,0.735,81,3.427,87,1.519,121,1.193,122,1.193,123,1.213,125,1.646,134,1.015,142,1.1,143,1.874,144,1.213,160,1.543,165,2.721,177,3.999,178,2.573,220,2.609,227,2.128,231,1.705,236,1.893,238,2.443,239,3.114,240,3.938,241,5.133,242,5.133,243,2.443,244,4.098,245,2.763,246,3.427,247,2.921,248,4.098,249,2.921,250,4.098,251,4.098,252,4.098,253,2.921,254,4.098,255,2.921,256,4.098,257,2.986,258,3.959,259,2.921,260,3.427,261,2.921,262,2.921,263,2.921,264,2.443,265,2.443,266,2.443,267,4.098,268,2.921,269,2.921,270,2.921,271,1.705,272,2.921,273,5.133,274,2.921,275,4.734,276,2.921,277,2.921,278,2.921,279,2.921,280,2.921,281,2.921,282,2.921]],["title/modules/HcsModule.html",[24,0.566,283,1.855]],["body/modules/HcsModule.html",[3,0.289,4,0.289,5,0.193,14,0.031,17,0.548,21,0.24,22,0.025,23,0.025,24,0.935,26,1.362,27,2.144,32,2.344,35,2.544,37,2.542,38,2.057,39,2.057,41,1.976,42,2.144,43,2.144,44,0.562,46,2.252,47,2.48,50,2.057,51,0.624,283,3.795,284,3.553,285,4.248,286,3.553,287,3.553,288,3.462,289,4.248,290,4.248]],["title/injectables/HcsService.html",[52,0.334,288,1.685]],["body/injectables/HcsService.html",[3,0.241,4,0.099,5,0.066,7,0.258,8,0.258,9,0.467,13,0.619,14,0.032,17,0.282,21,0.082,22,0.011,23,0.011,44,0.192,51,0.213,52,0.373,53,0.465,55,1.359,56,1.913,57,0.709,66,0.832,67,0.847,68,1.913,70,1.278,72,1.325,73,1.325,74,1.127,76,2.776,86,2.718,87,1.55,88,2.14,89,2.382,94,1.71,107,2.141,110,1.057,117,3.393,120,1.745,121,0.593,122,0.593,123,1.683,125,1.357,131,2.244,134,0.504,135,0.847,142,2.178,143,0.429,144,1.253,145,1.729,146,1.729,147,1.729,148,1.729,149,2.244,150,2.607,151,2.915,153,0.847,154,2.3,155,2.301,156,1.057,159,1.729,160,1.594,161,1.729,164,3.745,173,1.982,174,2.547,179,3.24,180,2.301,182,2.073,183,2.301,185,1.398,186,2.301,195,1.057,197,2.587,200,0.94,205,1.398,271,1.398,288,1.27,291,1.213,292,3.059,293,3.059,294,3.059,295,3.059,296,3.931,297,3.059,298,2.395,299,2.003,300,1.451,301,5.498,302,3.262,303,1.451,304,4.461,305,5.498,306,1.451,307,5.229,308,1.451,309,2.003,310,1.451,311,3.551,312,5.421,313,2.395,314,3.931,315,3.931,316,3.931,317,1.451,318,1.451,319,3.059,320,1.451,321,3.059,322,1.451,323,3.288,324,1.451,325,1.451,326,1.451,327,3.931,328,1.451,329,2.395,330,2.395,331,1.451,332,2.395,333,2.395,334,2.395,335,1.451,336,1.451,337,4.233,338,2.395,339,2.395,340,2.395,341,3.551,342,2.395,343,2.395,344,2.558,345,2.395,346,2.395,347,1.451,348,1.451,349,1.745,350,2.558,351,1.451,352,1.451,353,1.451,354,1.451,355,1.451,356,3.059,357,1.451,358,1.213,359,1.451,360,1.451,361,1.451,362,3.059,363,1.451,364,1.451,365,1.451,366,1.451,367,1.451,368,1.451,369,1.451]],["title/modules/HederaModule.html",[24,0.566,370,2.059]],["body/modules/HederaModule.html",[3,0.237,4,0.237,5,0.158,13,0.611,14,0.032,17,0.589,21,0.197,22,0.022,23,0.022,24,0.984,25,3.356,26,1.117,32,1.311,33,3.048,34,3.048,35,1.423,41,1.74,42,1.888,43,1.888,44,0.461,46,1.847,47,2.033,48,2.913,49,2.913,51,0.512,57,1.031,70,1.262,72,1.368,73,1.368,74,1.163,87,1.368,144,1.368,178,1.423,217,4.025,218,2.257,219,3.367,220,2.454,222,3.367,223,4.188,224,2.257,225,3.367,227,2.538,231,2.033,283,3.356,370,3.58,371,3.483,372,3.483,373,3.483,374,3.483,375,3.725,376,3.483,377,3.356,378,3.483,379,1.547,380,2.538,381,3.483,382,3.356,383,3.483,384,3.483,385,4.622,386,4.622,387,4.622,388,4.622,389,4.622,390,4.622]],["title/interfaces/HederaOptions.html",[0,0.8,220,1.411]],["body/interfaces/HederaOptions.html",[0,1.434,2,1.887,3,0.289,4,0.289,5,0.193,7,0.757,8,0.757,9,1.024,13,0.753,14,0.032,15,2.96,17,0.484,21,0.24,22,0.025,23,0.025,165,2.783,178,1.736,220,2.331,239,3.301,240,4.536,257,4.15,258,4.764,260,4.39,379,2.832,391,3.553,392,3.824,393,4.248,394,4.248]],["title/injectables/HederaService.html",[52,0.334,375,2.059]],["body/injectables/HederaService.html",[3,0.308,4,0.308,5,0.206,7,0.806,8,0.806,9,1.064,13,0.598,14,0.032,17,0.417,21,0.256,22,0.026,23,0.026,44,0.598,51,0.664,52,0.638,53,1.45,55,2.601,56,2.635,70,1.235,121,1.848,122,1.848,123,1.614,125,1.949,375,3.534,395,3.783,396,5.454,397,4.523]],["title/modules/HfsModule.html",[24,0.566,382,1.855]],["body/modules/HfsModule.html",[3,0.297,4,0.297,5,0.199,14,0.031,17,0.532,21,0.247,22,0.025,23,0.025,24,0.952,26,1.402,27,2.183,32,2.36,37,2.587,38,2.117,39,2.117,41,2.011,42,2.183,43,2.183,44,0.578,46,2.318,50,2.117,51,0.642,382,3.769,398,3.656,399,4.372,400,3.656,401,3.656,402,3.475,403,4.372,404,4.372]],["title/injectables/HfsService.html",[52,0.334,402,1.685]],["body/injectables/HfsService.html",[3,0.22,4,0.107,5,0.248,7,0.28,8,0.28,9,0.5,12,1.02,13,0.64,14,0.032,17,0.299,21,0.089,22,0.012,23,0.012,44,0.208,51,0.231,52,0.392,53,0.505,55,1.438,56,1.975,57,0.758,58,3.067,66,0.89,67,0.919,68,1.975,70,1.32,72,1.373,73,1.373,74,1.168,76,3.008,86,2.459,87,1.587,88,2.191,89,2.418,94,1.898,99,0.835,107,1.98,115,3.12,116,3.681,117,3.33,120,2.991,121,0.643,122,0.643,123,1.639,125,1.411,131,2.459,134,0.547,135,0.919,142,2.213,143,1.104,144,1.303,145,1.798,146,1.798,147,1.798,148,1.798,149,2.333,150,2.646,151,3.093,153,2.569,154,2.384,155,1.66,159,1.798,160,1.657,161,1.798,173,2.418,174,2.661,175,1.317,176,1.317,180,2.418,182,2.822,185,1.89,195,2.718,271,2.397,309,3.434,402,1.358,405,1.317,406,4.106,407,3.238,408,3.238,409,2.562,410,2.142,411,1.575,412,6.294,413,5.364,414,5.878,415,1.575,416,1.575,417,1.575,418,1.575,419,1.575,420,1.575,421,1.575,422,3.238,423,1.575,424,1.575,425,1.575,426,1.575,427,2.562,428,2.562,429,2.562,430,2.562,431,2.562,432,2.562,433,2.562,434,2.562,435,1.575,436,3.238,437,2.562,438,3.731,439,3.731,440,2.098,441,2.708,442,3.731,443,2.718,444,3.731,445,1.575,446,4.106,447,1.575,448,1.575,449,1.575,450,1.575]],["title/modules/HtsModule.html",[24,0.566,33,1.685]],["body/modules/HtsModule.html",[3,0.272,4,0.272,5,0.182,14,0.032,17,0.554,21,0.226,22,0.024,23,0.024,24,0.901,26,1.284,27,2.067,32,2.395,33,3.484,35,2.507,37,2.45,38,1.939,39,1.939,41,1.904,42,2.067,43,2.067,44,0.53,46,2.123,47,2.337,50,1.939,51,0.588,451,3.349,452,3.349,453,4.004,454,3.349,455,3.782,456,3.782,457,4.004,458,4.004,459,2.917,460,2.595]],["title/injectables/HtsRestService.html",[52,0.334,455,1.855]],["body/injectables/HtsRestService.html",[3,0.32,4,0.197,5,0.132,7,0.516,8,0.516,13,0.676,14,0.032,15,2.706,17,0.434,21,0.164,22,0.019,23,0.019,44,0.383,51,0.425,52,0.537,53,0.928,57,1.205,66,1.415,70,1.396,72,1.513,73,1.513,74,1.287,87,1.654,88,2.283,92,3.798,94,2.028,98,2.639,123,1.394,125,1.306,142,2.028,143,0.857,144,1.394,145,1.925,146,1.925,147,1.925,148,1.925,154,2.201,159,1.925,160,1.774,161,1.925,187,3.406,205,3.351,455,2.377,459,2.967,461,4.506,462,2.109,463,4.073,464,4.073,465,4.073,466,2.421,467,3.044,468,2.895,469,2.967,470,4.073,471,2.895,472,6.038,473,4.073,474,5.588,475,2.895,476,4.073,477,2.421,478,2.421,479,4.073,480,4.506,481,2.895,482,2.421,483,2.895,484,5.113,485,3.406,486,3.406,487,4.073,488,4.073,489,4.073,490,2.895]],["title/injectables/HtsService.html",[52,0.334,456,1.855]],["body/injectables/HtsService.html",[3,0.187,4,0.085,5,0.057,7,0.223,8,0.223,9,0.412,12,2.096,13,0.645,14,0.032,17,0.298,21,0.071,22,0.01,23,0.01,44,0.165,51,0.184,52,0.34,53,0.401,55,1.221,56,1.796,57,0.626,58,3.121,66,0.735,67,0.73,68,1.796,70,1.331,72,1.402,73,1.402,74,1.192,76,2.999,86,1.917,87,1.626,88,2.245,89,2.469,91,3.594,92,4.124,94,1.602,98,3.07,107,2.204,117,3.07,121,0.511,122,0.511,123,1.7,125,1.259,131,2.585,134,0.434,135,0.73,142,2.275,143,0.37,144,1.356,145,1.871,146,2.041,147,1.871,148,1.871,149,1.458,150,2.569,151,3.121,152,1.769,153,1.605,154,2.429,156,2.003,159,1.871,160,1.724,161,1.871,173,1.781,174,2.849,179,2.849,180,2.849,182,2.846,183,2.849,184,2.299,185,1.888,199,2.299,200,2.344,202,2.299,203,2.003,239,1.458,245,1.605,441,3.025,443,2.003,456,1.235,459,1.541,491,1.046,492,2.749,493,2.749,494,2.749,495,2.749,496,2.115,497,2.749,498,2.749,499,2.749,500,2.115,501,2.115,502,1.25,503,1.25,504,2.115,505,1.25,506,1.25,507,2.115,508,1.25,509,4.738,510,1.25,511,3.926,512,1.25,513,3.234,514,3.234,515,1.25,516,2.115,517,2.115,518,4.397,519,1.25,520,2.115,521,1.25,522,1.25,523,4.397,524,4.58,525,1.25,526,1.25,527,1.25,528,3.926,529,1.25,530,2.115,531,1.25,532,2.115,533,2.115,534,2.115,535,2.115,536,2.115,537,2.115,538,2.115,539,3.234,540,1.769,541,2.115,542,2.115,543,2.115,544,2.096,545,1.25,546,2.115,547,2.115,548,1.25,549,1.25,550,1.046,551,2.115,552,1.25,553,1.25,554,1.25,555,1.25,556,1.25,557,1.25,558,1.25,559,2.115,560,2.749,561,2.749,562,2.749,563,2.749,564,2.115,565,2.115,566,1.25,567,1.25]],["title/modules/KeysModule.html",[24,0.566,34,1.685]],["body/modules/KeysModule.html",[3,0.308,4,0.308,5,0.206,14,0.031,17,0.503,21,0.256,22,0.026,23,0.026,24,0.973,26,1.454,27,2.231,34,3.391,37,2.645,38,2.196,39,2.196,41,2.056,43,2.231,44,0.6,50,2.196,51,0.666,69,3.189,568,3.792,569,3.792,570,3.792,571,4.534,572,4.534]],["title/injectables/KeysService.html",[52,0.334,69,1.539]],["body/injectables/KeysService.html",[3,0.201,4,0.201,5,0.134,7,0.527,8,0.527,9,0.806,13,0.547,14,0.032,15,1.432,17,0.439,21,0.167,22,0.02,23,0.02,44,0.391,51,0.7,52,0.542,53,0.948,55,2.117,56,2.407,57,1.223,66,1.655,69,2.002,70,1.409,72,0.875,73,0.875,74,0.744,76,3.124,86,2.526,87,1.527,88,2.108,89,1.689,94,1.654,107,2.044,121,1.208,122,1.208,123,1.709,125,1.654,134,1.027,139,2.412,140,2.472,141,2.472,142,1.794,143,1.223,144,1.223,145,1.689,146,2.218,147,1.689,148,1.689,151,1.567,154,1.208,159,1.689,160,1.556,161,1.689,186,2.678,302,3.956,344,2.472,349,2.154,440,3.344,573,2.472,574,5.16,575,4.765,576,4.133,577,4.133,578,2.956,579,5.43,580,2.956,581,5.43,582,5.892,583,2.956,584,3.456,585,5.16,586,4.133,587,2.472,588,4.133,589,2.956,590,2.956,591,2.956,592,2.956,593,2.956,594,4.541,595,4.133,596,2.472,597,2.956,598,2.956,599,2.956]],["title/interfaces/MirrorNode.html",[0,0.8,379,1.411]],["body/interfaces/MirrorNode.html",[0,1.384,2,2.038,3,0.312,4,0.312,5,0.209,7,0.817,8,0.817,9,1.072,13,0.728,14,0.031,21,0.259,22,0.026,23,0.026,74,1.384,94,2.097,379,2.443,600,3.836,601,6.107,602,4.619,603,5.5]],["title/interfaces/Operator.html",[0,0.8,178,1.298]],["body/interfaces/Operator.html",[0,1.343,2,1.938,3,0.297,4,0.297,5,0.198,7,0.777,8,0.777,9,1.04,13,0.762,14,0.031,21,0.247,22,0.025,23,0.025,74,1.343,84,3.886,89,2.453,91,3.505,94,2.12,99,2.828,106,4.462,107,2.261,143,1.579,178,2.18,587,5.021,604,3.648]],["title/interfaces/PrivateKeyList.html",[0,0.8,139,1.855]],["body/interfaces/PrivateKeyList.html",[0,1.465,2,1.982,3,0.303,4,0.303,5,0.203,7,0.795,8,0.795,9,1.055,13,0.715,14,0.032,15,2.619,17,0.411,21,0.252,22,0.026,23,0.026,89,2.472,107,1.68,134,1.55,139,3.157,143,1.601,302,4.686,440,3.921,584,4.523,594,5.06,605,3.731,606,3.731]],["title/modules/RestModule.html",[24,0.566,35,1.298]],["body/modules/RestModule.html",[3,0.265,4,0.265,5,0.177,13,0.657,14,0.032,17,0.561,21,0.22,22,0.024,23,0.024,24,1.027,26,1.248,35,2.355,41,1.871,42,2.03,43,2.03,44,0.515,51,0.572,57,1.152,70,1.357,72,1.47,73,1.47,74,1.251,87,1.47,144,1.47,217,4.2,218,2.522,219,3.62,220,2.705,222,3.987,223,4.339,224,2.522,225,3.62,229,3.62,230,2.836,231,2.272,232,4.155,233,3.255,234,2.836,235,3.255,236,2.522,237,3.255,379,1.729,380,2.836,460,2.522,467,3.158,607,3.893,608,3.893,609,3.893,610,5.473,611,2.836]],["title/injectables/RestService.html",[52,0.334,467,1.685]],["body/injectables/RestService.html",[3,0.223,4,0.223,5,0.149,7,0.585,8,0.585,9,0.866,13,0.714,14,0.032,17,0.497,21,0.186,22,0.021,23,0.021,44,0.434,51,0.482,52,0.566,53,1.053,55,2.237,56,2.469,57,1.315,58,2.67,66,1.543,70,1.473,72,1.315,73,1.315,74,1.118,87,1.315,88,1.815,94,1.73,121,1.342,122,1.342,123,1.49,125,1.863,142,1.896,143,1.668,144,0.972,145,1.342,146,1.342,147,1.342,148,1.342,150,1.974,154,1.342,159,1.342,160,1.236,161,1.342,165,2.86,196,2.356,205,1.917,220,2.684,231,1.917,236,2.128,243,2.747,266,2.747,379,2.581,380,2.393,392,3.93,467,2.356,469,3.237,611,2.393,612,2.747,613,5.395,614,6.124,615,4.443,616,4.443,617,3.284,618,4.443,619,4.443,620,3.284,621,3.284,622,3.284,623,5.395,624,4.443,625,3.284,626,3.284,627,3.284,628,3.284,629,3.284]],["title/interfaces/TokenBalance.html",[0,0.8,19,1.855]],["body/interfaces/TokenBalance.html",[0,1.346,2,1.946,3,0.298,4,0.298,5,0.199,7,0.78,8,0.78,9,1.043,13,0.764,14,0.031,19,3.122,21,0.248,22,0.025,23,0.025,76,3.445,85,5.246,92,3.897,94,1.977,98,4.065,99,2.836,210,5.246,630,3.664]],["title/interfaces/TransactionDetails.html",[0,0.8,544,2.059]],["body/interfaces/TransactionDetails.html",[0,1.471,2,2,3,0.306,4,0.306,5,0.205,7,0.802,8,0.802,9,1.061,13,0.719,14,0.032,17,0.415,21,0.255,22,0.026,23,0.026,99,2.883,131,3.458,134,1.564,150,2.696,203,4.422,544,3.524,631,3.766,632,4.422]],["title/modules/TransactionsModule.html",[24,0.566,377,1.855]],["body/modules/TransactionsModule.html",[3,0.276,4,0.276,5,0.184,14,0.032,17,0.556,21,0.229,22,0.024,23,0.024,24,0.908,26,1.3,27,2.083,32,2.317,35,2.514,37,2.469,38,1.963,39,1.963,41,1.919,42,2.083,43,2.083,44,0.536,46,2.149,47,2.366,50,1.963,51,0.595,196,2.149,377,3.818,460,2.627,633,3.391,634,3.391,635,4.054,636,3.391,637,3.441,638,3.441,639,4.054,640,4.054]],["title/injectables/TransactionsRestService.html",[52,0.334,637,1.685]],["body/injectables/TransactionsRestService.html",[3,0.172,4,0.172,5,0.115,7,0.45,8,0.45,13,0.676,14,0.032,17,0.341,21,0.143,22,0.018,23,0.018,44,0.334,51,0.371,52,0.504,53,0.81,57,1.094,66,1.284,70,1.396,72,1.513,73,1.513,74,1.287,86,1.34,87,1.673,88,2.31,91,3.3,94,2.054,123,1.58,125,1.185,142,2.076,143,0.748,144,1.422,145,1.963,146,1.963,147,1.963,148,1.963,150,2.134,154,2.31,159,1.963,160,1.809,161,1.963,196,3.185,205,3.57,462,1.842,466,2.114,467,2.997,469,2.692,477,2.114,478,2.114,480,4.465,482,3.09,485,3.09,486,3.09,602,2.692,632,2.692,637,1.959,641,4.465,642,3.695,643,3.695,644,3.695,645,3.695,646,2.528,647,3.695,648,5.339,649,2.528,650,4.728,651,3.695,652,4.805,653,3.695,654,2.528,655,3.09,656,3.695,657,2.528,658,3.09,659,2.528,660,4.805,661,3.695,662,3.695,663,3.695,664,3.695,665,3.695,666,3.695,667,3.695,668,3.695,669,3.695,670,2.528,671,2.528,672,2.528,673,2.528]],["title/injectables/TransactionsService.html",[52,0.334,638,1.685]],["body/injectables/TransactionsService.html",[3,0.301,4,0.146,5,0.098,7,0.383,8,0.383,9,0.638,13,0.692,14,0.032,17,0.366,21,0.122,22,0.016,23,0.016,44,0.284,51,0.316,52,0.466,53,0.689,55,1.762,56,2.201,57,0.969,58,3.176,66,1.137,67,1.255,68,2.201,70,1.427,72,1.488,73,1.488,74,1.265,87,1.666,88,2.3,89,1.95,94,1.422,99,1.14,107,1.893,110,2.889,121,0.878,122,0.878,123,1.718,125,1.612,131,2.102,134,0.747,135,1.255,142,1.968,143,0.636,144,1.412,145,1.95,146,1.95,147,1.95,148,1.95,149,1.736,150,2.794,151,2.53,153,1.911,154,2.201,155,2.57,159,1.95,160,1.797,161,1.95,177,2.122,178,1.338,179,2.122,182,3.388,183,2.122,185,1.255,186,1.393,196,1.736,200,1.393,206,1.798,239,1.14,245,1.255,271,1.911,323,1.798,350,2.738,358,1.798,443,1.566,540,2.738,550,2.738,632,4.28,638,1.736,650,3.708,658,4.205,674,1.798,675,3.274,676,3.274,677,3.274,678,3.274,679,3.274,680,3.274,681,3.274,682,2.15,683,3.274,684,3.274,685,2.15,686,5.805,687,3.274,688,2.15,689,3.274,690,3.274,691,2.15,692,3.274,693,2.15,694,3.274,695,3.966,696,3.274,697,3.274,698,3.274,699,3.274,700,3.274,701,3.274,702,3.274,703,2.15,704,3.274,705,2.15,706,3.317,707,3.274,708,2.15,709,2.15,710,2.15,711,2.15,712,2.15]],["title/coverage.html",[713,3.633]],["body/coverage.html",[0,1.562,1,2.548,5,0.179,6,3.288,13,0.52,14,0.031,19,2.295,22,0.024,23,0.024,36,2.084,52,0.675,54,3.288,68,1.606,69,1.904,107,1.48,123,1.164,139,2.295,178,1.606,220,1.746,238,3.288,288,2.084,291,3.288,375,2.548,379,1.746,391,3.288,395,3.288,402,2.084,405,3.288,455,2.295,456,2.295,461,3.288,462,3.643,467,2.084,491,3.288,544,2.548,573,3.288,600,3.288,604,3.288,605,3.288,606,3.288,612,3.288,630,3.288,631,3.288,637,2.084,638,2.084,641,3.288,674,3.288,713,3.288,714,3.932,715,3.932,716,3.932,717,6.593,718,3.932,719,5.498,720,3.932,721,5.498,722,3.932,723,3.932,724,3.932,725,5.786,726,5.498,727,3.932,728,3.932]],["title/dependencies.html",[27,1.562,729,2.216]],["body/dependencies.html",[14,0.031,22,0.027,23,0.027,27,2.001,44,0.648,134,1.701,230,3.568,264,4.096,265,4.096,611,3.568,730,4.898,731,4.898,732,4.898,733,4.898,734,4.898,735,4.898,736,4.898,737,4.898,738,4.898]],["title/index.html",[8,0.472,706,2.216,739,2.65]],["body/index.html",[5,0.13,14,0.032,17,0.572,21,0.229,22,0.019,23,0.019,24,0.72,36,2.484,41,1.079,42,1.652,44,0.535,50,1.388,51,0.594,52,0.425,58,1.519,66,0.995,69,2.269,84,2.945,89,1.652,91,2.36,107,1.522,123,1.197,125,0.919,134,0.995,143,1.694,149,2.143,165,2.143,177,1.857,196,1.519,197,2.087,218,1.857,224,1.857,229,2.087,234,2.087,239,2.143,240,2.945,245,2.971,246,2.396,257,2.087,271,1.672,288,2.484,299,2.396,304,2.396,307,2.396,349,3.91,370,2.62,379,1.796,392,2.945,402,2.484,410,2.396,440,1.857,460,1.857,596,3.381,602,2.087,637,2.143,638,1.519,655,2.396,740,4.971,741,5.095,742,2.865,743,2.865,744,2.865,745,2.865,746,4.043,747,2.865,748,2.865,749,2.865,750,2.865,751,4.043,752,2.865,753,2.865,754,4.043,755,2.865,756,2.865,757,4.043,758,2.865,759,2.865,760,2.865,761,2.865,762,4.043,763,2.865,764,4.685,765,2.865,766,2.865,767,2.865,768,2.865,769,2.865,770,2.865,771,2.865,772,5.089,773,2.865,774,2.865,775,2.865,776,2.865,777,2.865,778,2.865,779,2.865,780,2.865,781,2.865,782,2.865,783,2.865,784,2.865,785,2.865,786,2.865,787,2.865,788,2.865,789,2.865,790,2.865,791,2.865,792,4.043,793,2.865,794,2.865,795,2.865,796,2.865,797,2.865,798,2.865,799,2.865,800,2.865,801,4.685,802,5.57,803,5.57,804,2.865,805,2.865,806,2.865,807,2.865,808,2.865,809,2.865,810,2.865,811,2.865,812,2.865,813,2.865,814,2.865,815,2.865,816,2.865,817,2.865]],["title/modules.html",[26,1.393]],["body/modules.html",[14,0.026,22,0.026,23,0.026,25,2.722,26,1.495,32,1.756,33,2.473,34,2.473,35,1.905,283,2.722,370,3.022,377,2.722,382,2.722,818,6.365,819,6.365,820,6.365,821,6.524,822,5.932,823,5.932]],["title/overview.html",[824,3.633]],["body/overview.html",[2,1.528,14,0.032,22,0.022,23,0.022,25,3.722,26,1.103,27,1.873,28,2.877,29,2.877,30,2.877,31,2.877,32,2.299,33,3.413,34,3.122,35,2.406,36,3.187,37,2.22,38,1.666,39,1.666,53,1.103,69,2.911,283,3.608,284,2.877,286,2.877,287,2.877,288,3.187,377,3.7,382,3.508,398,2.877,400,2.877,401,2.877,402,3.187,451,2.877,452,2.877,454,2.877,455,3.508,456,3.508,568,2.877,569,2.877,570,2.877,633,2.877,634,2.877,636,2.877,637,3.187,638,3.187,824,2.877,825,3.44,826,3.44,827,3.44]],["title/properties.html",[9,0.746,729,2.216]],["body/properties.html",[7,0.849,9,0.929,14,0.031,22,0.027,23,0.027,165,2.527,239,2.527,245,3.284,740,5.007,741,3.986,828,4.766,829,4.766,830,4.766,831,4.766,832,4.766,833,4.766,834,4.766,835,4.766,836,4.766,837,4.766,838,4.766,839,4.766,840,4.766,841,4.766,842,4.766,843,4.766]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{}}}],["0.0.7",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":790,"title":{},"body":{"index.html":{}}}],["1.0.2",{"_index":829,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":565,"title":{},"body":{"injectables/HtsService.html":{}}}],["10/10",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":667,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["11",{"_index":826,"title":{},"body":{"overview.html":{}}}],["12/12",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["2.0.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":827,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":825,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["account",{"_index":84,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/Operator.html":{},"index.html":{}}}],["account's",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":798,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":793,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"interfaces/AccountBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":91,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(6",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfo",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":45,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":384,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":25,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":36,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":752,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":556,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":557,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":548,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":567,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":564,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":337,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":305,"title":{},"body":{"injectables/HcsService.html":{}}}],["amount",{"_index":524,"title":{},"body":{"injectables/HtsService.html":{}}}],["api",{"_index":603,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["apikey",{"_index":601,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["app.controller",{"_index":763,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":756,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":765,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":762,"title":{},"body":{"index.html":{}}}],["append",{"_index":406,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":411,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":754,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":764,"title":{},"body":{"index.html":{}}}],["array",{"_index":15,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsRestService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["array(length).keys()].foreach",{"_index":597,"title":{},"body":{"injectables/KeysService.html":{}}}],["associate",{"_index":504,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken",{"_index":492,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":502,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":58,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":809,"title":{},"body":{"index.html":{}}}],["author",{"_index":843,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":625,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":823,"title":{},"body":{"modules.html":{}}}],["await",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":85,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["browse",{"_index":821,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":818,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":835,"title":{},"body":{"properties.html":{}}}],["call",{"_index":613,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":673,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":481,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":483,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":488,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":490,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":672,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":668,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":659,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":616,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":671,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":311,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":368,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":774,"title":{},"body":{"index.html":{}}}],["catch",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":802,"title":{},"body":{"index.html":{}}}],["choice",{"_index":260,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["cid",{"_index":514,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":51,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":278,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":277,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":228,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":46,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":32,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":385,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":389,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":68,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":28,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":29,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":31,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":30,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":284,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":286,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":285,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":287,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":398,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":400,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":399,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":401,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":451,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":452,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":453,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":454,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":568,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":570,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":569,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":633,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":634,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":635,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":636,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":229,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":772,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":779,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":778,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":777,"title":{},"body":{"index.html":{}}}],["connect",{"_index":761,"title":{},"body":{"index.html":{}}}],["connection",{"_index":272,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(error",{"_index":803,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":791,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":813,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":812,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":801,"title":{},"body":{"index.html":{}}}],["const",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":66,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":67,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":243,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":466,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":413,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":422,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":713,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":271,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["create(key",{"_index":416,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":59,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":75,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":80,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":675,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":681,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":292,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":300,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":327,"title":{},"body":{"injectables/HcsService.html":{}}}],["custom",{"_index":16,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["decimals",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["decorators",{"_index":247,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":70,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":309,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":418,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":293,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":306,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":27,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["dex",{"_index":832,"title":{},"body":{"properties.html":{}}}],["disassociate",{"_index":507,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken",{"_index":493,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":505,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":352,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":223,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":265,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":315,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":618,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":783,"title":{},"body":{"index.html":{}}}],["execute",{"_index":345,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(this.clientservice.getclient",{"_index":554,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":355,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":43,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetch",{"_index":650,"title":{},"body":{"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["fetches",{"_index":102,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":428,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":429,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":430,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":431,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":412,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":432,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":433,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":434,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":648,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":346,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":755,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":218,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":219,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":224,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":225,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":60,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":90,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":93,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":96,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(this.clientservice.getclient",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":341,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":318,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":579,"title":{},"body":{"injectables/KeysService.html":{}}}],["generated",{"_index":792,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":574,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":575,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":580,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":794,"title":{},"body":{"index.html":{}}}],["getallholders",{"_index":463,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":470,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":464,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":473,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":642,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":647,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":643,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":651,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":241,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":407,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":420,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":61,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":100,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":408,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfos(fileid",{"_index":423,"title":{},"body":{"injectables/HfsService.html":{}}}],["getkeys",{"_index":62,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":104,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatesttransactions",{"_index":644,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":653,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":294,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":310,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":494,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":508,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":242,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":63,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{}}}],["gets",{"_index":254,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":645,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":656,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":676,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":684,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":706,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":465,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":476,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionquery",{"_index":677,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":687,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":678,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":690,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":841,"title":{},"body":{"properties.html":{}}}],["given",{"_index":804,"title":{},"body":{"index.html":{}}}],["gives",{"_index":250,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":387,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":822,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":18,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["hbar",{"_index":12,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["hbar(amount",{"_index":558,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(maxtransactionfee",{"_index":439,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbars",{"_index":10,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["hcs",{"_index":299,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":290,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":381,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":810,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":283,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":288,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":623,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":245,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":842,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":376,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":837,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":766,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":787,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":785,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":786,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":784,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":788,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":753,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":750,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":370,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":767,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":775,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":220,"title":{"interfaces/HederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["hederaservice",{"_index":375,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":410,"title":{},"body":{"injectables/HfsService.html":{},"index.html":{}}}],["hfs.service",{"_index":404,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":383,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":382,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":402,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":472,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":484,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":833,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":740,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts",{"_index":459,"title":{},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{}}}],["hts.service",{"_index":458,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":33,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":455,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":456,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":610,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":836,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":834,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":770,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":614,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":99,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"interfaces/Operator.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":782,"title":{},"body":{"index.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":449,"title":{},"body":{"injectables/HfsService.html":{}}}],["inject",{"_index":236,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":266,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":52,"title":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":53,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":749,"title":{},"body":{"index.html":{}}}],["installation",{"_index":745,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{}},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"overview.html":{}}}],["invalid",{"_index":251,"title":{},"body":{"injectables/ClientService.html":{}}}],["isc",{"_index":839,"title":{},"body":{"properties.html":{}}}],["js",{"_index":742,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":811,"title":{},"body":{"index.html":{}}}],["key",{"_index":107,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":800,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":302,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":595,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":440,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"index.html":{}}}],["keys.service",{"_index":572,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":577,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":77,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":34,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":69,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":78,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":830,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":655,"title":{},"body":{"injectables/TransactionsRestService.html":{},"index.html":{}}}],["length",{"_index":581,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":838,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":316,"title":{},"body":{"injectables/HcsService.html":{}}}],["list",{"_index":584,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["list.types",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":606,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["lodash",{"_index":479,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":487,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":56,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":256,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":329,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":396,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":427,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":533,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":586,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":619,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":694,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":257,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxtransactionfee",{"_index":414,"title":{},"body":{"injectables/HfsService.html":{}}}],["memo",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":312,"title":{},"body":{"injectables/HcsService.html":{}}}],["method",{"_index":757,"title":{},"body":{"index.html":{}}}],["methods",{"_index":57,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mint",{"_index":516,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken",{"_index":495,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":512,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":392,"title":{},"body":{"interfaces/HederaOptions.html":{},"injectables/RestService.html":{},"index.html":{}}}],["mirror.types",{"_index":393,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["mirrornode",{"_index":379,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{},"index.html":{}}}],["module",{"_index":24,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":26,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":82,"title":{},"body":{"injectables/AccountsService.html":{}}}],["name",{"_index":73,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":596,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":760,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":741,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":611,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":44,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":230,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":264,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":239,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":486,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":661,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":664,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":663,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nft",{"_index":511,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid",{"_index":541,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":551,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":552,"title":{},"body":{"injectables/HtsService.html":{}}}],["node",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/RestService.html":{},"index.html":{},"properties.html":{}}}],["npm",{"_index":746,"title":{},"body":{"index.html":{}}}],["null",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":76,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/TokenBalance.html":{}}}],["number(amount",{"_index":566,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(response.tokendecimals?._map.get(tokenid",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(response.tokens._map.get(tokenid)?.tostring",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{}}}],["offline",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{}}}],["once",{"_index":781,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":263,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":248,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":178,"title":{"interfaces/Operator.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/Operator.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["operator.types",{"_index":394,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["operators",{"_index":240,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["optional",{"_index":74,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":222,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":237,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":235,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":758,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":344,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":824,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":729,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":759,"title":{},"body":{"index.html":{}}}],["pause",{"_index":520,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausekey",{"_index":518,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":496,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":517,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":89,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":815,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":799,"title":{},"body":{"index.html":{}}}],["privatekey.generate",{"_index":588,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":139,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":594,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":598,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":88,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(resolve",{"_index":665,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":773,"title":{},"body":{"index.html":{}}}],["protected",{"_index":55,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":232,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":591,"title":{},"body":{"injectables/KeysService.html":{}}}],["provider",{"_index":374,"title":{},"body":{"modules/HederaModule.html":{}}}],["providers",{"_index":41,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":106,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/Operator.html":{}}}],["public.mirrornode.hedera.com",{"_index":771,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":587,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":590,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":599,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":593,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":585,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":592,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(this.clientservice.getclient",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":252,"title":{},"body":{"injectables/ClientService.html":{}}}],["receipt",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":711,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["record",{"_index":689,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reject",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":97,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":840,"title":{},"body":{"properties.html":{}}}],["request",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":443,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(balance",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":448,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":489,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":358,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":450,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":589,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":555,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(receipt",{"_index":550,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":445,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":347,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":361,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":482,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":629,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":712,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":369,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":563,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":669,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next",{"_index":485,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.links.next.split",{"_index":662,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest",{"_index":469,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service",{"_index":460,"title":{},"body":{"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":462,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:116",{"_index":657,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:24",{"_index":477,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:42",{"_index":471,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:59",{"_index":649,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:74",{"_index":475,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:8",{"_index":646,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:9",{"_index":468,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:98",{"_index":654,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":478,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":35,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":386,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":390,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":467,"title":{"injectables/RestService.html":{}},"body":{"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":87,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":748,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":707,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":695,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduled",{"_index":658,"title":{},"body":{"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":708,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(this.clientservice.getclient",{"_index":710,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":686,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":696,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":697,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":743,"title":{},"body":{"index.html":{}}}],["sender",{"_index":560,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":509,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":436,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":446,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":703,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":702,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setinitialbalance(new",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkey(keyslength",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":435,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":359,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":553,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([new",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":709,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":704,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["settimeout(resolve",{"_index":666,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":546,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":356,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":701,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":747,"title":{},"body":{"index.html":{}}}],["sig",{"_index":83,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":350,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["sign(key",{"_index":705,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["signatures",{"_index":354,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":342,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":679,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":692,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(this.clientservice.getclient",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":353,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":176,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":81,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":831,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":103,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":54,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:166",{"_index":79,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:218",{"_index":95,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:246",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:273",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:30",{"_index":71,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:47",{"_index":101,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:77",{"_index":105,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:96",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":216,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:23",{"_index":226,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:9",{"_index":221,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":238,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:17",{"_index":255,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:22",{"_index":261,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:27",{"_index":262,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:32",{"_index":259,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:37",{"_index":244,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:61",{"_index":249,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:77",{"_index":253,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":289,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":291,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:125",{"_index":328,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:211",{"_index":308,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:252",{"_index":325,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:278",{"_index":322,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:28",{"_index":298,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:335",{"_index":317,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:47",{"_index":303,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":371,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:17",{"_index":372,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:46",{"_index":373,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":395,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:12",{"_index":397,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":403,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":405,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:106",{"_index":415,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:163",{"_index":426,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:231",{"_index":419,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:26",{"_index":409,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:281",{"_index":421,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:309",{"_index":424,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:45",{"_index":417,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":461,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":457,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":491,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:106",{"_index":519,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:129",{"_index":531,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:153",{"_index":515,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:181",{"_index":510,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:208",{"_index":522,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:275",{"_index":529,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:32",{"_index":501,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:342",{"_index":526,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:49",{"_index":503,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:78",{"_index":506,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":571,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":573,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:14",{"_index":576,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:26",{"_index":578,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:44",{"_index":583,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":607,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:10",{"_index":608,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:25",{"_index":609,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":612,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:15",{"_index":620,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:20",{"_index":615,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:39",{"_index":617,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":641,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":639,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":674,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:121",{"_index":682,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:157",{"_index":685,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:27",{"_index":680,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:42",{"_index":688,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:62",{"_index":691,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:84",{"_index":693,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/account_balance.types.ts",{"_index":6,"title":{},"body":{"interfaces/AccountBalance.html":{},"coverage.html":{}}}],["src/types/hedera_options.types.ts",{"_index":391,"title":{},"body":{"interfaces/HederaOptions.html":{},"coverage.html":{}}}],["src/types/mirror.types.ts",{"_index":600,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":604,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":605,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["src/types/token_balance.types.ts",{"_index":630,"title":{},"body":{"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["src/types/transaction_details.types.ts",{"_index":631,"title":{},"body":{"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["start",{"_index":314,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":739,"title":{"index.html":{}},"body":{}}],["statements",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":217,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":94,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":323,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":301,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":295,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":320,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":561,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":442,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(this.clientservice.getclient",{"_index":444,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":806,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":319,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":513,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":819,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":820,"title":{},"body":{"modules.html":{}}}],["table",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":258,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["then((response",{"_index":817,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":789,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":797,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":273,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":281,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":367,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.getclient",{"_index":274,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":276,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":807,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.mirrornode",{"_index":622,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":268,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":270,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":814,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":626,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":795,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(undefined",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":621,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":624,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":627,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":267,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":275,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":282,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":269,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":280,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":279,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":480,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":805,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":582,"title":{},"body":{"injectables/KeysService.html":{}}}],["timestamp",{"_index":652,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":98,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["token_balance.types",{"_index":20,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":534,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":19,"title":{"interfaces/TokenBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["tokendecimals",{"_index":528,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":538,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":92,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["tokenminttransaction",{"_index":535,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":543,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":542,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":536,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":11,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["tokens.push",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":537,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":304,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":330,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":332,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":307,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":808,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":296,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":324,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":336,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":357,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":335,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":334,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":333,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":331,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":348,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":628,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(this.clientservice.getclient",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(this.clientservice.getclient",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":338,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":364,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":437,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setkey(newkey",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":447,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":365,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":438,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setstarttime(start",{"_index":363,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":339,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":340,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":559,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":343,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":351,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":441,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":547,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":360,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":549,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":366,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{}}}],["transactiondetails",{"_index":544,"title":{"interfaces/TransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["transactionid",{"_index":632,"title":{},"body":{"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":540,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":698,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":699,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":700,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":660,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":640,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":670,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":378,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":377,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":637,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":638,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":683,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":523,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":497,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":521,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":498,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":525,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":499,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":527,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":539,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":388,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(this.clientservice.getclient",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":562,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/account_balance.types",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/hedera_options.types",{"_index":231,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/mirror.types",{"_index":380,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/operator.types",{"_index":227,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{}}}],["types/private",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/token_balance.types",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/transaction_details.types",{"_index":545,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":321,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":362,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":64,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpause",{"_index":532,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken",{"_index":500,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":530,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":425,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":65,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":297,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":326,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":796,"title":{},"body":{"index.html":{}}}],["url",{"_index":602,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":780,"title":{},"body":{"index.html":{}}}],["use",{"_index":349,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":776,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":234,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":233,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":246,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":828,"title":{},"body":{"properties.html":{}}}],["void",{"_index":313,"title":{},"body":{"injectables/HcsService.html":{}}}],["walletid",{"_index":474,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["workound",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{}}}],["wrapper",{"_index":744,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":751,"title":{},"body":{"index.html":{}}}],["yes",{"_index":86,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":816,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":768,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":769,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccountBalance.html":{"url":"interfaces/AccountBalance.html","title":"interface - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/account_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HBAR\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of custom tokens\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { TokenBalance } from \"./token_balance.types\";\n\n/**\n * Interface\n */\nexport interface AccountBalance {\n\n  /**\n   * HBAR\n   */\n  hbars: Hbar\n\n  /**\n   * Array of custom tokens\n   */\n  tokens: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService],\n  exports: [AccountsService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, keysThreshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:166\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:218\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:47\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:77\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:273\n                \n            \n\n\n            \n                \n                    Get query balance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:246\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:96\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:30\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountBalanceQuery,\n  AccountCreateTransaction,\n  AccountId,\n  AccountInfo,\n  AccountInfoQuery,\n  AccountUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenFreezeTransaction,\n  TokenId,\n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { TokenBalance } from '../../types/token_balance.types';\nimport { AccountBalance } from '../../types/account_balance.types';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) { }\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountInfoQuery()\n          .setAccountId(accountId);\n\n\n        /**\n         * Signing the transaction...\n         */\n        const accountInfo = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * resolving the account's info...\n         */\n        resolve(accountInfo);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetches Specific account public key\n   * @param {AccountId} accountId \n   * @returns {any} Account Public Key\n   */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new AccountUpdateTransaction()\n          /**\n          * setting single node accountId, as a workound for offline signature...\n          */\n          .setNodeAccountIds([new AccountId(6)])\n          .setAccountId(accountId);\n\n        /**\n         * If there is a memo...\n         */\n        if (memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        /**\n         * If there is a new key...\n         */\n        if (newKey) {\n          transaction.setKey(newKey);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Signing the transaction with the client operator...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Request the receipt of the transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction consensus status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Creates a single or multi-sig account\n   * @param {number} balance \n   * @param {number} keysLength \n   * @param {number} keysThreshold \n   * @returns {AccountId, PrivateKey} single or multi-sig account\n   */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    keysThreshold?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let key = null;\n\n        if (keysLength > 1) {\n          key = await this.keysService.generateKeyList(undefined, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountCreateTransaction()\n          .setKey(keysLength > 1 ? (key).keyList : (key).publicKey)\n          .setInitialBalance(new Hbar(balance));\n\n        /**\n         * Executing the transactions...\n         */\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * Fetching the receipt...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving the accountId...\n         */\n        resolve({\n          accountId: receipt.accountId,\n          key: key\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Freezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenFreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unfreezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenUnfreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get query balance\n   * @param {string} accountId \n   * @param {string} tokenId \n   * @returns {AccountBalance}\n   */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(this.clientService.getClient());\n        let balance = null;\n\n        if (tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n\n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:37\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:61\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:77\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:17\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:37\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:32\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Operator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:22\n                        \n                    \n\n            \n                \n                    Single Operator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:27\n                        \n                    \n\n            \n                \n                    Array of Operators\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n\n/**\n * Injectable\n */\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n\n  /**\n   * Single Operator\n   */\n  private operator: Operator;\n\n  /**\n   * Array of Operators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet';\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {HederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n\n    /**\n     * Create our connection to the Hedera network...\n     */\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {Operator}\n   */\n  getNodeOperator(): Operator {\n    return this.operator;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                            \n                        \n\n                \n                    \n                            HCS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:47\n                \n            \n\n\n            \n                \n                    Create topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:211\n                \n            \n\n\n            \n                \n                    Delete topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:335\n                \n            \n\n\n            \n                \n                    Get topic message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Subscription Message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:278\n                \n            \n\n\n            \n                \n                    Submit Message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:252\n                \n            \n\n\n            \n                \n                    Get topic info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:125\n                \n            \n\n\n            \n                \n                    Update topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  /**\n   * HCS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {\n  }\n\n\n  /**\n   * Create topic\n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {TopicId}\n   */\n  createTopic(\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n\n        /**\n         * setting the admin key, if any...\n         */\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n\n        /**\n         * setting the submit key, if any...\n         */\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n\n        /**\n         * setting the topic memo, if any...\n         */\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n\n        /**\n         * if there is an admin key, transaction must be signed...\n         */\n        if (adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise, we can just execute it...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * finally, fetching the topicId from the response...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n\n  /**\n   * Update topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} currentAdminKey \n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {Status}\n   */\n  updateTopic(\n    topicId: TopicId,\n    currentAdminKey?: PrivateKey,\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n\n        /**\n         * setting the new admin key, if any...\n         */\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n\n        /**\n         * setting the new submit key, if any...\n         */\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n\n        /**\n         * setting the new topic memo, if any...\n         */\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * if the transaction has got an admin key, we must use it to sign...\n         */\n        if (currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n\n          /**\n           * if there is a new admin key, we must use it to double sign it...\n           */\n          if (adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n\n          /**\n           * executing the transaction, after signatures...\n           */\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise we can just sign the transaction...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * fetching the status of the executed transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Delete topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} adminKey \n   * @returns {Status}\n   */\n  deleteTopic(\n    topicId: TopicId,\n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction, and freezing it...\n         */\n        const transaction = new TopicDeleteTransaction()\n          .setTopicId(topicId)\n          .freezeWith(this.clientService.getClient());\n\n        /**\n         * signing the transaction with admin key...\n         */\n        const signTx = await transaction.sign(adminKey);\n\n        /**\n         * fetching response...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic info\n   * @param {TopicId} topicId \n   * @returns {TopicInfo}\n   */\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n        * creating the transaction for the query...\n        */\n        const transaction = new TopicInfoQuery().setTopicId(topicId);\n        const info = await transaction.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Submit Message\n   * @param {TopicId} topicId \n   * @param {string} message \n   * @param {PrivateKey} submitKey \n   * @returns {string} \n   */\n  submitMessage(\n    topicId: TopicId,\n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let txResponse = null;\n\n        /**\n         * creating the transaction, setting topic and message...\n         */\n        const transaction = new TopicMessageSubmitTransaction()\n          .setTopicId(topicId)\n          .setMessage(message);\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * if there is an submit key, transaction must be signed...\n         */\n        if (submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise, we can just execute it...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * finally, fetching the status...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic message\n   * @param {TopicId} topicId \n   * @param {any} callback \n   * @param {number} start \n   * @param {number} end \n   * @param {number} limit \n   * @returns {any} Subscription Message\n   */\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicMessageQuery()\n          .setTopicId(topicId);\n\n        if (start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if (end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if (limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(),\n          null,\n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { HederaOptions } from '../types/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HederaOptions.html":{"url":"interfaces/HederaOptions.html","title":"interface - HederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/hedera_options.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         MirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mirror Node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Network choice\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of operators\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MirrorNode } from \"./mirror.types\";\nimport { Operator } from \"./operator.types\";\n\n/**\n * Interface\n */\nexport interface HederaOptions {\n\n  /**\n   * Array of operators\n   */\n  operators: Array\n\n  /**\n   * Mirror Node\n   */\n  mirrorNode: MirrorNode\n\n  /**\n   * Network choice\n   */\n  network: 'mainnet' | 'testnet'\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:12\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HederaService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:26\n                            \n                        \n\n                \n                    \n                            HFS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:106\n                \n            \n\n\n            \n                \n                    Append File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:45\n                \n            \n\n\n            \n                \n                    Create File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:231\n                \n            \n\n\n            \n                \n                    Delete File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:281\n                \n            \n\n\n            \n                \n                    Get contents\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:309\n                \n            \n\n\n            \n                \n                    Get Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:163\n                \n            \n\n\n            \n                \n                    Update File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:26\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  FileAppendTransaction,\n  FileContentsQuery,\n  FileCreateTransaction,\n  FileDeleteTransaction,\n  FileId,\n  FileInfo,\n  FileInfoQuery,\n  FileUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HfsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n\n  /**\n   * HFS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Create File\n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {FileId} \n   */\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if (memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // \n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the file ID...\n         */\n        resolve(receipt.fileId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Append File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {number} maxTransactionFee \n   * @returns {Status}\n   */\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update File\n   * @param {FileId} fileId \n   * @param {string} content \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if (memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        if (newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get contents\n   * @param {FileId} fileId \n   * @returns {string}\n   */\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new FileContentsQuery()\n          .setFileId(fileId);\n\n        /**\n         * Signing the transaction...\n         */\n        const contents = await transaction.execute(this.clientService.getClient());\n        resolve(contents.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get Info\n   * @param {FileId} fileId \n   * @returns {FileInfo}\n   */\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new FileInfoQuery()\n          .setFileId(fileId);\n\n        /**\n         * Signing the transaction...\n         */\n        const infos = await transaction.execute(this.clientService.getClient());\n        resolve(infos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            HTS REST Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Get array of holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:74\n                \n            \n\n\n            \n                \n                    Get array of holders from walletId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Get Token Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsRestService {\n\n  /**\n   * HTS REST Service\n   * @param restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Get Token Info\n   * @param {string} tokenId \n   * @returns {any} response\n   */\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders by tokenId\n   * @param {string} tokenId \n   * @returns {Array}\n   */\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n\n        while (response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders from walletId\n   * @param {string} tokenId \n   * @param {string} walletId \n   * @returns {Array}\n   */\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while (response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:32\n                            \n                        \n\n                \n                    \n                            HTS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:49\n                \n            \n\n\n            \n                \n                    Associate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:78\n                \n            \n\n\n            \n                \n                    Disassociate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:181\n                \n            \n\n\n            \n                \n                    Get NFT Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, supplyKey: PrivateKey, CID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:153\n                \n            \n\n\n            \n                \n                    Mint NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:106\n                \n            \n\n\n            \n                \n                    Pause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:208\n                \n            \n\n\n            \n                \n                    Transfer HBAR\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:342\n                \n            \n\n\n            \n                \n                    Transfer NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId, from: AccountId, to: AccountId, amount: number, tokenDecimals: number, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:275\n                \n            \n\n\n            \n                \n                    Transfer Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:129\n                \n            \n\n\n            \n                \n                    Unpause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:32\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountId,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenAssociateTransaction,\n  TokenId,\n  TokenMintTransaction,\n  TokenPauseTransaction,\n  TokenUnpauseTransaction,\n  TokenDissociateTransaction,\n  Transaction,\n  TransferTransaction,\n  TransactionReceipt,\n  NftId,\n  TokenNftInfoQuery,\n  TokenNftInfo\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { TransactionDetails } from '../../types/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  /**\n   * HTS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Associate Token\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenAssociateTransaction()\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    })\n  }\n\n  /**\n   * Disassociate Token\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {PrivateKey} key \n   * @returns {Status} \n   */\n  async dissociateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenDissociateTransaction()\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    })\n  }\n\n  /**\n   * Pause Token\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} pauseKey \n   * @returns {Status} \n   */\n  async pauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = new TokenPauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unpause Token\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} pauseKey \n   * @returns {Status} \n   */\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = new TokenUnpauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Mint NFT\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} supplyKey \n   * @param {string} CID \n   * @returns {TransactionReceipt} \n   */\n  async mintNftToken(\n    tokenId: TokenId,\n    supplyKey: PrivateKey,\n    CID: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = new TokenMintTransaction()\n          .setTokenId(tokenId)\n          .addMetadata(Buffer.from(CID))\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get NFT Info\n   * @param {TokenId} tokenId \n   * @param {number} serialNumber \n   * @returns {TokenNftInfo[]} \n   */\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n          .setNftId(nftId)\n          .execute(this.clientService.getClient());\n\n        resolve(nftInfos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer HBAR\n   * @param {number} amount \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {TransactionDetails} \n   */\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating a transaction...\n         */\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount))\n          .addHbarTransfer(to, new Hbar(amount));\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          /**\n           * signing the transaction with the sender key...\n           */\n          let signTx = await transaction.sign(key);\n\n          /**\n           * Submitting the transaction to a Hedera network...\n           */\n          const txResponse = await signTx.execute(this.clientService.getClient());\n\n          /**\n           * Requesting the receipt of the transaction...\n           */\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n          /**\n           * Resolving the transaction consensus status...\n           */\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer Token\n   * @param {TokenId} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number} amount \n   * @param {number} tokenDecimals \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {TransactionDetails} \n   */\n  async transferToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    amount: number,\n    tokenDecimals: number,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transfer transaction...\n         */\n        const transaction = await new TransferTransaction()\n          .addTokenTransfer(tokenId, from, Number(-amount * (10 ** tokenDecimals)))\n          .addTokenTransfer(tokenId, to, Number(amount * (10 ** tokenDecimals)));\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          /**\n           * Signing the transaction with the sender key...\n           */\n          let signTx = await transaction.sign(key);\n\n          /**\n           * Submitting the transaction to a Hedera network...\n           */\n          const txResponse = await signTx.execute(this.clientService.getClient());\n\n\n          /**\n           * Requesting the receipt of the transaction...\n           */\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n          /**\n           * Resolving the transaction consensus status...\n           */\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer NFT\n   * @param {TokenId} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number} serialNumber \n   * @param {PrivateKey} key \n   * @returns {TransactionDetails} \n   */\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transfer transaction...\n         */\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if (key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          /**\n           * signing the transaction with the sender key...\n           */\n          let signTx = await transaction.sign(key);\n\n          /**\n           * Submitting the transaction to a Hedera network...\n           */\n          const txResponse = await signTx.execute(this.clientService.getClient());\n\n          /**\n           * Requesting the receipt of the transaction...\n           */\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n          /**\n           * Resolving the transaction consensus status...\n           */\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:14\n                            \n                        \n\n                \n                    \n                            KeyService class\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:26\n                \n            \n\n\n            \n                \n                    Generate Private Key\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:44\n                \n            \n\n\n            \n                \n                    Generate a list of Keys\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:14\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class KeysService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n  /**\n   * KeyService class\n   */\n  constructor() {\n  }\n\n  /**\n   * Generate Private Key\n   * @returns {PrivateKey}\n   */\n  generateKey(): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Generate a list of Keys\n   * @param {string} publicKeys \n   * @param {number} length \n   * @param {number} threshold \n   * @returns {PrivateKeyList} \n   */\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n\n        /**\n         * If an array of keys is provided, we use it...\n         */\n        if (publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [],\n            keyList: new KeyList(publicKeyList, threshold ? threshold : null)\n          });\n        }\n\n        /**\n         * Otherwise, we generate the keys we need...\n         */\n        else {\n          let privateKeys: any = [];\n\n          if (length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys,\n              keyList: new KeyList(publicKeyList, threshold ? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [],\n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    API string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n\n  /**\n   * URL string\n   */\n  url: string\n\n  /**\n   * API string\n   */\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Account id string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Private key string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Public key string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n\n  /**\n   * Account id string\n   */\n  accountId: string\n\n  /**\n   * Private key string\n   */\n  privateKey: string\n\n  /**\n   * Public key string\n   */\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of keys\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of Private keys\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\n/**\n * Interface\n */\nexport interface PrivateKeyList {\n\n  /**\n   * Array of Private keys\n   */\n  privateKeys: PrivateKey[]\n\n  /**\n   * List of keys\n   */\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:20\n                            \n                        \n\n                \n                    \n                            Rest Transaction Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:39\n                \n            \n\n\n            \n                \n                    Call Mirror Node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:20\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:15\n                        \n                    \n\n            \n                \n                    Mirror Node\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class RestService {\n\n  /**\n   * Mirror Node\n   */\n  private mirrorNode: MirrorNode;\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n  /**\n   * Rest Transaction Service\n   * @param {HederaOptions} hederaOptions \n   * @param {HttpService} httpService \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n  /**\n   * Call Mirror Node\n   * @param {string} endpoint \n   * @returns {any}\n   */\n  async call(endpoint: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let headers = {};\n\n        if (this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n          .get(\n            `${this.mirrorNode.url}/api/v1/${endpoint}`,\n            { headers: headers }).toPromise();\n\n        resolve(response?.data);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenBalance.html":{"url":"interfaces/TokenBalance.html","title":"interface - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/token_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token balance number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token decimals number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token id string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TokenBalance {\n\n  /**\n   * Token id string\n   */\n  tokenId: string\n\n  /**\n   * Token balance number\n   */\n  balance: number\n\n  /**\n   * Token decimals number\n   */\n  decimals: number\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionDetails.html":{"url":"interfaces/TransactionDetails.html","title":"interface - TransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/transaction_details.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction id\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\n/**\n * Interface\n */\nexport interface TransactionDetails {\n\n  /**\n   * Transaction status\n   */\n  status: Status\n\n  /**\n   * Transaction id\n   */\n  transaction_id: TransactionId\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetch all transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetch all transactions from timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:98\n                \n            \n\n\n            \n                \n                    Fetch latest transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:116\n                \n            \n\n\n            \n                \n                    Fetch scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Fetch all transactions from timestamp\n   * @param {string} timestamp \n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch all transactions\n   * @param {string} accountId \n   * @param {string} filters \n   * @returns {any} response\n   */\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if (filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n          .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch latest transactions\n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch scheduled transaction\n   * @param {string} transactionId \n   * @returns {any} response\n   */\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`schedules/${transactionId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                            \n                        \n\n                \n                    \n                            Transactions Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:121\n                \n            \n\n\n            \n                \n                    Create scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:157\n                \n            \n\n\n            \n                \n                    Get scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:42\n                \n            \n\n\n            \n                \n                    Fetch transaction record query\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:62\n                \n            \n\n\n            \n                \n                    Fetch transaction receipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:84\n                \n            \n\n\n            \n                \n                    Sign scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport {\n  PrivateKey,\n  ScheduleCreateTransaction,\n  ScheduleId,\n  ScheduleInfoQuery,\n  ScheduleSignTransaction,\n  Status,\n  Transaction,\n  TransactionId,\n  TransactionReceipt,\n  TransactionReceiptQuery,\n  TransactionRecordQuery,\n  TransactionResponse\n} from '@hashgraph/sdk';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  /**\n   * Transactions Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Fetch transaction record query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transaction = new TransactionRecordQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch (error: any) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction receipt\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transaction = new TransactionReceiptQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true)\n          .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Sign scheduled transaction\n   * @param {ScheduleId} scheduleId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new ScheduleSignTransaction()\n          .setScheduleId(scheduleId)\n          .freezeWith(this.clientService.getClient())\n          .sign(key);\n\n        /**\n         * Signing with the client operator key...\n         */\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * Getting the receipt of the transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Getting the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Create scheduled transaction\n   * @param {Transaction} transactionToSchedule \n   * @returns {ScheduleId}\n   */\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating a schedule transaction...\n         */\n        let scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n          .setScheduledTransaction(transactionToSchedule);\n\n        /**\n         * Signing with the client operator key and submit the transaction to a Hedera network...\n         */\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt of the transaction...\n         */\n        let receipt: TransactionReceipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Getting the schedule ID...\n         */\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get scheduled transaction\n   * @param {string} scheduleId \n   * @returns {any} info\n   */\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/types/account_balance.types.ts\n            \n            interface\n            AccountBalance\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/hedera_options.types.ts\n            \n            interface\n            HederaOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/token_balance.types.ts\n            \n            interface\n            TokenBalance\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/transaction_details.types.ts\n            \n            interface\n            TransactionDetails\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install hsuite-nestjs-hederainstead, if you use yarn:\nyarn add hsuite-nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from 'hsuite-nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from 'hsuite-nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from 'hsuite-nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from 'hsuite-nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from 'hsuite-nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from 'hsuite-nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.2\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
