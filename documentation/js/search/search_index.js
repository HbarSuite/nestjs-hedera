var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccountBalance.html",[0,0.8,1,2.059]],["body/interfaces/AccountBalance.html",[0,1.466,1,3.51,2,1.987,3,0.304,4,0.304,5,0.203,6,3.74,7,0.797,8,0.797,9,1.056,10,5.064,11,5.272,12,4.085,13,0.717,14,0.032,15,2.755,16,5.416,17,0.499,18,4.472,19,2.61,20,4.472,21,0.253,22,0.026,23,0.026]],["title/modules/AccountsModule.html",[24,0.566,25,1.855]],["body/modules/AccountsModule.html",[3,0.274,4,0.274,5,0.184,14,0.032,17,0.567,21,0.228,22,0.024,23,0.024,24,0.906,25,3.829,26,1.294,27,2.077,28,3.375,29,3.375,30,3.375,31,3.375,32,2.314,33,3.259,34,3.259,35,2.512,36,3.439,37,2.462,38,1.955,39,1.955,40,4.036,41,1.914,42,2.077,43,2.077,44,0.534,45,4.036,46,2.14,47,2.356,48,3.375,49,3.375,50,1.955,51,0.593]],["title/injectables/AccountsService.html",[36,1.685,52,0.334]],["body/injectables/AccountsService.html",[1,1.535,3,0.239,4,0.097,5,0.065,7,0.255,8,0.255,9,0.462,10,1.981,11,2.946,12,0.927,13,0.639,14,0.032,15,1.565,17,0.41,19,0.835,21,0.081,22,0.011,23,0.011,36,1.256,44,0.189,51,0.21,52,0.37,53,0.459,54,1.197,55,1.346,56,1.902,57,0.701,58,3.006,59,3.03,60,2.369,61,2.369,62,2.369,63,2.369,64,2.369,65,3.03,66,1.223,67,0.835,68,1.902,69,2.338,70,1.319,71,2.369,72,1.378,73,1.378,74,1.172,75,1.431,76,2.765,77,4.205,78,2.534,79,3.902,80,1.431,81,2.369,82,3.263,83,3.522,84,3.522,85,4.13,86,4.162,87,2.069,88,1.598,89,2.207,90,2.085,91,2.369,92,3.668,93,3.9,94,4.656,95,1.85,96,1.431,97,2.369,98,3.522,99,2.282,100,1.706,101,2.369,102,1.431,103,3.522,104,3.522,105,2.369,106,1.431,107,2.946,108,1.873,109,2.369,110,1.431,111,2.534,112,2.369,113,1.431,114,2.369,115,1.431,116,2.946,117,3.516,118,2.529,119,1.431,120,2.369,121,1.726,122,0.585,123,0.585,124,1.642,125,2.369,126,1.129,127,2.369,128,2.369,129,3.522,130,2.369,131,2.369,132,1.043,133,2.36,134,2.369,135,2.369,136,0.497,137,0.835,138,1.431,139,1.431,140,1.431,141,0.835,142,1.197,143,1.197,144,2.154,145,0.701,146,1.317,147,2.36,148,2.41,149,1.819,150,1.819,151,3.176,152,2.255,153,2.598,154,1.606,155,2.36,156,3.263,157,1.769,158,2.358,159,1.535,160,1.726,161,1.431,162,1.431,163,2.36,164,2.156,165,1.819,166,1.431,167,1.431,168,1.197,169,0.759,170,1.431,171,1.431,172,1.431,173,1.431,174,1.431,175,1.431,176,1.431,177,0.927,178,2.282,179,1.197,180,1.197,181,0.585,182,2.282,183,1.964,184,1.431,185,2.454,186,2.282,187,1.197,188,0.835,189,1.382,190,1.981,191,1.431,192,1.431,193,1.431,194,1.431,195,1.431,196,1.431,197,1.431,198,1.043,199,0.835,200,1.043,201,1.431,202,1.981,203,1.535,204,2.369,205,1.981,206,1.535,207,2.369,208,0.835,209,1.197,210,3.522,211,2.369,212,2.946,213,1.981,214,2.369,215,2.369,216,1.431,217,1.431,218,1.431]],["title/modules/ClientModule.html",[24,0.566,32,1.196]],["body/modules/ClientModule.html",[3,0.27,4,0.27,5,0.181,13,0.666,14,0.032,17,0.552,21,0.225,22,0.024,23,0.024,24,1.035,26,1.273,32,2.186,41,1.894,42,1.622,43,2.056,44,0.525,51,0.583,57,1.175,68,2.448,70,1.374,72,1.489,73,1.489,74,1.267,88,1.489,146,1.489,181,1.622,219,3.971,220,4.231,221,2.573,222,3.666,223,2.719,224,3.971,225,4.024,226,4.365,227,2.573,228,3.666,229,3.971,230,2.893,231,3.971,232,3.666,233,2.893,234,2.318,235,4.208,236,3.321,237,2.893,238,3.321,239,2.573,240,3.321]],["title/injectables/ClientService.html",[52,0.334,68,1.298]],["body/injectables/ClientService.html",[3,0.201,4,0.201,5,0.134,7,0.525,8,0.525,9,0.805,13,0.744,14,0.032,15,2.29,17,0.5,21,0.167,22,0.02,23,0.02,44,0.39,51,0.433,52,0.541,53,0.946,56,2.406,57,1.221,66,1.433,68,1.686,70,1.608,72,0.873,73,0.873,74,0.742,82,3.451,88,1.526,122,1.205,123,1.205,124,1.221,126,1.653,136,1.025,144,1.111,145,1.876,146,1.221,152,2.994,164,1.999,169,2.733,181,2.577,223,2.616,230,2.149,234,1.722,239,1.912,241,2.467,242,3.122,243,3.953,244,5.155,245,5.155,246,2.467,247,4.127,248,2.778,249,3.451,250,2.95,251,4.127,252,2.95,253,4.127,254,4.127,255,4.127,256,2.95,257,4.127,258,2.95,259,4.127,260,3.006,261,3.981,262,2.95,263,3.451,264,2.95,265,2.95,266,2.95,267,2.467,268,2.467,269,2.467,270,4.127,271,2.95,272,2.95,273,2.95,274,1.722,275,2.95,276,5.155,277,2.95,278,4.76,279,2.95,280,2.95,281,2.95,282,2.95,283,2.95,284,2.95,285,2.95]],["title/modules/HcsModule.html",[24,0.566,286,1.855]],["body/modules/HcsModule.html",[3,0.29,4,0.29,5,0.194,14,0.031,17,0.549,21,0.241,22,0.025,23,0.025,24,0.937,26,1.366,27,2.148,32,2.346,35,2.546,37,2.547,38,2.064,39,2.064,41,1.98,42,2.148,43,2.148,44,0.564,46,2.259,47,2.487,50,2.064,51,0.626,286,3.797,287,3.564,288,4.261,289,3.564,290,3.564,291,3.464,292,4.261,293,4.261]],["title/injectables/HcsService.html",[52,0.334,291,1.685]],["body/injectables/HcsService.html",[3,0.247,4,0.103,5,0.069,7,0.269,8,0.269,9,0.483,13,0.629,14,0.032,17,0.29,21,0.085,22,0.012,23,0.012,44,0.2,51,0.222,52,0.382,53,0.484,55,1.397,56,1.943,57,0.732,66,0.86,67,0.881,68,1.943,70,1.299,72,1.348,73,1.348,74,1.147,76,2.809,87,2.752,88,1.568,89,2.165,90,2.4,95,1.729,108,2.159,118,3.434,121,1.803,122,0.617,123,0.617,124,1.697,126,1.383,133,2.287,136,0.524,137,0.881,144,2.195,145,0.447,146,1.277,147,2.287,148,2.089,149,1.763,150,1.763,151,3.114,152,2.089,153,2.659,154,2.129,155,2.609,157,0.881,158,2.321,159,2.358,160,1.1,163,2.287,164,2.089,165,1.763,168,3.811,177,2.038,178,2.602,182,3.284,183,2.358,185,2.124,186,2.358,188,1.445,189,2.124,198,1.1,200,2.651,203,0.978,208,1.445,274,1.445,291,1.312,294,1.262,295,3.145,296,3.145,297,3.145,298,3.145,299,4.016,300,3.145,301,2.475,302,2.07,303,1.51,304,5.552,305,3.319,306,1.51,307,4.511,308,5.552,309,1.51,310,5.252,311,1.51,312,2.07,313,1.51,314,3.638,315,5.478,316,2.475,317,4.016,318,4.016,319,4.016,320,1.51,321,1.51,322,3.145,323,1.51,324,3.145,325,1.51,326,3.359,327,1.51,328,1.51,329,1.51,330,4.016,331,1.51,332,2.475,333,2.475,334,1.51,335,2.475,336,2.475,337,2.475,338,1.51,339,1.51,340,4.314,341,2.475,342,2.475,343,2.475,344,3.638,345,2.475,346,2.475,347,2.631,348,2.475,349,2.475,350,1.51,351,1.51,352,1.803,353,2.631,354,1.51,355,1.51,356,1.51,357,1.51,358,1.51,359,3.145,360,1.51,361,1.262,362,1.51,363,1.51,364,1.51,365,3.145,366,1.51,367,1.51,368,1.51,369,1.51,370,1.51,371,1.51]],["title/modules/HederaModule.html",[24,0.566,372,2.059]],["body/modules/HederaModule.html",[3,0.238,4,0.238,5,0.159,13,0.614,14,0.032,17,0.589,21,0.198,22,0.022,23,0.022,24,0.986,25,3.362,26,1.123,32,1.318,33,3.053,34,3.053,35,1.431,41,1.746,42,1.895,43,1.895,44,0.463,46,1.856,47,2.044,48,2.929,49,2.929,51,0.514,57,1.036,70,1.266,72,1.373,73,1.373,74,1.167,88,1.373,146,1.373,181,1.431,220,4.033,221,2.269,222,3.379,223,2.459,225,3.379,226,4.196,227,2.269,228,3.379,230,2.551,234,2.044,286,3.362,372,3.587,373,3.502,374,3.502,375,3.502,376,3.502,377,3.732,378,3.502,379,3.362,380,3.502,381,1.555,382,2.551,383,3.502,384,3.362,385,3.502,386,3.502,387,4.638,388,4.638,389,4.638,390,4.638,391,4.638,392,4.638]],["title/interfaces/HederaOptions.html",[0,0.8,223,1.411]],["body/interfaces/HederaOptions.html",[0,1.436,2,1.893,3,0.29,4,0.29,5,0.194,7,0.759,8,0.759,9,1.025,13,0.755,14,0.032,15,2.718,17,0.485,21,0.241,22,0.025,23,0.025,169,2.788,181,1.741,223,2.336,242,3.303,243,4.539,260,4.155,261,4.77,263,4.398,381,2.833,393,3.564,394,3.831,395,4.261,396,4.261]],["title/injectables/HederaService.html",[52,0.334,377,2.059]],["body/injectables/HederaService.html",[3,0.308,4,0.308,5,0.206,7,0.808,8,0.808,9,1.065,13,0.6,14,0.032,17,0.418,21,0.256,22,0.026,23,0.026,44,0.6,51,0.666,52,0.639,53,1.454,55,2.603,56,2.636,70,1.238,122,1.852,123,1.852,124,1.616,126,1.951,377,3.539,397,3.791,398,5.461,399,4.534]],["title/modules/HfsModule.html",[24,0.566,384,1.855]],["body/modules/HfsModule.html",[3,0.298,4,0.298,5,0.199,14,0.031,17,0.532,21,0.248,22,0.025,23,0.025,24,0.953,26,1.405,27,2.186,32,2.362,37,2.591,38,2.123,39,2.123,41,2.014,42,2.186,43,2.186,44,0.58,46,2.324,50,2.123,51,0.644,384,3.77,400,3.666,401,4.383,402,3.666,403,3.666,404,3.476,405,4.383,406,4.383]],["title/injectables/HfsService.html",[52,0.334,404,1.685]],["body/injectables/HfsService.html",[3,0.227,4,0.112,5,0.251,7,0.292,8,0.292,9,0.517,12,1.064,13,0.65,14,0.032,17,0.307,21,0.093,22,0.013,23,0.013,44,0.217,51,0.241,52,0.402,53,0.526,55,1.48,56,2.007,57,0.784,58,3.093,66,0.92,67,0.958,68,2.007,70,1.341,72,1.397,73,1.397,74,1.188,76,3.036,87,2.503,88,1.606,89,2.217,90,2.436,95,1.912,100,0.795,108,2.005,116,3.198,117,3.198,118,3.183,121,3.057,122,0.671,123,0.671,124,1.656,126,1.439,133,2.503,136,0.57,137,0.958,144,2.23,145,1.132,146,1.328,149,1.833,150,1.833,151,3.229,152,2.173,153,2.619,154,2.379,155,2.664,157,2.619,158,2.403,159,1.717,165,1.833,177,2.478,178,2.719,179,1.373,180,1.373,183,2.478,185,2.867,188,1.945,198,2.786,274,2.449,312,3.509,404,1.405,407,1.373,408,4.196,409,3.332,410,3.332,411,2.65,412,2.216,413,1.642,414,6.322,415,5.427,416,5.727,417,1.642,418,1.642,419,1.642,420,1.642,421,1.642,422,1.642,423,1.642,424,3.332,425,1.642,426,1.642,427,1.642,428,1.642,429,2.65,430,2.65,431,2.65,432,2.65,433,2.65,434,2.65,435,2.65,436,2.65,437,3.269,438,1.642,439,3.332,440,2.65,441,2.65,442,3.824,443,3.824,444,3.824,445,1.945,446,2.787,447,3.824,448,2.786,449,3.824,450,1.642,451,2.907,452,4.196,453,2.65,454,1.642,455,1.642,456,1.642,457,1.642]],["title/modules/HtsModule.html",[24,0.566,33,1.685]],["body/modules/HtsModule.html",[3,0.273,4,0.273,5,0.183,14,0.032,17,0.554,21,0.227,22,0.024,23,0.024,24,0.903,26,1.289,27,2.072,32,2.396,33,3.486,35,2.509,37,2.456,38,1.947,39,1.947,41,1.909,42,2.072,43,2.072,44,0.532,46,2.131,47,2.346,50,1.947,51,0.59,458,3.361,459,3.361,460,4.019,461,3.361,462,3.784,463,3.784,464,4.019,465,4.019,466,2.928,467,2.604]],["title/injectables/HtsRestService.html",[52,0.334,462,1.855]],["body/injectables/HtsRestService.html",[3,0.322,4,0.198,5,0.133,7,0.519,8,0.519,13,0.678,14,0.032,15,2.488,17,0.436,21,0.165,22,0.019,23,0.019,44,0.386,51,0.428,52,0.538,53,0.935,57,1.211,66,1.422,70,1.4,72,1.518,73,1.518,74,1.291,88,1.658,89,2.288,93,3.805,95,2.029,99,2.652,124,1.4,126,1.312,144,2.034,145,0.863,146,1.4,147,2.507,148,2.291,149,1.932,150,1.932,158,2.207,163,2.507,164,2.291,165,1.932,190,3.423,208,3.358,462,2.389,466,2.982,468,4.518,469,2.124,470,4.093,471,4.093,472,4.093,473,2.438,474,3.05,475,2.915,476,2.982,477,4.093,478,2.915,479,6.047,480,4.093,481,5.601,482,2.915,483,4.093,484,2.438,485,2.438,486,4.093,487,4.518,488,2.915,489,2.438,490,2.915,491,5.128,492,3.423,493,3.423,494,4.093,495,4.093,496,4.093,497,2.915]],["title/injectables/HtsService.html",[52,0.334,463,1.855]],["body/injectables/HtsService.html",[3,0.181,4,0.081,5,0.054,7,0.213,8,0.362,9,0.397,12,2.033,13,0.651,14,0.032,15,2.384,17,0.289,21,0.067,22,0.01,23,0.01,44,0.158,51,0.175,52,0.329,53,0.383,55,1.18,56,1.76,57,0.602,58,3.095,66,0.706,67,0.697,68,1.76,70,1.343,72,1.419,73,1.419,74,1.207,76,3.038,87,2.031,88,1.588,89,2.219,90,2.432,92,3.528,93,4.083,95,1.577,99,2.791,108,2.126,118,3.016,122,0.488,123,0.488,124,1.707,126,1.228,133,2.382,136,0.415,137,0.697,144,2.21,145,0.353,146,1.488,147,2.467,148,2.435,149,1.901,150,1.901,151,3.182,152,2.254,153,2.717,154,1.409,155,2.633,156,1.701,157,1.551,158,2.341,160,1.936,163,2.168,164,1.981,165,1.671,177,2.033,178,2.912,182,2.483,183,2.483,185,2.623,186,2.483,187,2.222,188,1.187,189,1.551,202,2.624,203,2.281,205,2.222,206,1.722,212,2.222,242,1.409,248,1.551,445,2.055,446,2.222,448,1.936,463,1.187,466,1.482,498,0.998,499,2.657,500,2.034,501,2.034,502,2.657,503,2.657,504,2.034,505,2.657,506,2.657,507,2.657,508,2.034,509,2.034,510,1.194,511,1.194,512,2.034,513,1.194,514,4.918,515,4.09,516,1.194,517,1.194,518,4.09,519,1.194,520,1.194,521,1.194,522,1.194,523,1.194,524,1.194,525,3.138,526,1.194,527,2.034,528,1.194,529,3.831,530,1.194,531,1.194,532,1.194,533,1.194,534,4.307,535,4.493,536,1.194,537,1.194,538,1.194,539,3.831,540,1.194,541,2.034,542,1.194,543,2.034,544,2.034,545,2.034,546,2.034,547,2.034,548,2.034,549,2.034,550,3.138,551,1.701,552,2.034,553,2.034,554,2.034,555,2.034,556,2.033,557,1.194,558,2.034,559,2.034,560,2.034,561,1.194,562,1.194,563,1.194,564,1.194,565,0.998,566,2.034,567,1.194,568,1.194,569,1.194,570,1.194,571,1.194,572,1.194,573,1.194,574,2.034,575,2.657,576,2.657,577,2.657,578,2.222,579,2.657,580,2.657,581,1.936,582,2.657,583,2.657,584,2.222,585,2.657,586,2.657,587,2.034,588,2.034,589,2.034,590,2.034,591,3.138,592,1.194,593,1.194,594,2.034,595,1.194,596,2.034,597,1.194,598,1.194]],["title/modules/KeysModule.html",[24,0.566,34,1.685]],["body/modules/KeysModule.html",[3,0.309,4,0.309,5,0.207,14,0.031,17,0.504,21,0.257,22,0.026,23,0.026,24,0.974,26,1.457,27,2.234,34,3.392,37,2.648,38,2.201,39,2.201,41,2.059,43,2.234,44,0.601,50,2.201,51,0.667,69,3.189,599,3.8,600,3.8,601,3.8,602,4.544,603,4.544]],["title/injectables/KeysService.html",[52,0.334,69,1.539]],["body/injectables/KeysService.html",[3,0.205,4,0.205,5,0.137,7,0.538,8,0.538,9,0.818,13,0.555,14,0.032,15,1.342,17,0.444,21,0.171,22,0.02,23,0.02,44,0.4,51,0.708,52,0.547,53,0.969,55,2.142,56,2.42,57,1.242,66,1.675,69,2.032,70,1.422,72,0.894,73,0.894,74,0.761,76,3.141,78,4.032,87,2.556,88,1.542,89,2.128,90,1.715,95,1.67,108,2.061,122,1.235,123,1.235,124,1.72,126,1.67,132,2.201,136,1.05,141,2.45,142,2.527,143,2.527,144,1.815,145,1.242,146,1.242,148,2.335,149,1.715,150,1.715,151,1.602,158,1.235,165,1.715,189,2.45,305,3.987,347,2.527,352,2.201,437,3.057,445,3.041,451,2.719,578,2.527,584,4.954,604,2.527,605,5.209,606,4.821,607,4.197,608,4.197,609,3.022,610,5.473,611,3.022,612,5.209,613,3.022,614,3.51,615,4.197,616,4.197,617,3.022,618,3.022,619,3.022,620,3.022,621,3.022,622,4.578,623,4.197,624,2.527,625,3.022,626,3.022,627,3.022,628,3.022]],["title/interfaces/MirrorNode.html",[0,0.8,381,1.411]],["body/interfaces/MirrorNode.html",[0,1.386,2,2.042,3,0.312,4,0.312,5,0.209,7,0.819,8,0.819,9,1.074,13,0.728,14,0.031,21,0.26,22,0.026,23,0.026,74,1.386,95,2.098,381,2.446,629,3.844,630,6.112,631,4.622,632,5.507]],["title/interfaces/Operator.html",[0,0.8,181,1.298]],["body/interfaces/Operator.html",[0,1.345,2,1.943,3,0.297,4,0.297,5,0.199,7,0.779,8,0.779,9,1.042,13,0.763,14,0.031,21,0.247,22,0.025,23,0.025,74,1.345,85,3.893,90,2.455,92,3.508,95,2.121,100,2.588,107,4.469,108,2.263,132,4.378,145,1.581,181,2.183,633,3.658]],["title/interfaces/PrivateKeyList.html",[0,0.8,141,1.855]],["body/interfaces/PrivateKeyList.html",[0,1.466,2,1.987,3,0.304,4,0.304,5,0.203,7,0.797,8,0.797,9,1.056,13,0.717,14,0.032,15,2.406,17,0.412,21,0.253,22,0.026,23,0.026,90,2.474,108,1.684,136,1.553,141,3.161,145,1.603,305,4.688,445,3.535,614,4.53,622,5.064,634,3.74,635,3.74]],["title/modules/RestModule.html",[24,0.566,35,1.298]],["body/modules/RestModule.html",[3,0.266,4,0.266,5,0.178,13,0.659,14,0.032,17,0.562,21,0.221,22,0.024,23,0.024,24,1.029,26,1.253,35,2.359,41,1.875,42,2.035,43,2.035,44,0.517,51,0.574,57,1.157,70,1.36,72,1.474,73,1.474,74,1.254,88,1.474,146,1.474,220,4.206,221,2.533,222,3.629,223,2.708,225,3.994,226,4.344,227,2.533,228,3.629,232,3.629,233,2.847,234,2.281,235,4.166,236,3.269,237,2.847,238,3.269,239,2.533,240,3.269,381,1.736,382,2.847,467,2.533,474,3.162,636,3.909,637,3.909,638,3.909,639,5.483,640,2.847]],["title/injectables/RestService.html",[52,0.334,474,1.685]],["body/injectables/RestService.html",[3,0.225,4,0.225,5,0.151,7,0.59,8,0.59,9,0.872,13,0.716,14,0.032,17,0.499,21,0.187,22,0.021,23,0.021,44,0.438,51,0.487,52,0.569,53,1.063,55,2.247,56,2.474,57,1.323,58,2.682,66,1.553,70,1.479,72,1.323,73,1.323,74,1.125,88,1.323,89,1.827,95,1.736,122,1.354,123,1.354,124,1.497,126,1.868,144,1.905,145,1.673,146,0.981,149,1.354,150,1.354,155,1.986,158,1.354,165,1.354,169,2.871,199,2.61,208,1.935,223,2.69,234,1.935,239,2.148,246,2.772,269,2.772,381,2.588,382,2.415,394,3.945,437,2.415,451,2.148,474,2.37,476,3.257,640,2.415,641,2.772,642,5.415,643,6.136,644,4.471,645,4.471,646,3.315,647,4.471,648,4.471,649,3.315,650,3.315,651,3.315,652,5.415,653,3.315,654,3.315,655,3.315,656,3.315,657,3.315,658,3.315,659,3.315]],["title/interfaces/TokenBalance.html",[0,0.8,19,1.855]],["body/interfaces/TokenBalance.html",[0,1.352,2,1.96,3,0.3,4,0.3,5,0.201,7,0.786,8,0.786,9,1.048,13,0.766,14,0.031,19,3.136,21,0.249,22,0.026,23,0.026,76,3.403,86,5.255,93,3.906,95,1.981,99,4.072,100,2.602,213,5.255,660,3.69]],["title/interfaces/TransactionDetails.html",[0,0.8,556,2.059]],["body/interfaces/TransactionDetails.html",[0,1.472,2,2.005,3,0.307,4,0.307,5,0.205,7,0.804,8,0.804,9,1.062,13,0.72,14,0.032,17,0.416,21,0.255,22,0.026,23,0.026,100,2.638,133,3.46,136,1.568,155,2.698,206,3.936,556,3.529,661,3.774,662,4.425]],["title/modules/TransactionsModule.html",[24,0.566,379,1.855]],["body/modules/TransactionsModule.html",[3,0.277,4,0.277,5,0.185,14,0.032,17,0.556,21,0.23,22,0.024,23,0.024,24,0.91,26,1.305,27,2.088,32,2.319,35,2.517,37,2.475,38,1.971,39,1.971,41,1.924,42,2.088,43,2.088,44,0.538,46,2.157,47,2.375,50,1.971,51,0.598,199,2.375,379,3.82,467,2.637,663,3.403,664,3.403,665,4.069,666,3.403,667,3.443,668,3.443,669,4.069,670,4.069]],["title/injectables/TransactionsRestService.html",[52,0.334,667,1.685]],["body/injectables/TransactionsRestService.html",[3,0.15,4,0.15,5,0.1,7,0.392,8,0.392,13,0.697,14,0.032,17,0.308,21,0.125,22,0.016,23,0.016,44,0.291,51,0.324,52,0.471,53,0.706,57,0.987,66,1.159,70,1.44,72,1.56,73,1.56,74,1.327,87,1.168,88,1.727,89,2.385,92,3.169,95,2.065,100,1.616,124,1.607,126,1.07,144,2.093,145,0.652,146,1.502,147,2.691,148,2.458,149,2.074,150,2.074,155,2.412,158,2.315,163,2.691,164,2.458,165,2.074,199,3.407,206,2.162,208,3.624,469,1.605,473,1.843,474,2.879,476,2.43,484,1.843,485,1.843,487,4.541,489,2.79,492,2.79,493,2.79,581,2.43,631,2.43,662,2.43,667,1.769,671,4.541,672,3.336,673,3.336,674,3.336,675,3.336,676,3.336,677,3.336,678,2.203,679,3.336,680,5.076,681,2.203,682,4.881,683,3.336,684,5.43,685,3.336,686,2.203,687,2.79,688,3.336,689,2.203,690,3.336,691,2.203,692,3.336,693,2.203,694,2.203,695,4.49,696,3.336,697,3.336,698,3.336,699,3.336,700,3.336,701,3.336,702,3.336,703,3.336,704,3.336,705,2.203,706,2.203,707,2.203,708,3.336,709,2.203,710,2.203,711,2.203]],["title/injectables/TransactionsService.html",[52,0.334,668,1.685]],["body/injectables/TransactionsService.html",[3,0.301,4,0.146,5,0.098,7,0.383,8,0.383,9,0.638,13,0.691,14,0.032,17,0.365,21,0.121,22,0.016,23,0.016,44,0.284,51,0.315,52,0.465,53,0.689,55,1.761,56,2.201,57,0.969,58,3.175,66,1.137,67,1.254,68,2.054,70,1.427,72,1.488,73,1.488,74,1.265,88,1.694,89,2.3,90,1.949,95,1.421,100,1.04,108,1.892,111,3.99,122,0.878,123,0.878,124,1.718,126,1.421,133,2.102,136,0.746,137,1.254,144,1.968,145,0.636,146,1.412,147,2.529,148,2.311,149,1.949,150,1.949,151,2.985,152,2.531,153,2.785,154,1.735,155,2.812,157,1.91,158,2.201,159,2.569,163,2.529,164,2.311,165,1.949,181,1.337,182,2.121,185,3.428,186,2.121,188,1.254,189,1.254,203,1.392,209,1.797,242,1.139,248,1.254,274,1.91,326,1.797,353,2.737,361,1.797,448,1.565,551,2.737,565,2.737,581,3.662,662,4.363,668,1.735,682,4.204,712,1.797,713,3.273,714,3.273,715,3.273,716,3.273,717,3.273,718,3.273,719,3.273,720,3.273,721,2.148,722,3.273,723,3.273,724,2.148,725,5.804,726,3.273,727,2.148,728,3.273,729,2.148,730,3.273,731,2.148,732,3.273,733,3.964,734,3.273,735,3.273,736,3.273,737,3.273,738,3.273,739,3.273,740,3.273,741,2.148,742,3.273,743,2.148,744,2.737,745,3.273,746,2.148,747,2.148,748,2.148,749,2.148,750,2.148,751,2.148]],["title/coverage.html",[752,3.633]],["body/coverage.html",[0,1.563,1,2.558,5,0.18,6,3.301,13,0.522,14,0.031,19,2.304,22,0.024,23,0.024,36,2.093,52,0.676,54,3.301,68,1.613,69,1.912,108,1.486,124,1.168,141,2.304,181,1.613,223,1.753,241,3.301,291,2.093,294,3.301,377,2.558,381,1.753,393,3.301,397,3.301,404,2.093,407,3.301,462,2.304,463,2.304,468,3.301,469,3.652,474,2.093,498,3.301,556,2.558,604,3.301,629,3.301,633,3.301,634,3.301,635,3.301,641,3.301,660,3.301,661,3.301,667,2.093,668,2.093,671,3.301,712,3.301,752,3.301,753,3.947,754,3.947,755,3.947,756,6.595,757,3.947,758,5.508,759,3.947,760,5.508,761,3.947,762,5.013,763,5.795,764,5.508,765,3.947,766,3.947]],["title/dependencies.html",[27,1.562,767,2.216]],["body/dependencies.html",[14,0.031,22,0.027,23,0.027,27,2.003,44,0.649,136,1.703,233,3.572,267,4.101,268,4.101,640,3.572,768,4.903,769,4.903,770,4.903,771,4.903,772,4.903,773,4.903,774,4.903,775,4.903,776,4.903]],["title/index.html",[8,0.472,744,2.216,777,2.65]],["body/index.html",[5,0.131,14,0.032,17,0.572,21,0.23,22,0.019,23,0.019,24,0.724,36,2.494,41,1.086,42,1.66,44,0.538,50,1.398,51,0.597,52,0.427,58,1.53,66,1.002,69,2.278,85,2.96,90,1.66,92,2.372,108,1.53,124,1.203,126,0.925,136,1.002,145,1.698,152,1.398,154,2.154,169,2.154,199,1.684,200,2.102,221,1.87,227,1.87,232,2.102,237,2.102,242,2.154,243,2.96,248,2.98,249,2.413,260,2.102,274,1.684,291,2.494,302,2.413,307,2.413,310,2.413,352,3.92,372,2.633,381,1.805,394,2.96,404,2.494,412,2.413,445,1.684,451,3.617,467,1.87,624,3.398,631,2.102,667,2.154,668,1.53,687,2.413,778,4.979,779,5.102,780,2.886,781,2.886,782,2.886,783,2.886,784,4.063,785,2.886,786,2.886,787,2.886,788,2.886,789,4.063,790,2.886,791,2.886,792,4.063,793,2.886,794,2.886,795,4.063,796,2.886,797,2.886,798,2.886,799,2.886,800,4.063,801,2.886,802,4.703,803,2.886,804,2.886,805,2.886,806,2.886,807,2.886,808,2.886,809,2.886,810,5.105,811,2.886,812,2.886,813,2.886,814,2.886,815,2.886,816,2.886,817,2.886,818,2.886,819,2.886,820,2.886,821,2.886,822,2.886,823,2.886,824,2.886,825,2.886,826,2.886,827,2.886,828,2.886,829,2.886,830,4.063,831,2.886,832,2.886,833,2.886,834,2.886,835,2.886,836,2.886,837,2.886,838,2.886,839,4.703,840,5.583,841,2.886,842,2.886,843,2.886,844,2.886,845,2.886,846,2.886,847,2.886,848,2.886,849,2.886,850,2.886,851,2.886,852,2.886,853,2.886,854,2.886]],["title/modules.html",[26,1.393]],["body/modules.html",[14,0.026,22,0.026,23,0.026,25,2.727,26,1.498,32,1.759,33,2.477,34,2.477,35,1.909,286,2.727,372,3.028,379,2.727,384,2.727,855,6.368,856,6.368,857,6.368,858,6.526,859,5.937,860,5.937]],["title/overview.html",[861,3.633]],["body/overview.html",[2,1.536,14,0.032,22,0.022,23,0.022,25,3.725,26,1.109,27,1.88,28,2.893,29,2.893,30,2.893,31,2.893,32,2.302,33,3.416,34,3.127,35,2.41,36,3.191,37,2.228,38,1.675,39,1.675,53,1.109,69,2.915,286,3.612,287,2.893,289,2.893,290,2.893,291,3.191,379,3.704,384,3.513,400,2.893,402,2.893,403,2.893,404,3.191,458,2.893,459,2.893,461,2.893,462,3.513,463,3.513,599,2.893,600,2.893,601,2.893,663,2.893,664,2.893,666,2.893,667,3.191,668,3.191,861,2.893,862,3.459,863,3.459,864,3.459]],["title/properties.html",[9,0.746,767,2.216]],["body/properties.html",[7,0.85,9,0.931,14,0.031,22,0.027,23,0.027,169,2.531,242,2.531,248,3.287,778,5.01,779,3.992,865,4.773,866,4.773,867,4.773,868,4.773,869,4.773,870,4.773,871,4.773,872,4.773,873,4.773,874,4.773,875,4.773,876,4.773,877,4.773,878,4.773,879,4.773,880,4.773]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["0.0.7",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":828,"title":{},"body":{"index.html":{}}}],["1.0.11",{"_index":866,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":591,"title":{},"body":{"injectables/HtsService.html":{}}}],["10/10",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":702,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["11",{"_index":863,"title":{},"body":{"overview.html":{}}}],["13/13",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["2.0.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":864,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":862,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["account",{"_index":85,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/Operator.html":{},"index.html":{}}}],["account's",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":836,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":831,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"interfaces/AccountBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":92,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(6",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfo",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":45,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":386,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":25,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":36,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":790,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":571,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":572,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":561,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":598,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(token_id",{"_index":594,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":590,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":340,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":308,"title":{},"body":{"injectables/HcsService.html":{}}}],["allow",{"_index":582,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount",{"_index":535,"title":{},"body":{"injectables/HtsService.html":{}}}],["amount[index",{"_index":595,"title":{},"body":{"injectables/HtsService.html":{}}}],["api",{"_index":632,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["apikey",{"_index":630,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["app.controller",{"_index":801,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":794,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":803,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":800,"title":{},"body":{"index.html":{}}}],["append",{"_index":408,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":413,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":792,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":802,"title":{},"body":{"index.html":{}}}],["array",{"_index":15,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["array(length).keys()].foreach",{"_index":626,"title":{},"body":{"injectables/KeysService.html":{}}}],["array.isarray(amount",{"_index":588,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(keys",{"_index":559,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(supplykey",{"_index":562,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(tokendecimals",{"_index":589,"title":{},"body":{"injectables/HtsService.html":{}}}],["array.isarray(tokenid",{"_index":587,"title":{},"body":{"injectables/HtsService.html":{}}}],["associate",{"_index":512,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken",{"_index":499,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":510,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":58,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":846,"title":{},"body":{"index.html":{}}}],["author",{"_index":880,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":654,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":860,"title":{},"body":{"modules.html":{}}}],["await",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":86,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["browse",{"_index":858,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":855,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":872,"title":{},"body":{"properties.html":{}}}],["burn",{"_index":517,"title":{},"body":{"injectables/HtsService.html":{}}}],["burnnfttoken",{"_index":500,"title":{},"body":{"injectables/HtsService.html":{}}}],["burnnfttoken(tokenid",{"_index":513,"title":{},"body":{"injectables/HtsService.html":{}}}],["call",{"_index":642,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":711,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":488,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":490,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":495,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":497,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`transactions/${transaction_id",{"_index":709,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":710,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":703,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":694,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?timestamp=${timestamp",{"_index":707,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":645,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":706,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":314,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":370,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":812,"title":{},"body":{"index.html":{}}}],["catch",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":451,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"index.html":{}}}],["choice",{"_index":263,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["cid",{"_index":525,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":51,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":281,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":280,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":231,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":46,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":32,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":387,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":391,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":68,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":28,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":29,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":31,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":30,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":287,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":289,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":288,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":290,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":400,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":402,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":401,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":403,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":458,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":459,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":460,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":461,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":599,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":601,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":600,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":663,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":664,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":665,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":666,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":232,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":810,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":817,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":816,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":815,"title":{},"body":{"index.html":{}}}],["connect",{"_index":799,"title":{},"body":{"index.html":{}}}],["connection",{"_index":275,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(error",{"_index":840,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":829,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":850,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":849,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":839,"title":{},"body":{"index.html":{}}}],["const",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":66,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":67,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":246,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":473,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":415,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":424,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":50,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":752,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":274,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["create(key",{"_index":418,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":59,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":75,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":81,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":713,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":720,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":295,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":303,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":330,"title":{},"body":{"injectables/HcsService.html":{}}}],["custom",{"_index":16,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["decimals",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["decorators",{"_index":250,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":70,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":312,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":420,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":296,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":309,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":27,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["dex",{"_index":869,"title":{},"body":{"properties.html":{}}}],["disassociate",{"_index":521,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken",{"_index":501,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":519,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":355,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":226,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":268,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":318,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":647,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":821,"title":{},"body":{"index.html":{}}}],["execute",{"_index":348,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(client",{"_index":569,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":358,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":21,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":43,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetch",{"_index":682,"title":{},"body":{"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["fetches",{"_index":103,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":430,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":431,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":432,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":433,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":414,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":434,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":435,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":436,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":680,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":349,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":793,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":221,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":222,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":227,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":228,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":60,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":91,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":94,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":97,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(client",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":344,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":321,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":610,"title":{},"body":{"injectables/KeysService.html":{}}}],["generated",{"_index":830,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":605,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":606,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":611,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":832,"title":{},"body":{"index.html":{}}}],["getallholders",{"_index":470,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":477,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":471,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":480,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":672,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":679,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":673,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":683,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":244,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":409,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":422,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":61,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":101,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":410,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfos(fileid",{"_index":425,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":749,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":62,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":105,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatesttransactions",{"_index":674,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":685,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":297,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":313,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":502,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":522,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":245,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":63,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{}}}],["gets",{"_index":257,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":675,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":688,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":714,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":723,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":744,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":472,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":483,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionbyid",{"_index":676,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbyid(transaction_id",{"_index":690,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbytimestamp",{"_index":677,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionbytimestamp(timestamp",{"_index":692,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["gettransactionquery",{"_index":715,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":726,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":716,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":728,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":878,"title":{},"body":{"properties.html":{}}}],["given",{"_index":841,"title":{},"body":{"index.html":{}}}],["gives",{"_index":253,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":389,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":859,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":18,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["hbar",{"_index":12,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["hbar(amount",{"_index":573,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(maxtransactionfee",{"_index":444,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbars",{"_index":10,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["hcs",{"_index":302,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":293,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":383,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":847,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":286,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":291,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":652,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":248,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":879,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":378,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":874,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":804,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":825,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":823,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":824,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":822,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":826,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":791,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":788,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":372,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":805,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":813,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":223,"title":{"interfaces/HederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["hederaservice",{"_index":377,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":412,"title":{},"body":{"injectables/HfsService.html":{},"index.html":{}}}],["hfs.service",{"_index":406,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":385,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":384,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":404,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":479,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":491,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":870,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":778,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts",{"_index":466,"title":{},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{}}}],["hts.service",{"_index":465,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":33,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":462,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":463,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":639,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":873,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":871,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":808,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":643,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":100,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"interfaces/Operator.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["if(length",{"_index":625,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(maxtransactionfee",{"_index":442,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(memo",{"_index":440,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(newkey",{"_index":453,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(publickeys",{"_index":619,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(this.mirrornode.apikey",{"_index":653,"title":{},"body":{"injectables/RestService.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":820,"title":{},"body":{"index.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":456,"title":{},"body":{"injectables/HfsService.html":{}}}],["inject",{"_index":239,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":269,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":52,"title":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":53,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":787,"title":{},"body":{"index.html":{}}}],["installation",{"_index":783,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{}},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"overview.html":{}}}],["invalid",{"_index":254,"title":{},"body":{"injectables/ClientService.html":{}}}],["isc",{"_index":876,"title":{},"body":{"properties.html":{}}}],["js",{"_index":780,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":848,"title":{},"body":{"index.html":{}}}],["key",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":838,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":305,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":623,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":445,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"index.html":{}}}],["keys.service",{"_index":603,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":608,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":77,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":34,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":69,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":79,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":867,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":687,"title":{},"body":{"injectables/TransactionsRestService.html":{},"index.html":{}}}],["length",{"_index":612,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":875,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":319,"title":{},"body":{"injectables/HcsService.html":{}}}],["list",{"_index":614,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["list.types",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":635,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["lodash",{"_index":486,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":494,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":56,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":259,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":332,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":398,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":429,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":544,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":615,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":648,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":732,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":260,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["matching",{"_index":23,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxtransactionfee",{"_index":416,"title":{},"body":{"injectables/HfsService.html":{}}}],["mechanism",{"_index":585,"title":{},"body":{"injectables/HtsService.html":{}}}],["memo",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":315,"title":{},"body":{"injectables/HcsService.html":{}}}],["method",{"_index":795,"title":{},"body":{"index.html":{}}}],["methods",{"_index":57,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mint",{"_index":527,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken",{"_index":503,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":524,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":394,"title":{},"body":{"interfaces/HederaOptions.html":{},"injectables/RestService.html":{},"index.html":{}}}],["mirror.types",{"_index":395,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["mirrornode",{"_index":381,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{},"index.html":{}}}],["module",{"_index":24,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":26,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":83,"title":{},"body":{"injectables/AccountsService.html":{}}}],["multisig",{"_index":583,"title":{},"body":{"injectables/HtsService.html":{}}}],["name",{"_index":73,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":624,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":798,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":779,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":640,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":44,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":233,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":267,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":242,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":493,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":696,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":699,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":698,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nft",{"_index":518,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid",{"_index":552,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":566,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":567,"title":{},"body":{"injectables/HtsService.html":{}}}],["node",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/RestService.html":{},"index.html":{},"properties.html":{}}}],["npm",{"_index":784,"title":{},"body":{"index.html":{}}}],["null",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":76,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/TokenBalance.html":{}}}],["number(+amount[index",{"_index":597,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(amount",{"_index":592,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(response.tokendecimals?._map.get(tokenid",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(response.tokens._map.get(tokenid)?.tostring",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(tokendecimals[index",{"_index":596,"title":{},"body":{"injectables/HtsService.html":{}}}],["offline",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{}}}],["once",{"_index":819,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":266,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":251,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":181,"title":{"interfaces/Operator.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/Operator.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["operator.types",{"_index":396,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["operators",{"_index":243,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["optional",{"_index":74,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":225,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":240,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":238,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":796,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":347,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":861,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":767,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["parameters",{"_index":72,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":797,"title":{},"body":{"index.html":{}}}],["pause",{"_index":531,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausekey",{"_index":529,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":504,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":528,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":90,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":852,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":837,"title":{},"body":{"index.html":{}}}],["privatekey.generate",{"_index":616,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":141,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":622,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":627,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":89,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":437,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{}}}],["promise(resolve",{"_index":700,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":811,"title":{},"body":{"index.html":{}}}],["protected",{"_index":55,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":235,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":578,"title":{},"body":{"injectables/HtsService.html":{},"injectables/KeysService.html":{}}}],["provider",{"_index":376,"title":{},"body":{"modules/HederaModule.html":{}}}],["providers",{"_index":41,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":107,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/Operator.html":{}}}],["public.mirrornode.hedera.com",{"_index":809,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":618,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":628,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":621,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":78,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":620,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(client",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":255,"title":{},"body":{"injectables/ClientService.html":{}}}],["receipt",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":750,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["record",{"_index":719,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reject",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":98,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":877,"title":{},"body":{"properties.html":{}}}],["request",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":448,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(balance",{"_index":218,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":455,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":496,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":361,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":457,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":617,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":570,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(receipt",{"_index":565,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":450,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":350,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":364,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":489,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response.transactions",{"_index":708,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":659,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":751,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":371,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":586,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":704,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next",{"_index":492,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.links.next.split",{"_index":697,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":216,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest",{"_index":476,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service",{"_index":467,"title":{},"body":{"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":469,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:116",{"_index":691,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:134",{"_index":686,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:152",{"_index":689,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:24",{"_index":484,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:42",{"_index":478,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:59",{"_index":681,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:74",{"_index":482,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:8",{"_index":678,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:9",{"_index":475,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:98",{"_index":693,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":485,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":35,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":388,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":392,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":474,"title":{"injectables/RestService.html":{}},"body":{"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":22,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":88,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":786,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":745,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":733,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduled",{"_index":581,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":746,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(client",{"_index":748,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":725,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":734,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":735,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":781,"title":{},"body":{"index.html":{}}}],["sender",{"_index":575,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":514,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":439,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":452,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":741,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":740,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setinitialbalance(new",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkey(keyslength",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":438,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":362,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":568,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([new",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":747,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":742,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setserials([serialnumber",{"_index":563,"title":{},"body":{"injectables/HtsService.html":{}}}],["settimeout(resolve",{"_index":701,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":558,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":359,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":739,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":785,"title":{},"body":{"index.html":{}}}],["sig",{"_index":84,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":353,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["sign(key",{"_index":743,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{}}}],["signatures",{"_index":357,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":345,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":717,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":730,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(client",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":356,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":82,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":868,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":104,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":54,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:149",{"_index":80,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:195",{"_index":96,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:225",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:254",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:31",{"_index":71,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:48",{"_index":102,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:73",{"_index":106,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:95",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":219,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:23",{"_index":229,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:9",{"_index":224,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":241,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:16",{"_index":258,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:21",{"_index":264,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:26",{"_index":265,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:31",{"_index":262,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:36",{"_index":247,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:58",{"_index":252,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:74",{"_index":256,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":292,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":294,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:100",{"_index":331,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:157",{"_index":311,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:187",{"_index":328,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:210",{"_index":325,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:254",{"_index":320,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:28",{"_index":301,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:47",{"_index":306,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":373,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:17",{"_index":374,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:46",{"_index":375,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":397,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:12",{"_index":399,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":405,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":407,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:135",{"_index":428,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:192",{"_index":421,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:230",{"_index":423,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:25",{"_index":411,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:255",{"_index":426,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:43",{"_index":419,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:90",{"_index":417,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":468,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":464,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":498,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:129",{"_index":530,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:154",{"_index":542,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:180",{"_index":526,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:227",{"_index":516,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:258",{"_index":523,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:287",{"_index":533,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:33",{"_index":509,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:347",{"_index":540,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:418",{"_index":537,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:50",{"_index":511,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:90",{"_index":520,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":602,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":604,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:14",{"_index":607,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:27",{"_index":609,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:45",{"_index":613,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":636,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:10",{"_index":637,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:25",{"_index":638,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":641,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:16",{"_index":649,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:21",{"_index":644,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:42",{"_index":646,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":671,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":669,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":712,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:119",{"_index":721,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:148",{"_index":724,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:27",{"_index":718,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:43",{"_index":727,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:65",{"_index":729,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:89",{"_index":731,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/account_balance.types.ts",{"_index":6,"title":{},"body":{"interfaces/AccountBalance.html":{},"coverage.html":{}}}],["src/types/hedera_options.types.ts",{"_index":393,"title":{},"body":{"interfaces/HederaOptions.html":{},"coverage.html":{}}}],["src/types/mirror.types.ts",{"_index":629,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":633,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":634,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["src/types/token_balance.types.ts",{"_index":660,"title":{},"body":{"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["src/types/transaction_details.types.ts",{"_index":661,"title":{},"body":{"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["start",{"_index":317,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":777,"title":{"index.html":{}},"body":{}}],["statements",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":220,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":95,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":326,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":304,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":298,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":323,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":576,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":447,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(client",{"_index":449,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":843,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":322,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":515,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":856,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":857,"title":{},"body":{"modules.html":{}}}],["table",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":261,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["then((response",{"_index":854,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":827,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":835,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":276,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":284,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["this.getclient",{"_index":277,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":279,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":844,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.mirrornode",{"_index":651,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":271,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":273,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":851,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":656,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":833,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(publickeys",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":650,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":655,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":657,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":270,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":278,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":285,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":272,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":283,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":282,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":487,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":842,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":584,"title":{},"body":{"injectables/HtsService.html":{},"injectables/KeysService.html":{}}}],["timestamp",{"_index":684,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":99,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["token_balance.types",{"_index":20,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":545,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":19,"title":{"interfaces/TokenBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["tokenburntransaction",{"_index":555,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendecimals",{"_index":539,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":549,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":93,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["tokenid.foreach((token_id",{"_index":593,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenminttransaction",{"_index":546,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":554,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":553,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":547,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":11,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["tokens.push",{"_index":217,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":548,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":307,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":333,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":335,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":310,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":845,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":299,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":327,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":339,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":360,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":338,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":337,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":336,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":334,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":351,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":658,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(client",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(client",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":341,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":367,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":441,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setkey(newkey",{"_index":176,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":454,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":368,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":443,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setstarttime(start",{"_index":366,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":342,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":343,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":574,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":346,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":354,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":446,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":560,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":363,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":564,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":369,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{}}}],["transactiondetails",{"_index":556,"title":{"interfaces/TransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["transactionid",{"_index":662,"title":{},"body":{"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":551,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":736,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":737,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":738,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":695,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":670,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":705,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":380,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":379,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":667,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":668,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":722,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transasction",{"_index":579,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfer",{"_index":534,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":505,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":532,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":506,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":536,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":507,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":538,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":550,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":390,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(client",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":577,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/account_balance.types",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/hedera_options.types",{"_index":234,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/mirror.types",{"_index":382,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/operator.types",{"_index":230,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{}}}],["types/private",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/token_balance.types",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/transaction_details.types",{"_index":557,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":324,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":365,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":64,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpause",{"_index":543,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken",{"_index":508,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":541,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":427,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":65,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":300,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":329,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":834,"title":{},"body":{"index.html":{}}}],["url",{"_index":631,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":818,"title":{},"body":{"index.html":{}}}],["use",{"_index":352,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":814,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":237,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":236,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":249,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":865,"title":{},"body":{"properties.html":{}}}],["void",{"_index":316,"title":{},"body":{"injectables/HcsService.html":{}}}],["walletid",{"_index":481,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["workound",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{}}}],["wrapped",{"_index":580,"title":{},"body":{"injectables/HtsService.html":{}}}],["wrapper",{"_index":782,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":789,"title":{},"body":{"index.html":{}}}],["yes",{"_index":87,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":853,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":806,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":807,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccountBalance.html":{"url":"interfaces/AccountBalance.html","title":"interface - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/account_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    HBAR\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of custom tokens\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { TokenBalance } from \"./token_balance.types\";\n\n/**\n * Interface\n */\nexport interface AccountBalance {\n\n  /**\n   * HBAR\n   */\n  hbars: Hbar\n\n\n  /**\n   * Array of custom tokens\n   */\n  tokens: Array\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService],\n  exports: [AccountsService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:31\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, publicKeys?: Array, keysThreshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:149\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    publicKeys\n                                    \n                                            Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:195\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:48\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:73\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:254\n                \n            \n\n\n            \n                \n                    Get query balance\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:225\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:95\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:31\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountBalanceQuery,\n  AccountCreateTransaction,\n  AccountId,\n  AccountInfo,\n  AccountInfoQuery,\n  AccountUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  PublicKey,\n  Status,\n  TokenFreezeTransaction,\n  TokenId,\n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { TokenBalance } from '../../types/token_balance.types';\nimport { AccountBalance } from '../../types/account_balance.types';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsService {\n  /**\n  * Logger Service\n  */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) { }\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = new AccountInfoQuery()\n          .setAccountId(accountId);\n\n        // Signing the transaction...\n        const accountInfo = await transaction.execute(client);\n\n        // resolving the account's info...\n        resolve(accountInfo);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Fetches Specific account public key\n * @param {AccountId} accountId \n * @returns {any} Account Public Key\n */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new AccountUpdateTransaction()\n          // setting single node accountId, as a workound for offline signature...\n          .setNodeAccountIds([new AccountId(6)])\n          .setAccountId(accountId);\n\n        if (memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        if (newKey) {\n          transaction.setKey(newKey);\n        }\n\n        transaction.freezeWith(client);\n\n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        // Signing the transaction with the client operator...\n        const txResponse = await signTx.execute(client);\n\n        // Request the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(client);\n\n        // Get the transaction consensus status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Creates a single or multi-sig account\n * @param {number} balance \n * @param {number} keysLength \n * @param {number} keysThreshold \n * @returns {AccountId, PrivateKey} single or multi-sig account\n */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    publicKeys?: Array,\n    keysThreshold?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        let key = null;\n\n        if (keysLength > 1) {\n          key = await this.keysService.generateKeyList(publicKeys, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        //Creating the transaction...\n        const transaction = new AccountCreateTransaction()\n          .setKey(keysLength > 1 ? (key).keyList : (key).publicKey)\n          .setInitialBalance(new Hbar(balance));\n\n        // Executing the transactions...\n        const txResponse = await transaction.execute(client);\n\n        // Fetching the receipt...\n        const receipt = await txResponse.getReceipt(client);\n\n        // resolving the accountId...\n        resolve({\n          accountId: receipt.accountId,\n          key: key\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Freezes account related to token ID\n * @param {AccountId} accountId \n * @param {TokenId} tokenId \n * @param {string} freezeKey \n * @returns {Status}\n */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenFreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Unfreezes account related to token ID\n * @param {AccountId} accountId \n * @param {TokenId} tokenId \n * @param {string} freezeKey \n * @returns {Status}\n */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenUnfreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n * Get query balance\n * @param {string} accountId \n * @param {string} tokenId \n * @returns {AccountBalance}\n */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(client);\n        let balance = null;\n\n        if (tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n\n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:36\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:58\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:74\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:16\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:36\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:31\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Operator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:21\n                        \n                    \n\n            \n                \n                    Single Operator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:26\n                        \n                    \n\n            \n                \n                    Array of Operators\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n\n  /**\n   * Single Operator\n   */\n  private operator: Operator;\n\n  /**\n   * Array of Operators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet';\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {HederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n\n    // Create our connection to the Hedera network...\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {Operator}\n   */\n  getNodeOperator(): Operator {\n    return this.operator;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                            \n                        \n\n                \n                    \n                            HCS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:47\n                \n            \n\n\n            \n                \n                    Create topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:157\n                \n            \n\n\n            \n                \n                    Delete topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:254\n                \n            \n\n\n            \n                \n                    Get topic message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Subscription Message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:210\n                \n            \n\n\n            \n                \n                    Submit Message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:187\n                \n            \n\n\n            \n                \n                    Get topic info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:100\n                \n            \n\n\n            \n                \n                    Update topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  /**\n   * HCS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {\n  }\n\n\n  /**\n   * Create topic\n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {TopicId}\n   */\n  createTopic(\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n        // setting the admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if there is an admin key, transaction must be signed...\n        if (adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // finally, fetching the topicId from the response...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} currentAdminKey \n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {Status}\n   */\n  updateTopic(\n    topicId: TopicId,\n    currentAdminKey?: PrivateKey,\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n        // setting the new admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the new submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the new topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if the transaction has got an admin key, we must use it to sign...\n        if (currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n          // if there is a new admin key, we must use it to double sign it...\n          if (adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n          // executing the transaction, after signatures...\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise we can just sign the transaction...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // fetching the status of the executed transaction...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} adminKey \n   * @returns {Status}\n   */\n  deleteTopic(\n    topicId: TopicId,\n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction, and freezing it...\n        const transaction = new TopicDeleteTransaction()\n          .setTopicId(topicId)\n          .freezeWith(client);\n        // signing the transaction with admin key...\n        const signTx = await transaction.sign(adminKey);\n        // fetching response...\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        // resolving status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get topic info\n   * @param {TopicId} topicId \n   * @returns {TopicInfo}\n   */\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TopicInfoQuery().setTopicId(topicId);\n        const info = await transaction.execute(client);\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Submit Message\n   * @param {TopicId} topicId \n   * @param {string} message \n   * @param {PrivateKey} submitKey \n   * @returns {string} \n   */\n  submitMessage(\n    topicId: TopicId,\n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let txResponse = null;\n        // creating the transaction, setting topic and message...\n        const transaction = new TopicMessageSubmitTransaction()\n          .setTopicId(topicId)\n          .setMessage(message);\n        // freezing the transaction...\n        transaction.freezeWith(client);\n        // if there is an submit key, transaction must be signed...\n        if (submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(client);\n        }\n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(client);\n        }\n        // finally, fetching the status...\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic message\n   * @param {TopicId} topicId \n   * @param {any} callback \n   * @param {number} start \n   * @param {number} end \n   * @param {number} limit \n   * @returns {any} Subscription Message\n   */\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // creating the transaction...\n        const transaction = new TopicMessageQuery()\n          .setTopicId(topicId);\n\n        if (start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if (end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if (limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(),\n          null,\n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { HederaOptions } from '../types/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HederaOptions.html":{"url":"interfaces/HederaOptions.html","title":"interface - HederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/hedera_options.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         MirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Mirror Node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Network choice\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of operators\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MirrorNode } from \"./mirror.types\";\nimport { Operator } from \"./operator.types\";\n\n/**\n * Interface\n */\nexport interface HederaOptions {\n\n\n  /**\n   * Array of operators\n   */\n  operators: Array\n\n  /**\n   * Mirror Node\n   */\n  mirrorNode: MirrorNode\n\n  /**\n   * Network choice\n   */\n  network: 'mainnet' | 'testnet'\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:12\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HederaService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:25\n                            \n                        \n\n                \n                    \n                            HFS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:90\n                \n            \n\n\n            \n                \n                    Append File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:43\n                \n            \n\n\n            \n                \n                    Create File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:192\n                \n            \n\n\n            \n                \n                    Delete File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:230\n                \n            \n\n\n            \n                \n                    Get contents\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:255\n                \n            \n\n\n            \n                \n                    Get Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:135\n                \n            \n\n\n            \n                \n                    Update File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:25\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { \n  FileAppendTransaction, \n  FileContentsQuery, \n  FileCreateTransaction, \n  FileDeleteTransaction, \n  FileId, \n  FileInfo, \n  FileInfoQuery, \n  FileUpdateTransaction, \n  Hbar, \n  PrivateKey, \n  Status \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HfsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n  /**\n   * HFS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  /**\n   * Create File\n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {FileId} \n   */\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(client);\n\n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the file ID\n        resolve(receipt.fileId);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Append File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {number} maxTransactionFee \n   * @returns {Status}\n   */\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        \n        // Creating the transaction...\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update File\n   * @param {FileId} fileId \n   * @param {string} content \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,    \n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }          \n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        if(newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n        \n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(client);\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(client);\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(client);\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get contents\n   * @param {FileId} fileId \n   * @returns {string}\n   */\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = new FileContentsQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const contents = await transaction.execute(client);\n        resolve(contents.toString());\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get Info\n   * @param {FileId} fileId \n   * @returns {FileInfo}\n   */\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n        \n        // Creating the transaction...\n        const transaction = new FileInfoQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const infos = await transaction.execute(client);\n        resolve(infos);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            HTS REST Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Get array of holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:74\n                \n            \n\n\n            \n                \n                    Get array of holders from walletId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Get Token Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsRestService {\n\n  /**\n   * HTS REST Service\n   * @param restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Get Token Info\n   * @param {string} tokenId \n   * @returns {any} response\n   */\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders by tokenId\n   * @param {string} tokenId \n   * @returns {Array}\n   */\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n\n        while (response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders from walletId\n   * @param {string} tokenId \n   * @param {string} walletId \n   * @returns {Array}\n   */\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n          .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while (response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                burnNftToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:33\n                            \n                        \n\n                \n                    \n                            HTS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, keys: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:50\n                \n            \n\n\n            \n                \n                    Associate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keys\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        burnNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    burnNftToken(tokenId: TokenId, serialNumber: number, supplyKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:227\n                \n            \n\n\n            \n                \n                    Burn NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, keys: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:90\n                \n            \n\n\n            \n                \n                    Disassociate Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keys\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:258\n                \n            \n\n\n            \n                \n                    Get NFT Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, CID: string, supplyKey?: PrivateKey | Array)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:180\n                \n            \n\n\n            \n                \n                    Mint NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey | Array\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:129\n                \n            \n\n\n            \n                \n                    Pause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:287\n                \n            \n\n\n            \n                \n                    Transfer HBAR\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:418\n                \n            \n\n\n            \n                \n                    Transfer NFT\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId | Array, from: AccountId, to: AccountId, amount: number | Array, tokenDecimals: number | Array, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:347\n                \n            \n\n\n            \n                \n                    Transfer Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                            number | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                            number | Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:154\n                \n            \n\n\n            \n                \n                    Unpause Token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:33\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountId,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenAssociateTransaction,\n  TokenId,\n  TokenMintTransaction,\n  TokenPauseTransaction,\n  TokenUnpauseTransaction,\n  TokenDissociateTransaction,\n  Transaction,\n  TransferTransaction,\n  TransactionReceipt,\n  NftId,\n  TokenNftInfoQuery,\n  TokenNftInfo,\n  TokenBurnTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { TransactionDetails } from '../../types/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  /**\n   * HTS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Associate Token\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    keys: PrivateKey | Array\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenAssociateTransaction()\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(client);\n\n        let signTx = null;\n\n        if (Array.isArray(keys)) {\n          for (let i = 0; i \n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = await new TokenDissociateTransaction()\n          .setAccountId(accountId)\n          .setTokenIds([tokenId])\n          .freezeWith(client);\n\n        let signTx = null;\n\n        if (Array.isArray(keys)) {\n          for (let i = 0; i  {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenPauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unpause Token\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} pauseKey \n   * @returns {Status} \n   */\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenUnpauseTransaction()\n          .setTokenId(tokenId)\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Mint NFT\n   * @param {TokenId} tokenId \n   * @param {PrivateKey} supplyKey \n   * @param {string} CID \n   * @returns {TransactionReceipt} \n   */\n  async mintNftToken(\n    tokenId: TokenId,\n    CID: string,\n    supplyKey?: PrivateKey | Array\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const transaction = new TokenMintTransaction()\n          .setTokenId(tokenId)\n          .addMetadata(Buffer.from(CID));\n\n        if (supplyKey) {\n          transaction.freezeWith(client);\n\n          let signTx = null;\n\n          if (Array.isArray(supplyKey)) {\n            for (let i = 0; i  {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = await new TokenBurnTransaction()\n          .setTokenId(tokenId)\n          .setSerials([serialNumber])\n          .freezeWith(client);\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(client);\n        const receipt = await txResponse.getReceipt(client);\n\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get NFT Info\n   * @param {TokenId} tokenId \n   * @param {number} serialNumber \n   * @returns {TokenNftInfo[]} \n   */\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n          .setNftId(nftId)\n          .execute(client);\n\n        resolve(nftInfos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer HBAR\n   * @param {number} amount \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {TransactionDetails} \n   */\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount))\n          .addHbarTransfer(to, new Hbar(amount));\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...          \n          resolve(transaction);\n        }\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer Token\n   * @param {TokenId} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number} amount \n   * @param {number} tokenDecimals \n   * @param {string} memo \n   * @param {PrivateKey} key \n   * @returns {TransactionDetails} \n   */\n  async transferToken(\n    tokenId: TokenId | Array,\n    from: AccountId,\n    to: AccountId,\n    amount: number | Array,\n    tokenDecimals: number | Array,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction();\n\n        if (!Array.isArray(tokenId) && !Array.isArray(amount) && !Array.isArray(tokenDecimals)) {\n          transaction\n            .addTokenTransfer(tokenId, from, Number(-amount * (10 ** tokenDecimals)))\n            .addTokenTransfer(tokenId, to, Number(amount * (10 ** tokenDecimals)));\n        } else {\n          if (Array.isArray(tokenId) && Array.isArray(amount) && Array.isArray(tokenDecimals)) {\n            tokenId.forEach((token_id, index) => {\n              transaction\n                .addTokenTransfer(token_id, from, Number(-amount[index] * (10 ** Number(tokenDecimals[index]))))\n                .addTokenTransfer(token_id, to, Number(+amount[index] * (10 ** Number(tokenDecimals[index]))));\n            });\n          }\n        }\n\n        if (memo) {\n          transaction.setTransactionMemo(memo);\n        }\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Transfer NFT\n   * @param {TokenId} tokenId \n   * @param {AccountId} from \n   * @param {AccountId} to \n   * @param {number} serialNumber \n   * @param {PrivateKey} key \n   * @returns {TransactionDetails} \n   */\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if (key) {\n          transaction.freezeWith(client);\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n\n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(client);\n\n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(client);\n\n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          // if no key has been provided, we return the transasction to be wrapped\n          // into a scheduled transaction to allow multisig threshold mechanism...\n          resolve(transaction);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:14\n                            \n                        \n\n                \n                    \n                            KeyService class\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:27\n                \n            \n\n\n            \n                \n                    Generate Private Key\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:45\n                \n            \n\n\n            \n                \n                    Generate a list of Keys\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:14\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class KeysService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n\n  /**\n   * KeyService class\n   */\n  constructor() {\n  }\n\n  /**\n   * Generate Private Key\n   * @returns {PrivateKey}\n   */\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Generate a list of Keys\n   * @param {string} publicKeys \n   * @param {number} length \n   * @param {number} threshold \n   * @returns {PrivateKeyList} \n   */\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    API string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    URL string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n\n  /**\n   * URL string\n   */\n  url: string\n\n  /**\n   * API string\n   */\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Account id string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Private key string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Public key string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n\n  /**\n   * Account id string\n   */\n  accountId: string\n\n  /**\n   * Private key string\n   */\n  privateKey: string\n\n  /**\n   * Public key string\n   */\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List of keys\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of Private keys\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\n\n/**\n * Interface\n */\nexport interface PrivateKeyList {\n\n  /**\n   * Array of Private keys\n   */\n  privateKeys: PrivateKey[]\n\n  /**\n   * List of keys\n   */\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:21\n                            \n                        \n\n                \n                    \n                            Rest Transaction Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Call Mirror Node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:21\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:16\n                        \n                    \n\n            \n                \n                    Mirror Node\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n\n/**\n * Injectable\n */\n@Injectable()\nexport class RestService {\n\n  /**\n   * Mirror Node\n   */\n  private mirrorNode: MirrorNode;\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n\n  /**\n   * Rest Transaction Service\n   * @param {HederaOptions} hederaOptions \n   * @param {HttpService} httpService \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n\n  /**\n   * Call Mirror Node\n   * @param {string} endpoint \n   * @returns {any}\n   */\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenBalance.html":{"url":"interfaces/TokenBalance.html","title":"interface - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/token_balance.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token balance\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token decimals number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Token id string\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface TokenBalance {\n\n  /**\n   * Token id string\n   */\n  tokenId: string\n\n  /**\n    * Token balance\n    */\n  balance: number\n\n  /**\n    * Token decimals number\n    */\n  decimals: number\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionDetails.html":{"url":"interfaces/TransactionDetails.html","title":"interface - TransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/transaction_details.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Transaction id\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\n/**\n * Interface\n */\nexport interface TransactionDetails {\n\n  /**\n   * Transaction status\n   */\n  status: Status\n\n  /**\n   * Transaction id\n   */\n  transaction_id: TransactionId\n} \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                            \n                                getTransactionById\n                            \n                            \n                                getTransactionByTimestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:8\n                            \n                        \n\n                \n                    \n                            Transaction Rest Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:59\n                \n            \n\n\n            \n                \n                    Fetch all transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Fetch all transactions from timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:134\n                \n            \n\n\n            \n                \n                    Fetch latest transactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:152\n                \n            \n\n\n            \n                \n                    Fetch scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionById\n                        \n                    \n                \n            \n            \n                \ngetTransactionById(transaction_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:116\n                \n            \n\n\n            \n                \n                    Fetch transaction by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction_id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTransactionByTimestamp\n                        \n                    \n                \n            \n            \n                \ngetTransactionByTimestamp(timestamp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:98\n                \n            \n\n\n            \n                \n                    Fetch transaction by timestamp\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsRestService {\n\n  /**\n   * Transaction Rest Service\n   * @param {RestService} restService \n   */\n  constructor(\n    private restService: RestService\n  ) { }\n\n  /**\n   * Fetch all transactions from timestamp\n   * @param {string} timestamp \n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch all transactions\n   * @param {string} accountId \n   * @param {string} filters \n   * @returns {any} response\n   */\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if (filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n          .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while (response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction by timestamp\n   * @param {string} timestamp \n   * @returns {any} response\n   */\n  getTransactionByTimestamp(timestamp: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?timestamp=${timestamp}`);\n\n        resolve(response.transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction by id\n   * @param {string} transaction_id \n   * @returns {any} response\n   */\n  getTransactionById(transaction_id: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/${transaction_id}`);\n\n        resolve(response.transactions);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch latest transactions\n   * @param {string} accountId \n   * @returns {any} response\n   */\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch scheduled transaction\n   * @param {string} transactionId \n   * @returns {any} response\n   */\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response = await this.restService\n          .call(`schedules/${transactionId}`);\n\n        resolve(response);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                            \n                        \n\n                \n                    \n                            Fetch transaction record query\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:119\n                \n            \n\n\n            \n                \n                    Create scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:148\n                \n            \n\n\n            \n                \n                    Get scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        info\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:43\n                \n            \n\n\n            \n                \n                    Fetch transaction query\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:65\n                \n            \n\n\n            \n                \n                    Fetch transaction receipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        receipt\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:89\n                \n            \n\n\n            \n                \n                    Sign scheduled transaction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport {\n  PrivateKey,\n  ScheduleCreateTransaction,\n  ScheduleId,\n  ScheduleInfoQuery,\n  ScheduleSignTransaction,\n  Status,\n  Transaction,\n  TransactionId,\n  TransactionReceipt,\n  TransactionReceiptQuery,\n  TransactionRecordQuery,\n  TransactionResponse\n} from '@hashgraph/sdk';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class TransactionsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  /**\n   * Fetch transaction record query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Fetch transaction query\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = new TransactionRecordQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(client);\n        resolve(receipt);\n      } catch (error: any) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetch transaction receipt\n   * @param {TransactionId} transactionId \n   * @returns {any} receipt\n   */\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        let transaction = new TransactionReceiptQuery()\n          .setTransactionId(transactionId)\n          .setIncludeDuplicates(true)\n          .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(client);\n        resolve(receipt);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Sign scheduled transaction\n   * @param {ScheduleId} scheduleId \n   * @param {PrivateKey} key \n   * @returns {Status}\n   */\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n          .setScheduleId(scheduleId)\n          .freezeWith(client)\n          .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(client);\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(client);\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Create scheduled transaction\n   * @param {Transaction} transactionToSchedule \n   * @returns {ScheduleId}\n   */\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        // Creating a schedule transaction...\n        let scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n          .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(client);\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(client);\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get scheduled transaction\n   * @param {string} scheduleId \n   * @returns {any} info\n   */\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const client = this.clientService.getClient();\n\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(client);\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/types/account_balance.types.ts\n            \n            interface\n            AccountBalance\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/hedera_options.types.ts\n            \n            interface\n            HederaOptions\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/types/token_balance.types.ts\n            \n            interface\n            TokenBalance\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/types/transaction_details.types.ts\n            \n            interface\n            TransactionDetails\n            \n                100 %\n                (3/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install hsuite-nestjs-hederainstead, if you use yarn:\nyarn add hsuite-nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from 'hsuite-nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from 'hsuite-nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from 'hsuite-nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from 'hsuite-nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from 'hsuite-nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from 'hsuite-nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.11\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
