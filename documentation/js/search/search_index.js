var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ClientModule.html",[0,0.626,1,1.151]],["body/modules/ClientModule.html",[0,1.034,1,1.9,2,1.028,3,0.386,4,0.386,5,0.318,6,3.173,7,0.911,8,2.481,9,1.896,10,2.864,11,1.942,12,2.359,13,2.766,14,0.047,15,2.766,16,0.806,17,3.173,18,0.911,19,0.911,20,0.459,21,0.806,22,0.911,23,2.766,24,0.782,25,0.536,26,1.896,27,2.143,28,3.173,29,0.386,30,0.619,31,0.911,32,1.469,33,3.375,34,3.375,35,1.469,36,0.033,37,0.033]],["title/injectables/ClientService.html",[27,1.298,38,0.405]],["body/injectables/ClientService.html",[3,0.296,4,0.296,5,0.243,7,0.994,11,1.849,12,2.032,13,2.407,14,0.047,15,2.623,16,1.224,18,0.698,19,0.698,20,0.582,21,0.617,22,1.157,24,0.742,25,0.41,26,1.452,27,1.601,29,0.296,30,0.474,31,1.157,36,0.028,37,0.028,38,0.5,39,0.886,40,1.974,41,0.617,42,0.878,43,2.658,44,4.196,45,2.232,46,4.39,47,4.39,48,4.39,49,1.601,50,2.429,51,3.459,52,2.429,53,3.459,54,2.429,55,2.429,56,2.429,57,2.429,58,1.124,59,1.124,60,1.261,61,3.459,62,1.601,63,1.974,64,1.124,65,2.429,66,1.974,67,1.974,68,2.429,69,2.429,70,1.974,71,2.429,72,1.452,73,4.64,74,2.429,75,2.429,76,2.429,77,2.429,78,2.429,79,2.429,80,2.429]],["title/modules/HcsModule.html",[0,0.626,81,1.469]],["body/modules/HcsModule.html",[0,0.932,1,2.15,2,1.035,3,0.389,4,0.389,5,0.32,14,0.046,24,0.832,25,0.54,29,0.389,30,0.624,32,1.931,35,1.931,36,0.034,37,0.034,81,2.915,82,2.186,83,2.597,84,2.597,85,2.597,86,2.597,87,2.15,88,2.933,89,2.877,90,2.203,91,2.203,92,3.195,93,2.493,94,3.195,95,2.203,96,2.203,97,2.597]],["title/injectables/HcsService.html",[38,0.405,88,1.469]],["body/injectables/HcsService.html",[3,0.265,4,0.116,5,0.096,7,0.473,14,0.047,16,0.918,18,0.983,19,0.983,20,0.523,21,0.869,22,0.917,24,0.367,25,0.161,27,1.478,29,0.116,30,0.186,31,0.917,36,0.013,37,0.013,38,0.238,39,0.348,41,0.243,42,0.419,43,0.501,45,1.478,49,0.763,58,0.442,59,0.442,60,1.693,62,1.006,64,0.442,70,0.777,88,0.864,98,0.777,99,1.139,100,2.174,101,2.174,102,2.174,103,2.174,104,2.587,105,2.174,106,0.777,107,1.648,108,0.955,109,2.366,110,4.056,111,2.366,112,2.36,113,3.929,114,1.553,115,0.955,116,3.929,117,2.797,118,2.185,119,0.955,120,5.023,121,0.955,122,0.955,123,2.174,124,3.783,125,1.648,126,2.174,127,3.076,128,2.174,129,2.174,130,0.955,131,0.955,132,0.955,133,2.174,134,0.955,135,0.955,136,0.955,137,0.955,138,2.174,139,0.955,140,1.648,141,1.648,142,0.955,143,1.648,144,1.648,145,1.648,146,0.955,147,0.955,148,2.103,149,0.777,150,0.955,151,3.616,152,2.595,153,2.202,154,1.673,155,1.673,156,2.373,157,3.9,158,3.063,159,3.194,160,1.784,161,3.422,162,3.193,163,1.648,164,2.103,165,1.648,166,1.648,167,2.587,168,2.174,169,1.648,170,1.648,171,2.919,172,2.401,173,1.648,174,2.587,175,1.767,176,1.648,177,2.103,178,1.648,179,2.587,180,1.137,181,2.103,182,2.103,183,0.955,184,2.595,185,2.595,186,1.673,187,0.955,188,0.955,189,1.34,190,2.174,191,0.955,192,0.955,193,0.955,194,0.955,195,0.955,196,0.955,197,0.955,198,1.34,199,0.955,200,2.174,201,0.777,202,0.777,203,0.955,204,0.955,205,0.777,206,0.955,207,0.955,208,0.955,209,0.955,210,0.955,211,2.174,212,0.955,213,0.955,214,0.955,215,0.955,216,0.955,217,0.955,218,0.955,219,0.955,220,0.955,221,0.955]],["title/modules/HederaModule.html",[0,0.626,222,1.933]],["body/modules/HederaModule.html",[0,0.917,1,1.032,2,0.814,3,0.306,4,0.306,5,0.252,7,0.722,8,2.118,9,1.502,10,2.444,11,1.714,12,2.176,13,2.453,14,0.047,15,2.453,16,0.638,18,0.722,19,0.722,20,0.363,21,0.638,22,0.722,23,2.453,24,0.917,25,0.425,26,1.502,29,0.306,30,0.491,31,0.722,32,1.164,35,1.164,36,0.029,37,0.029,81,2.336,87,1.032,93,1.502,95,1.734,96,1.734,222,2.831,223,2.514,224,2.057,225,2.514,226,2.453,227,2.514,228,2.152,229,2.514,230,2.453,231,2.514,232,1.502,233,3.545,234,4.105,235,2.514,236,4.105,237,2.514,238,4.105,239,2.514,240,2.881,241,2.881,242,2.514,243,2.514]],["title/injectables/HederaService.html",[38,0.405,226,1.675]],["body/injectables/HederaService.html",[3,0.452,4,0.452,5,0.372,14,0.045,16,0.944,20,0.537,24,0.628,25,0.628,29,0.452,30,0.725,36,0.037,37,0.037,38,0.664,39,1.355,41,0.944,42,1.166,45,2.521,58,1.721,59,1.721,60,1.674,62,2.126,99,2.612,226,2.744,244,3.022,245,4.592,246,3.717]],["title/modules/KeysModule.html",[0,0.626,228,1.469]],["body/modules/KeysModule.html",[0,0.996,2,1.149,3,0.432,4,0.432,5,0.355,14,0.045,24,0.754,25,0.599,29,0.432,30,0.692,32,2.065,35,2.065,36,0.036,37,0.036,82,2.338,89,3.076,90,2.446,91,2.446,97,2.884,228,2.864,247,2.884,248,2.884,249,2.884,250,2.976,251,3.548,252,3.548]],["title/injectables/KeysService.html",[38,0.405,250,1.469]],["body/injectables/KeysService.html",[3,0.264,4,0.264,5,0.217,7,0.915,14,0.047,16,1.057,18,0.623,19,0.623,20,0.461,21,0.551,22,0.915,24,0.638,25,0.367,29,0.264,30,0.622,31,0.915,36,0.026,37,0.026,38,0.461,39,0.791,41,0.551,42,0.809,45,2.147,49,1.749,58,1.004,59,1.004,60,1.748,62,1.475,64,1.004,99,1.98,109,1.137,111,1.98,112,3.06,114,1.551,117,2.606,118,2.182,127,3.771,153,2.606,154,1.67,155,1.67,158,1.496,160,2.198,172,1.137,175,1.763,186,1.67,189,1.763,250,1.67,253,1.763,254,4.164,255,3.778,256,3.187,257,2.169,258,2.169,259,3.778,260,4.794,261,2.169,262,3.187,263,3.187,264,1.763,265,1.296,266,2.169,267,2.169,268,2.169,269,1.905,270,3.187,271,2.169,272,1.905,273,2.169,274,2.169,275,3.187,276,2.169,277,2.169,278,2.169,279,2.169,280,3.606,281,3.187,282,2.169,283,2.169,284,2.169,285,2.169,286,2.169,287,2.169]],["title/interfaces/MirrorNode.html",[224,1.151,288,1.151]],["body/interfaces/MirrorNode.html",[3,0.473,4,0.473,5,0.389,14,0.044,20,0.682,29,0.473,36,0.038,37,0.038,41,0.987,42,1.198,114,2.26,224,1.937,288,1.596,289,2.323,290,3.16,291,5.286,292,4.297]],["title/interfaces/Operator.html",[11,1.022,288,1.151]],["body/interfaces/Operator.html",[3,0.452,4,0.452,5,0.372,11,1.674,14,0.044,20,0.72,21,1.166,29,0.452,36,0.037,37,0.037,41,0.944,42,1.166,109,2.728,114,2.307,264,4.231,288,1.526,289,2.221,293,3.022,294,4.231]],["title/interfaces/PrivateKeyList.html",[265,1.675,288,1.151]],["body/interfaces/PrivateKeyList.html",[3,0.458,4,0.458,5,0.377,14,0.045,20,0.669,24,0.636,29,0.458,36,0.037,37,0.037,41,0.955,42,1.175,64,1.742,109,2.739,111,1.972,112,3.855,265,2.765,280,4.249,288,1.544,289,2.248,295,3.058,296,3.058]],["title/modules/RestModule.html",[0,0.626,87,1.151]],["body/modules/RestModule.html",[0,1.053,2,1.068,3,0.401,4,0.401,5,0.33,7,0.947,8,2.544,9,1.97,14,0.047,16,0.837,18,0.947,19,0.947,20,0.477,21,0.837,22,0.947,23,2.817,24,0.842,25,0.557,29,0.401,30,0.643,31,0.947,32,1.526,33,2.68,34,2.68,35,1.526,36,0.034,37,0.034,87,1.935,93,1.97,224,2.206,232,1.97,297,3.297,298,4.257,299,3.297,300,2.471,301,2.68,302,4.257,303,2.273]],["title/injectables/RestService.html",[38,0.405,300,1.469]],["body/injectables/RestService.html",[3,0.333,4,0.333,5,0.274,7,1.08,14,0.046,16,1.09,18,1.08,19,1.08,20,0.621,21,0.954,22,0.786,24,0.726,25,0.462,29,0.333,30,0.534,31,0.786,36,0.03,37,0.03,38,0.543,39,0.997,41,0.695,42,0.954,43,1.97,45,2.318,49,1.74,58,1.266,59,1.266,60,1.566,62,1.74,63,2.224,99,2.251,114,1.763,118,1.97,154,1.434,155,1.434,172,1.434,180,1.886,186,1.434,224,2.056,232,1.635,269,1.635,272,1.635,300,1.97,303,1.886,304,2.224,305,3.491,306,3.759,307,2.735,308,5.13,309,3.759,310,3.759,311,2.735,312,2.735,313,3.759,314,2.592,315,2.735,316,2.735,317,2.735,318,2.735,319,2.735,320,2.735,321,2.735,322,2.735]],["title/modules/TransactionsModule.html",[0,0.626,230,1.675]],["body/modules/TransactionsModule.html",[0,0.999,1,1.216,2,0.959,3,0.36,4,0.36,5,0.296,7,0.851,8,2.371,9,1.77,10,2.736,11,1.816,12,2.212,13,2.673,14,0.047,15,2.673,16,0.752,18,0.851,19,0.851,20,0.428,21,0.752,22,0.851,23,2.673,24,0.885,25,0.5,26,1.77,29,0.36,30,0.578,31,0.851,32,1.371,35,1.371,36,0.032,37,0.032,87,1.216,93,1.77,95,2.042,96,2.042,224,2.15,230,2.673,232,1.77,240,2.407,241,2.407,301,2.407,314,2.042,323,2.961,324,2.961,325,2.673,326,2.961,327,2.673]],["title/injectables/TransactionsRestService.html",[38,0.405,327,1.675]],["body/injectables/TransactionsRestService.html",[3,0.226,4,0.226,5,0.186,7,0.814,14,0.047,16,1.053,18,1.191,19,1.191,20,0.6,21,1.053,22,1.106,24,0.479,25,0.313,29,0.226,30,0.362,31,1.106,36,0.023,37,0.023,38,0.41,39,0.676,41,0.471,43,0.972,49,1.312,60,1.595,114,2.193,117,1.279,118,2.459,154,2.018,155,2.018,172,2.459,180,3.016,186,2.018,269,2.301,272,2.301,292,2.303,294,3.372,300,2.292,314,3.016,327,1.693,328,3.555,329,1.507,330,2.833,331,2.833,332,2.833,333,2.833,334,1.854,335,1.854,336,2.833,337,3.85,338,1.854,339,2.833,340,1.854,341,1.854,342,2.833,343,1.854,344,2.833,345,1.854,346,1.507,347,1.854,348,4.374,349,1.854,350,3.85,351,2.833,352,2.833,353,2.833,354,2.833,355,2.833,356,2.833,357,2.833,358,2.833,359,2.833,360,2.833,361,2.833,362,1.854,363,1.854,364,1.854,365,1.854,366,2.833,367,1.854]],["title/injectables/TransactionsService.html",[38,0.405,325,1.675]],["body/injectables/TransactionsService.html",[3,0.297,4,0.187,5,0.154,7,0.702,11,0.891,12,0.71,14,0.047,16,1.076,18,1.161,19,1.161,20,0.613,21,1.026,22,1.09,24,0.515,25,0.259,27,1.871,29,0.187,30,0.299,31,1.09,36,0.02,37,0.02,38,0.353,39,0.559,41,0.389,42,0.62,43,0.804,44,1.986,45,1.871,49,1.131,58,0.71,59,0.71,60,1.762,62,1.131,64,0.71,72,0.917,99,1.596,106,1.247,109,1.821,111,1.988,114,1.25,118,2.437,148,1.986,149,1.247,152,2.476,153,2.1,154,1.988,155,1.988,156,1.986,157,3.988,158,2.616,159,1.986,160,1.058,164,1.247,172,2.307,177,2.476,181,3.286,182,1.986,184,2.476,185,2.476,186,1.988,198,1.247,201,1.247,202,1.986,205,1.247,269,1.46,272,1.46,305,4.088,325,1.46,346,3.688,368,1.247,369,2.444,370,2.444,371,2.444,372,2.444,373,2.444,374,2.444,375,2.444,376,1.534,377,1.534,378,2.444,379,1.534,380,4.402,381,2.444,382,1.534,383,2.444,384,1.534,385,2.444,386,1.534,387,2.444,388,3.046,389,2.444,390,2.444,391,2.444,392,2.444,393,2.444,394,2.444,395,2.444,396,2.444,397,2.444,398,2.444,399,1.534,400,1.986,401,2.444,402,1.534,403,1.534,404,1.534,405,1.534,406,1.534,407,1.534,408,1.534,409,1.534,410,1.534,411,1.534]],["title/coverage.html",[412,3.107]],["body/coverage.html",[5,0.334,11,1.215,14,0.045,20,0.482,27,1.542,36,0.035,37,0.035,38,0.779,40,2.708,60,1.215,88,1.746,98,2.708,111,1.746,224,1.368,226,1.991,244,2.708,250,1.746,253,2.708,265,1.991,288,1.945,290,2.708,293,2.708,295,2.708,296,2.708,300,1.746,304,2.708,325,1.991,327,1.991,328,2.708,329,2.708,368,2.708,412,2.708,413,3.332,414,3.332,415,3.332,416,5.56,417,3.332,418,3.332,419,3.332,420,3.332,421,4.286,422,3.332,423,3.332,424,4.286,425,3.332,426,3.332]],["title/dependencies.html",[82,1.766,427,1.904]],["body/dependencies.html",[14,0.046,25,0.692,36,0.039,37,0.039,64,1.894,66,3.327,67,3.327,82,2.145,303,2.822,428,4.093,429,4.093,430,4.093,431,4.093,432,4.093,433,4.093,434,4.093,435,4.093]],["title/index.html",[41,0.595,400,1.904,436,2.343]],["body/index.html",[14,0.041,36,0.041,37,0.041,72,2.643,437,3.595,438,4.423]],["title/modules.html",[2,1.238]],["body/modules.html",[1,1.63,2,1.286,14,0.038,36,0.038,37,0.038,81,2.081,87,1.63,222,2.738,228,2.081,230,2.373,439,5.324,440,5.324,441,5.533,442,4.781,443,4.781,444,4.781]],["title/overview.html",[445,3.107]],["body/overview.html",[1,1.985,2,1.128,14,0.044,36,0.035,37,0.035,39,1.269,81,2.913,82,2.31,83,2.83,84,2.83,85,2.83,86,2.83,87,1.985,88,2.852,89,3.04,90,2.401,91,2.401,228,2.749,247,2.83,248,2.83,249,2.83,250,2.852,289,2.08,445,2.83,446,3.481,447,3.481,448,3.481]],["title/properties.html",[42,0.856,427,1.904]],["body/properties.html",[12,1.763,14,0.046,36,0.038,37,0.038,42,0.967,72,2.276,437,4.095,449,3.808,450,3.808,451,3.808,452,3.808,453,4.661,454,5.249,455,3.808,456,3.808,457,3.808,458,3.808,459,3.808,460,3.808,461,3.808,462,3.808,463,3.808,464,3.808,465,3.808,466,3.808,467,3.808]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":416,"title":{},"body":{"coverage.html":{}}}],["0.0.7",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["0/2",{"_index":419,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":417,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":418,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":450,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":359,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["2.14.0",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":448,"title":{},"body":{"overview.html":{}}}],["6",{"_index":446,"title":{},"body":{"overview.html":{}}}],["7",{"_index":447,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["accountid",{"_index":294,"title":{},"body":{"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{}}}],["accounts/accounts.module",{"_index":239,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":238,"title":{},"body":{"modules/HederaModule.html":{}}}],["admin",{"_index":162,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":116,"title":{},"body":{"injectables/HcsService.html":{}}}],["apikey",{"_index":291,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["array",{"_index":274,"title":{},"body":{"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":285,"title":{},"body":{"injectables/KeysService.html":{}}}],["async",{"_index":305,"title":{},"body":{"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["author",{"_index":467,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":319,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":440,"title":{},"body":{"modules.html":{}}}],["await",{"_index":172,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":441,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":442,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":459,"title":{},"body":{"properties.html":{}}}],["call",{"_index":306,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":367,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":365,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":360,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":349,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":310,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":364,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":123,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":220,"title":{},"body":{"injectables/HcsService.html":{}}}],["catch",{"_index":184,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":272,"title":{},"body":{"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["class",{"_index":30,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["client",{"_index":44,"title":{},"body":{"injectables/ClientService.html":{},"injectables/TransactionsService.html":{}}}],["client.formainnet",{"_index":77,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":76,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":28,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":95,"title":{},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":149,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":1,"title":{"modules/ClientModule.html":{}},"body":{"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(operator",{"_index":240,"title":{},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["clientservice",{"_index":27,"title":{"injectables/ClientService.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_hcsmodule",{"_index":83,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":85,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":84,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_providers",{"_index":86,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":247,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":248,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":249,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["connection",{"_index":71,"title":{},"body":{"injectables/ClientService.html":{}}}],["const",{"_index":158,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":49,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(clientservice",{"_index":106,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(mirrornode",{"_index":307,"title":{},"body":{"injectables/RestService.html":{}}}],["constructor(operator",{"_index":50,"title":{},"body":{"injectables/ClientService.html":{}}}],["constructor(restservice",{"_index":334,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["controllers",{"_index":97,"title":{},"body":{"modules/HcsModule.html":{},"modules/KeysModule.html":{}}}],["coverage",{"_index":412,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":70,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{}}}],["createscheduledtransaction",{"_index":369,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":375,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":100,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":108,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":156,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["currentadminkey",{"_index":138,"title":{},"body":{"injectables/HcsService.html":{}}}],["decorators",{"_index":52,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":58,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":199,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic",{"_index":101,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":119,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":82,"title":{"dependencies.html":{}},"body":{"modules/HcsModule.html":{},"modules/KeysModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":451,"title":{},"body":{"properties.html":{}}}],["dex",{"_index":456,"title":{},"body":{"properties.html":{}}}],["documentation",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":193,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":23,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["emitter",{"_index":67,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":128,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":312,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":185,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["execute",{"_index":176,"title":{},"body":{"injectables/HcsService.html":{}}}],["executed",{"_index":197,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":195,"title":{},"body":{"injectables/HcsService.html":{}}}],["export",{"_index":29,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["exports",{"_index":35,"title":{},"body":{"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetching",{"_index":179,"title":{},"body":{"injectables/HcsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["filters",{"_index":337,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":178,"title":{},"body":{"injectables/HcsService.html":{}}}],["forroot",{"_index":9,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["forroot(mirrornode",{"_index":298,"title":{},"body":{"modules/RestModule.html":{}}}],["forroot(operator",{"_index":10,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["freezewith(this.clientservice.getclient",{"_index":201,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":167,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":131,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":282,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekey",{"_index":254,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":255,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":258,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatenewclient",{"_index":46,"title":{},"body":{"injectables/ClientService.html":{}}}],["getalltransactions",{"_index":330,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":336,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":331,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":339,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":47,"title":{},"body":{"injectables/ClientService.html":{}}}],["geting",{"_index":406,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getlatesttransactions",{"_index":332,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":342,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":102,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":122,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnodeoperator",{"_index":48,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":333,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":344,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":370,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":378,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":400,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery",{"_index":371,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":381,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":372,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":383,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/smart",{"_index":465,"title":{},"body":{"properties.html":{}}}],["global",{"_index":242,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":439,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":64,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{}}}],["hcs",{"_index":150,"title":{},"body":{"injectables/HcsService.html":{}}}],["hcs.service",{"_index":94,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":233,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmodule",{"_index":81,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":88,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"overview.html":{}}}],["headers",{"_index":318,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":72,"title":{},"body":{"injectables/ClientService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.service",{"_index":227,"title":{},"body":{"modules/HederaModule.html":{}}}],["hederamodule",{"_index":222,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"modules.html":{}}}],["hederaservice",{"_index":226,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs/hfs.module",{"_index":235,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":234,"title":{},"body":{"modules/HederaModule.html":{}}}],["homepage",{"_index":457,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":437,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts/hts.module",{"_index":237,"title":{},"body":{"modules/HederaModule.html":{}}}],["htsmodule",{"_index":236,"title":{},"body":{"modules/HederaModule.html":{}}}],["httpmodule",{"_index":302,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/smart",{"_index":460,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":458,"title":{},"body":{"properties.html":{}}}],["httpservice",{"_index":308,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":407,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["identifier",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["if(adminkey",{"_index":170,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(currentadminkey",{"_index":191,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(end",{"_index":213,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(filters",{"_index":363,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["if(length",{"_index":284,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(limit",{"_index":215,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(publickeys",{"_index":277,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(start",{"_index":210,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(submitkey",{"_index":207,"title":{},"body":{"injectables/HcsService.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["imports",{"_index":93,"title":{},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["index",{"_index":41,"title":{"index.html":{}},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["inject",{"_index":63,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["inject('mirrornode",{"_index":315,"title":{},"body":{"injectables/RestService.html":{}}}],["inject('network",{"_index":69,"title":{},"body":{"injectables/ClientService.html":{}}}],["inject('operator",{"_index":68,"title":{},"body":{"injectables/ClientService.html":{}}}],["injectable",{"_index":38,"title":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["injectables",{"_index":39,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["interface",{"_index":288,"title":{"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{}},"body":{"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["interfaces",{"_index":289,"title":{},"body":{"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"overview.html":{}}}],["isc",{"_index":463,"title":{},"body":{"properties.html":{}}}],["key",{"_index":111,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["keylist",{"_index":112,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":281,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":275,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys.service",{"_index":252,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":229,"title":{},"body":{"modules/HederaModule.html":{}}}],["keyservice",{"_index":268,"title":{},"body":{"injectables/KeysService.html":{}}}],["keysmodule",{"_index":228,"title":{"modules/KeysModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":250,"title":{"injectables/KeysService.html":{}},"body":{"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"overview.html":{}}}],["keywords",{"_index":452,"title":{},"body":{"properties.html":{}}}],["length",{"_index":259,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":462,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":129,"title":{},"body":{"injectables/HcsService.html":{}}}],["list.types",{"_index":267,"title":{},"body":{"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":296,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["logger",{"_index":45,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"client",{"_index":61,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":140,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":245,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"keys",{"_index":263,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":313,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":387,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":13,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["matching",{"_index":37,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["memo",{"_index":113,"title":{},"body":{"injectables/HcsService.html":{}}}],["message",{"_index":124,"title":{},"body":{"injectables/HcsService.html":{}}}],["methods",{"_index":7,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mirrornode",{"_index":224,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["module",{"_index":0,"title":{"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":19,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":283,"title":{},"body":{"injectables/KeysService.html":{}}}],["nestjs",{"_index":438,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":303,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":66,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":12,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["new",{"_index":60,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["next",{"_index":354,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":352,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":356,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":355,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["node",{"_index":454,"title":{},"body":{"properties.html":{}}}],["null",{"_index":160,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":127,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["onevent",{"_index":65,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":53,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":11,"title":{"interfaces/Operator.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/Operator.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["optional",{"_index":21,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["otherwise",{"_index":175,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":91,"title":{},"body":{"modules/HcsModule.html":{},"modules/KeysModule.html":{},"overview.html":{}}}],["overview",{"_index":445,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":427,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":18,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["private",{"_index":43,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["privatekey",{"_index":109,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{}}}],["privatekey.generate",{"_index":270,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":265,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":280,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":286,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":118,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":152,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":269,"title":{},"body":{"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(resolve",{"_index":357,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":42,"title":{"properties.html":{}},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protected",{"_index":99,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":33,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":276,"title":{},"body":{"injectables/KeysService.html":{}}}],["providers",{"_index":32,"title":{},"body":{"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["publickey",{"_index":264,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":273,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":287,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":279,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":262,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":278,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":410,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["query.execute(this.clientservice.getclient",{"_index":411,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt",{"_index":181,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.scheduleid",{"_index":408,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reject",{"_index":154,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":186,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["repository",{"_index":464,"title":{},"body":{"properties.html":{}}}],["requesting",{"_index":405,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["reset",{"_index":90,"title":{},"body":{"modules/HcsModule.html":{},"modules/KeysModule.html":{},"overview.html":{}}}],["resolve",{"_index":153,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(info",{"_index":205,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(key",{"_index":271,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(receipt",{"_index":397,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(receipt.status",{"_index":198,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":183,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":209,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":366,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":322,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":409,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":221,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transactions",{"_index":361,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":203,"title":{},"body":{"injectables/HcsService.html":{}}}],["response",{"_index":180,"title":{},"body":{"injectables/HcsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.links.next.split",{"_index":353,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service",{"_index":301,"title":{},"body":{"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["rest.service.ts",{"_index":329,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:10",{"_index":340,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:39",{"_index":338,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:5",{"_index":335,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:73",{"_index":343,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:86",{"_index":345,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":96,"title":{},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":347,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":87,"title":{"modules/RestModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(mirrornode",{"_index":241,"title":{},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["restservice",{"_index":300,"title":{"injectables/RestService.html":{}},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":36,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":31,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":22,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["rxjs",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":401,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":388,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":402,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(this.clientservice.getclient",{"_index":404,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":380,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":389,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":390,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":455,"title":{},"body":{"properties.html":{}}}],["sdk.git",{"_index":466,"title":{},"body":{"properties.html":{}}}],["sdk/issues",{"_index":461,"title":{},"body":{"properties.html":{}}}],["service",{"_index":62,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":396,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setmessage(message",{"_index":206,"title":{},"body":{"injectables/HcsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":403,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":398,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["settimeout(resolve",{"_index":358,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":161,"title":{},"body":{"injectables/HcsService.html":{}}}],["settopicid(topicid",{"_index":200,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":395,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sign",{"_index":190,"title":{},"body":{"injectables/HcsService.html":{}}}],["sign(key",{"_index":399,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signatures",{"_index":196,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":169,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":202,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["signscheduledtransaction",{"_index":373,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":385,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":171,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.execute(this.clientservice.getclient",{"_index":174,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(adminkey",{"_index":194,"title":{},"body":{"injectables/HcsService.html":{}}}],["smart",{"_index":453,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":6,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:7",{"_index":17,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":40,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:20",{"_index":54,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:31",{"_index":55,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:35",{"_index":56,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:8",{"_index":57,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:9",{"_index":51,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":92,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":98,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:123",{"_index":121,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:147",{"_index":136,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:162",{"_index":134,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:195",{"_index":130,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:21",{"_index":107,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:30",{"_index":115,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:73",{"_index":139,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":223,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:18",{"_index":225,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":244,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:5",{"_index":246,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":251,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":253,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:13",{"_index":257,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:24",{"_index":261,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:7",{"_index":256,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":297,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:8",{"_index":299,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":304,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:14",{"_index":311,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:7",{"_index":309,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":328,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":323,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.module.ts:11",{"_index":324,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":368,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:101",{"_index":379,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:20",{"_index":374,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:26",{"_index":382,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:41",{"_index":384,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:56",{"_index":386,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:79",{"_index":376,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/mirror.types.ts",{"_index":290,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":293,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":295,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["start",{"_index":126,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":436,"title":{"index.html":{}},"body":{}}],["statements",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":8,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["status",{"_index":148,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":114,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":164,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":110,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":103,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":132,"title":{},"body":{"injectables/HcsService.html":{}}}],["subscription",{"_index":217,"title":{},"body":{"injectables/HcsService.html":{}}}],["support",{"_index":443,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":444,"title":{},"body":{"modules.html":{}}}],["table",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":15,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["this.client",{"_index":73,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":78,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":219,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.generatenewclient",{"_index":74,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.httpservice",{"_index":316,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":320,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":317,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":75,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":80,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":79,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":348,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["threshold",{"_index":260,"title":{},"body":{"injectables/KeysService.html":{}}}],["timestamp",{"_index":341,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["topic",{"_index":151,"title":{},"body":{"injectables/HcsService.html":{}}}],["topiccreatetransaction",{"_index":141,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":143,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":120,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo",{"_index":104,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":135,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":147,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":204,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":146,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":145,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":144,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":142,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":188,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":321,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":157,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(this.clientservice.getclient",{"_index":177,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(this.clientservice.getclient",{"_index":168,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":163,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":214,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setlimit(limit",{"_index":216,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setstarttime(start",{"_index":212,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":165,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":166,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(adminkey",{"_index":173,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":192,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(submitkey",{"_index":208,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.subscribe",{"_index":218,"title":{},"body":{"injectables/HcsService.html":{}}}],["transactionid",{"_index":346,"title":{},"body":{"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":391,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":392,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":393,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":394,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":314,"title":{},"body":{"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{}}}],["transactions.concat(response.transactions",{"_index":350,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":326,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":362,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":231,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":230,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{}}}],["transactionsrestservice",{"_index":327,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["transactionsservice",{"_index":325,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["transactiontoschedule",{"_index":377,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["true",{"_index":243,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":155,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":159,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(this.clientservice.getclient",{"_index":182,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["type",{"_index":20,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/mirror.types",{"_index":232,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{}}}],["types/operator.types",{"_index":26,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/TransactionsModule.html":{}}}],["types/private",{"_index":266,"title":{},"body":{"injectables/KeysService.html":{}}}],["uint8array",{"_index":133,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":211,"title":{},"body":{"injectables/HcsService.html":{}}}],["update",{"_index":187,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic",{"_index":105,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":137,"title":{},"body":{"injectables/HcsService.html":{}}}],["url",{"_index":292,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{}}}],["use",{"_index":189,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["usevalue",{"_index":34,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":59,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["version",{"_index":449,"title":{},"body":{"properties.html":{}}}],["void",{"_index":125,"title":{},"body":{"injectables/HcsService.html":{}}}],["while(response.links.next",{"_index":351,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["yes",{"_index":117,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["zoom",{"_index":89,"title":{},"body":{"modules/HcsModule.html":{},"modules/KeysModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(operator: Operator, network: \"mainnet\" | \"testnet\")\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                Operator\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(operator: Operator, network: 'mainnet' | 'testnet'): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'operator',\n          useValue: operator,\n        },\n        {\n          provide: 'network',\n          useValue: network\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateNewClient\n                            \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operator: Operator, network: \"mainnet\" | \"testnet\")\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operator\n                                                  \n                                                        \n                                                                        Operator\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                    \"mainnet\" | \"testnet\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateNewClient\n                        \n                    \n                \n            \n            \n                \ngenerateNewClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Client\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Client\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Operator\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\n\n@Injectable()\nexport class ClientService {\n  private client: Client;\n  private logger: Logger = new Logger(\"Client Service\");\n\n  constructor(\n    @Inject('operator') private operator: Operator,\n    @Inject('network') private network: 'mainnet' | 'testnet',\n  ) {\n    // Create our connection to the Hedera network...\n    this.client = this.generateNewClient();\n  }\n\n  @OnEvent('client.invalid_node_operator')\n  generateNewClient() {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n    \n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  getClient(): Client {\n    return this.client;\n  }\n\n  getNodeOperator(): Operator {\n    return this.operator;\n  }  \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HcsService {\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {\n    // HCS Service\n  }\n\n  // Create topic...\n  createTopic(\n    adminKey?: PrivateKey, \n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n        // setting the admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if there is an admin key, transaction must be signed...\n        if(adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n        // finally, fetching the topicId from the response...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Update topic...\n  updateTopic(\n    topicId: TopicId, \n    currentAdminKey?: PrivateKey, \n    adminKey?: PrivateKey, \n    submitKey?: Key | KeyList, \n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n        // setting the new admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the new submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the new topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if the transaction has got an admin key, we must use it to sign...\n        if(currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n          // if there is a new admin key, we must use it to double sign it...\n          if(adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n          // executing the transaction, after signatures...\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise we can just sign the transaction...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n        // fetching the status of the executed transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Delete topic...\n  deleteTopic(\n    topicId: TopicId, \n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction, and freezing it...\n        const transaction = new TopicDeleteTransaction()\n        .setTopicId(topicId)\n        .freezeWith(this.clientService.getClient());\n        // signing the transaction with admin key...\n        const signTx = await transaction.sign(adminKey);\n        // fetching response...\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        // resolving status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Get topic info...\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = new TopicInfoQuery().setTopicId(topicId);  \n        const info = await transaction.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Submit Message...\n  submitMessage(\n    topicId: TopicId, \n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let txResponse = null;\n        // creating the transaction, setting topic and message...\n        const transaction = new TopicMessageSubmitTransaction()\n        .setTopicId(topicId)\n        .setMessage(message);\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if there is an submit key, transaction must be signed...\n        if(submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }        \n        // finally, fetching the status...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Get topic message...\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicMessageQuery()\n        .setTopicId(topicId);\n\n        if(start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if(end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if(limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(), \n          null, \n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(operator: Operator, mirrorNode: MirrorNode, network: \"mainnet\" | \"testnet\")\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                Operator\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mirrorNode\n                                    \n                                                MirrorNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\n\n// import { HfsModule } from './hfs/hfs.module';\n// import { HcsModule } from './hcs/hcs.module';\n// import { HtsModule } from './hts/hts.module';\n// import { AccountsModule } from './accounts/accounts.module';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(operator: Operator, mirrorNode: MirrorNode, network: 'mainnet' | 'testnet'): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(operator, network), \n        RestModule.forRoot(mirrorNode),\n        TransactionsModule,\n        HcsModule,\n        // HfsModule, \n        // HtsModule, \n        // AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(operator, network), \n        RestModule.forRoot(mirrorNode),\n        TransactionsModule,\n        HcsModule,\n        // HfsModule,\n        // HtsModule, \n        // AccountsModule         \n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class HederaService {\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class KeysService {\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n  constructor() {\n    // KeyService Class\n  }\n\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n  url: string\n  apiKey: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n  accountId: string\n  privateKey: string\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\nexport interface PrivateKeyList {\n  privateKeys: PrivateKey[]\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(mirrorNode: MirrorNode)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mirrorNode\n                                    \n                                                MirrorNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(mirrorNode: MirrorNode): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'mirrorNode',\n          useValue: mirrorNode,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mirrorNode: MirrorNode, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mirrorNode\n                                                  \n                                                        \n                                                                        MirrorNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\n\n@Injectable()\nexport class RestService {\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n  constructor(\n    @Inject('mirrorNode') private mirrorNode: MirrorNode,  \n    private httpService: HttpService\n  ) {}\n\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: {'authorization': this.mirrorNode.apiKey} }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(operator: Operator, mirrorNode: MirrorNode, network: \"mainnet\" | \"testnet\")\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.module.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operator\n                                    \n                                                Operator\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mirrorNode\n                                    \n                                                MirrorNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    network\n                                    \n                                            \"mainnet\" | \"testnet\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { Operator } from '../../types/operator.types';\nimport { MirrorNode } from '../../types/mirror.types';\n\n@Module({})\nexport class TransactionsModule {\n  static forRoot(operator: Operator, mirrorNode: MirrorNode, network: 'mainnet' | 'testnet'): DynamicModule {\n    return {\n      module: TransactionsModule,\n      imports: [\n        ClientModule.forRoot(operator, network), \n        RestModule.forRoot(mirrorNode)  \n      ],\n      providers: [TransactionsService, TransactionsRestService],\n      exports: [TransactionsService, TransactionsRestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n@Injectable()\nexport class TransactionsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string):  Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if(filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n        .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`schedules/${transactionId}`);\n        \n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { \n  PrivateKey, \n  ScheduleCreateTransaction, \n  ScheduleId, \n  ScheduleInfoQuery, \n  ScheduleSignTransaction, \n  Status, \n  Transaction, \n  TransactionId, \n  TransactionReceipt, \n  TransactionReceiptQuery,\n  TransactionRecordQuery, \n  TransactionResponse \n} from '@hashgraph/sdk';\n\n@Injectable()\nexport class TransactionsService {\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionRecordQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }  \n\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionReceiptQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n            .setScheduleId(scheduleId)\n            .freezeWith(this.clientService.getClient())\n            .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating a schedule transaction...\n        let  scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n            .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(this.clientService.getClient());\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, smart-node-sdk, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/smart-node-sdk/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/smart-node-sdk.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
