var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccountBalance.html",[0,0.8,1,2.059]],["body/interfaces/AccountBalance.html",[0,1.161,1,3.576,2,2.049,3,0.314,4,0.314,5,0.21,6,3.858,7,0.822,8,1.076,9,5.117,10,5.117,11,3.965,12,0.73,13,0.031,14,3.447,15,0.509,16,4.613,17,2.693,18,4.613,19,0.261,20,0.026,21,0.026]],["title/modules/AccountsModule.html",[22,0.566,23,1.855]],["body/modules/AccountsModule.html",[3,0.266,4,0.266,5,0.178,13,0.032,15,0.562,19,0.221,20,0.024,21,0.024,22,0.888,23,3.815,24,1.254,25,2.036,26,3.272,27,3.272,28,3.272,29,3.272,30,2.296,31,3.233,32,3.233,33,2.492,34,3.425,35,2.414,36,1.895,37,1.895,38,3.912,39,1.876,40,2.036,41,2.036,42,0.517,43,3.912,44,2.074,45,2.283,46,3.272,47,3.272,48,1.895,49,0.574]],["title/injectables/AccountsService.html",[34,1.685,50,0.334]],["body/injectables/AccountsService.html",[1,1.423,3,0.226,4,0.089,5,0.059,7,0.233,8,0.428,9,1.837,10,2.784,11,0.847,12,0.617,13,0.032,14,0.763,15,0.394,17,0.763,19,0.074,20,0.01,21,0.01,34,1.165,42,0.173,49,0.192,50,0.349,51,0.419,52,1.094,53,0.693,54,1.262,55,1.832,56,0.65,57,2.945,58,2.841,59,2.197,60,2.197,61,2.197,62,2.197,63,2.197,64,2.841,65,1.156,66,0.763,67,1.832,68,2.258,69,1.273,70,2.197,71,1.327,72,1.327,73,1.129,74,1.308,75,2.688,76,4.019,77,3.711,78,1.308,79,2.197,80,3.104,81,3.329,82,3.329,83,4.645,84,3.75,85,1.765,86,1.559,87,2.152,88,2.023,89,2.197,90,3.631,91,3.844,92,4.484,93,1.816,94,1.308,95,2.197,96,3.329,97,3.329,98,2.425,99,2.197,100,1.308,101,3.329,102,3.329,103,2.197,104,1.308,105,3.329,106,2.023,107,2.197,108,1.308,109,2.197,110,1.308,111,2.197,112,1.308,113,2.784,114,3.361,115,2.604,116,1.308,117,2.197,118,1.6,119,0.534,120,0.534,121,1.626,122,2.197,123,1.253,124,2.197,125,2.197,126,3.329,127,2.197,128,2.197,129,2.265,130,2.197,131,2.197,132,0.454,133,0.763,134,1.308,135,1.308,136,1.308,137,0.763,138,1.094,139,1.094,140,3.636,141,0.827,142,1.264,143,2.768,144,2.554,145,1.745,146,1.745,147,1.506,148,3.02,149,2.975,150,3.104,151,1.658,152,2.313,153,1.423,154,1.6,155,1.308,156,1.308,157,2.768,158,2.493,159,1.745,160,1.308,161,1.308,162,1.094,163,0.847,164,1.308,165,1.308,166,1.308,167,1.308,168,1.308,169,1.308,170,1.308,171,0.847,172,2.157,173,1.094,174,1.094,175,0.847,176,0.534,177,2.157,178,1.841,179,1.308,180,2.346,181,2.157,182,1.094,183,0.763,184,1.423,185,1.837,186,1.308,187,1.308,188,1.308,189,1.308,190,1.308,191,1.308,192,1.308,193,0.953,194,0.763,195,0.953,196,1.308,197,1.837,198,1.423,199,2.197,200,1.837,201,1.6,202,2.197,203,0.953,204,0.763,205,1.094,206,3.329,207,2.197,208,2.784,209,1.837,210,2.197,211,2.197,212,1.308,213,1.308,214,1.308]],["title/modules/ClientModule.html",[22,0.566,30,1.196]],["body/modules/ClientModule.html",[3,0.261,4,0.261,5,0.175,12,0.652,13,0.032,15,0.547,19,0.217,20,0.023,21,0.023,22,1.022,24,1.232,30,2.16,39,1.855,40,1.57,41,2.013,42,0.508,49,0.564,56,1.137,67,2.424,69,1.346,71,1.459,72,1.459,73,1.24,86,1.459,142,1.459,176,1.57,215,3.843,216,4.18,217,2.49,218,3.59,219,2.696,220,3.843,221,3.963,222,4.322,223,2.49,224,3.59,225,3.843,226,2.8,227,3.843,228,3.59,229,2.8,230,2.243,231,4.121,232,3.214,233,2.8,234,3.214,235,2.49,236,3.214]],["title/injectables/ClientService.html",[50,0.334,67,1.298]],["body/injectables/ClientService.html",[3,0.189,4,0.189,5,0.126,7,0.495,8,0.771,12,0.729,13,0.032,14,2.929,15,0.489,19,0.157,20,0.019,21,0.019,42,0.367,49,0.408,50,0.527,51,0.89,53,1.472,55,2.369,56,1.17,65,1.373,67,1.615,69,1.583,71,0.822,72,0.822,73,0.699,80,3.307,86,1.485,119,1.134,120,1.134,121,1.17,123,1.889,132,0.964,140,1.799,141,2.367,142,1.17,158,2.308,163,3.252,175,3.963,176,2.554,219,2.576,226,2.023,230,1.62,235,1.799,237,2.322,238,3.074,239,3.864,240,5.018,241,5.018,242,2.322,243,3.954,244,2.688,245,3.307,246,2.776,247,3.954,248,2.776,249,3.954,250,3.954,251,3.954,252,2.776,253,3.954,254,2.776,255,3.954,256,2.88,257,3.851,258,2.776,259,3.954,260,2.776,261,2.776,262,2.776,263,2.322,264,2.322,265,2.322,266,3.954,267,2.776,268,2.776,269,2.776,270,1.799,271,2.776,272,5.018,273,2.776,274,4.605,275,2.776,276,2.776,277,2.776,278,2.776,279,2.776,280,2.776,281,2.776]],["title/modules/HcsModule.html",[22,0.566,282,1.855]],["body/modules/HcsModule.html",[3,0.282,4,0.282,5,0.189,13,0.031,15,0.544,19,0.235,20,0.025,21,0.025,22,0.922,24,1.332,25,2.115,30,2.331,33,2.53,35,2.507,36,2.011,37,2.011,39,1.949,40,2.115,41,2.115,42,0.549,44,2.202,45,2.424,48,2.011,49,0.61,282,3.783,283,3.474,284,4.153,285,3.474,286,3.474,287,3.452,288,4.153,289,4.153]],["title/injectables/HcsService.html",[50,0.334,287,1.685]],["body/injectables/HcsService.html",[3,0.23,4,0.091,5,0.061,7,0.238,8,0.437,12,0.599,13,0.032,15,0.266,19,0.076,20,0.011,21,0.011,42,0.177,49,0.196,50,0.355,51,0.429,53,0.709,54,1.283,55,1.85,56,0.663,65,0.778,66,0.781,67,1.85,69,1.236,71,1.278,72,1.278,73,1.087,75,2.707,85,2.646,86,1.511,87,2.087,88,2.344,93,1.67,106,2.281,115,3.309,118,1.631,119,0.546,120,0.546,121,1.653,123,1.531,129,2.155,132,0.465,133,0.781,140,3.687,141,0.504,142,1.203,143,2.634,144,2.155,145,1.661,146,1.661,147,2.155,148,3.374,149,2.854,151,0.781,152,2.257,153,2.188,154,0.974,157,2.634,158,2.373,159,1.661,162,3.61,171,1.871,172,2.436,177,3.148,178,2.188,180,1.971,181,2.188,183,1.307,184,2.188,193,0.974,195,2.46,198,0.867,203,0.974,204,1.307,270,1.451,287,1.187,290,1.119,291,2.888,292,2.888,293,2.888,294,2.888,295,3.759,296,2.888,297,2.239,298,1.872,299,1.338,300,5.383,301,3.145,302,1.338,303,4.357,304,5.383,305,1.338,306,5.179,307,1.338,308,1.872,309,1.338,310,3.377,311,5.301,312,2.239,313,3.759,314,3.759,315,3.759,316,1.338,317,1.338,318,2.888,319,1.338,320,2.888,321,1.338,322,3.144,323,1.338,324,1.338,325,1.338,326,3.759,327,1.338,328,2.239,329,2.239,330,1.338,331,2.239,332,2.239,333,2.239,334,1.338,335,1.338,336,4.065,337,2.239,338,2.239,339,2.239,340,3.377,341,2.239,342,2.239,343,2.415,344,2.239,345,2.239,346,1.338,347,1.338,348,1.631,349,2.888,350,1.338,351,1.338,352,1.338,353,1.338,354,1.338,355,2.888,356,1.338,357,1.119,358,1.338,359,1.338,360,1.338,361,2.888,362,1.338,363,1.338,364,1.338,365,1.338,366,1.338,367,1.338,368,1.338]],["title/modules/HederaModule.html",[22,0.566,369,2.059]],["body/modules/HederaModule.html",[3,0.228,4,0.228,5,0.152,12,0.596,13,0.032,15,0.586,19,0.189,20,0.021,21,0.021,22,0.969,23,3.312,24,1.074,30,1.261,31,3.009,32,3.009,33,1.369,39,1.695,40,1.84,41,1.84,42,0.443,44,1.776,45,1.956,46,2.802,47,2.802,49,0.492,56,0.992,69,1.23,71,1.333,72,1.333,73,1.133,86,1.333,142,1.333,176,1.369,216,3.962,217,2.171,218,3.281,219,2.416,221,3.281,222,4.134,223,2.171,224,3.281,226,2.441,230,1.956,282,3.312,369,3.524,370,3.35,371,3.35,372,3.35,373,3.35,374,3.677,375,3.35,376,3.312,377,3.35,378,1.488,379,2.441,380,3.35,381,3.312,382,3.35,383,3.35,384,4.503,385,4.503,386,4.503,387,4.503,388,4.503,389,4.503]],["title/interfaces/HederaOptions.html",[0,0.8,219,1.411]],["body/interfaces/HederaOptions.html",[0,1.117,2,1.971,3,0.302,4,0.302,5,0.202,7,0.791,8,1.051,12,0.768,13,0.031,14,3.389,15,0.497,19,0.251,20,0.026,21,0.026,176,1.813,219,2.395,238,3.202,239,4.4,256,4.23,257,4.856,378,2.855,390,3.711,391,4.438,392,4.438]],["title/injectables/HederaService.html",[50,0.334,374,2.059]],["body/injectables/HederaService.html",[3,0.302,4,0.302,5,0.202,7,0.793,8,1.053,12,0.589,13,0.031,15,0.41,19,0.252,20,0.026,21,0.026,42,0.589,49,0.653,50,0.635,51,1.426,53,2.359,54,2.582,55,2.627,69,1.215,119,1.818,120,1.818,121,1.598,123,2.276,374,3.499,393,3.721,394,5.399,395,4.449]],["title/modules/HfsModule.html",[22,0.566,381,1.855]],["body/modules/HfsModule.html",[3,0.291,4,0.291,5,0.195,13,0.031,15,0.527,19,0.242,20,0.025,21,0.025,22,0.94,24,1.374,25,2.156,30,2.349,35,2.556,36,2.076,37,2.076,39,1.987,40,2.156,41,2.156,42,0.567,44,2.272,48,2.076,49,0.629,381,3.756,396,3.584,397,4.286,398,3.584,399,3.584,400,3.466,401,4.286,402,4.286]],["title/injectables/HfsService.html",[50,0.334,400,1.685]],["body/injectables/HfsService.html",[3,0.208,4,0.099,5,0.243,7,0.259,8,0.468,11,0.943,12,0.62,13,0.032,15,0.283,19,0.082,20,0.011,21,0.011,42,0.193,49,0.214,50,0.374,51,0.467,53,0.772,54,1.362,55,1.915,56,0.711,57,3.017,65,0.834,66,0.85,67,1.915,69,1.28,71,1.327,72,1.327,73,1.129,75,2.954,85,2.377,86,1.551,87,2.142,88,2.383,93,1.87,98,1.06,106,2.097,113,2.976,114,3.546,115,3.243,118,2.869,119,0.595,120,0.595,121,1.606,123,1.596,129,2.377,132,0.506,133,0.85,140,3.752,141,1.34,142,1.255,143,2.747,144,2.248,145,1.732,146,1.732,147,2.248,148,3.428,149,3.044,151,2.474,152,2.346,153,1.556,157,2.747,158,2.474,159,1.732,171,2.306,172,2.552,173,1.217,174,1.217,178,2.306,180,2.736,183,1.79,193,2.593,270,2.552,308,3.294,400,1.273,403,1.217,404,3.938,405,3.066,406,3.066,407,2.402,408,2.009,409,1.455,410,6.239,411,5.242,412,5.79,413,1.455,414,1.455,415,1.455,416,1.455,417,1.455,418,1.455,419,1.455,420,3.066,421,1.455,422,1.455,423,1.455,424,1.455,425,2.402,426,2.402,427,2.402,428,2.402,429,2.402,430,2.402,431,2.402,432,2.402,433,1.455,434,3.066,435,2.402,436,3.559,437,3.559,438,2.234,439,2.565,440,3.559,441,2.593,442,3.559,443,1.455,444,3.938,445,1.455,446,1.455,447,1.455,448,1.455]],["title/modules/HtsModule.html",[22,0.566,31,1.685]],["body/modules/HtsModule.html",[3,0.265,4,0.265,5,0.177,13,0.032,15,0.549,19,0.22,20,0.024,21,0.024,22,0.885,24,1.249,25,2.031,30,2.383,31,3.474,33,2.489,35,2.407,36,1.886,37,1.886,39,1.871,40,2.031,41,2.031,42,0.515,44,2.065,45,2.273,48,1.886,49,0.572,449,3.257,450,3.257,451,3.895,452,3.257,453,3.768,454,3.768,455,3.895,456,3.895,457,3.895,458,2.524]],["title/injectables/HtsRestService.html",[50,0.334,453,1.855]],["body/injectables/HtsRestService.html",[3,0.212,4,0.212,5,0.142,7,0.556,12,0.699,13,0.032,15,0.452,19,0.177,20,0.02,21,0.02,42,0.413,49,0.459,50,0.451,51,1.001,56,1.271,65,1.491,69,1.443,71,1.564,72,1.564,73,1.33,86,1.452,87,2.338,91,3.179,93,2.001,121,1.452,141,1.176,142,1.452,145,2.004,146,2.004,152,2.263,159,2.004,185,3.591,204,3.233,453,2.506,459,4.632,460,2.275,461,4.293,462,4.293,463,4.293,464,2.612,465,3.034,466,3.123,467,4.293,468,3.123,469,4.293,470,4.906,471,3.123,472,4.293,473,3.123,474,2.612,475,4.293,476,2.601,477,4.632,478,3.123,479,2.612,480,2.376,481,5.723,482,3.123,483,5.283,484,3.591,485,3.591,486,4.293,487,4.293,488,4.293,489,3.123]],["title/injectables/HtsService.html",[50,0.334,454,1.855]],["body/injectables/HtsService.html",[3,0.096,4,0.096,5,0.064,7,0.252,8,0.458,11,1.521,12,0.673,13,0.032,15,0.322,19,0.08,20,0.011,21,0.011,42,0.187,49,0.208,50,0.246,51,0.454,54,1.336,55,1.709,56,0.695,57,3.186,65,0.815,66,0.826,67,1.709,69,1.389,71,1.467,72,1.467,73,1.248,75,2.934,85,2.056,86,1.423,87,2.311,88,2.431,90,3.538,91,4.067,93,1.542,106,2.311,115,2.71,119,0.578,120,0.578,121,1.741,123,0.884,129,2.348,132,0.492,133,0.826,141,0.533,142,1.423,144,1.594,145,1.709,146,1.965,147,1.594,148,3.453,149,3.186,150,1.963,151,1.755,152,2.476,154,2.19,159,1.965,171,1.948,172,3.003,177,3.003,178,3.003,180,2.968,181,3.003,182,2.515,183,2.042,197,2.515,198,2.513,200,2.515,201,2.19,238,1.594,244,1.755,439,3.244,441,2.19,454,1.37,476,2.217,480,2.329,490,1.184,491,3.007,492,3.007,493,3.007,494,3.007,495,2.347,496,3.007,497,3.007,498,3.007,499,2.347,500,2.347,501,1.415,502,1.415,503,1.415,504,1.415,505,1.415,506,4.635,507,1.415,508,1.415,509,3.007,510,3.007,511,1.415,512,2.347,513,4.182,514,1.415,515,1.415,516,1.415,517,4.429,518,1.415,519,1.415,520,1.415,521,3.879,522,1.415,523,2.347,524,1.415,525,2.347,526,2.347,527,2.347,528,2.347,529,2.347,530,2.347,531,3.498,532,1.184,533,2.347,534,2.347,535,1.415,536,0.917,537,1.415,538,2.347,539,2.347,540,1.415,541,1.415,542,1.184,543,2.347,544,1.415,545,1.415,546,1.415,547,1.415,548,3.007,549,1.415,550,1.415,551,1.415,552,2.347,553,2.347,554,3.007,555,3.007,556,3.007,557,3.007,558,3.007,559,2.347,560,2.347,561,2.347,562,1.415,563,1.415]],["title/modules/KeysModule.html",[22,0.566,32,1.685]],["body/modules/KeysModule.html",[3,0.303,4,0.303,5,0.203,13,0.031,15,0.498,19,0.252,20,0.026,21,0.026,22,0.963,24,1.43,25,2.209,32,3.38,35,2.619,36,2.16,37,2.16,39,2.036,41,2.209,42,0.59,48,2.16,49,0.655,68,3.182,564,3.73,565,3.73,566,3.73,567,4.46,568,4.46]],["title/injectables/KeysService.html",[50,0.334,68,1.539]],["body/injectables/KeysService.html",[3,0.213,4,0.213,5,0.142,7,0.557,8,0.838,12,0.569,13,0.032,14,1.826,15,0.453,19,0.177,20,0.02,21,0.02,42,0.414,49,0.631,50,0.451,51,1.003,54,2.181,55,2.339,56,1.272,65,1.706,68,2.082,69,1.444,71,0.926,72,0.926,73,0.787,75,3.036,85,2.603,86,1.272,87,2.16,88,1.278,93,1.574,106,2.006,119,1.278,120,1.278,121,1.736,123,1.618,132,1.087,137,1.826,138,2.617,139,2.617,142,1.272,144,2.603,145,1.756,146,1.756,149,1.659,152,1.278,159,1.756,184,2.785,301,4.037,343,2.617,348,2.279,438,3.132,476,2.279,480,2.082,569,2.617,570,5.287,571,4.911,572,4.299,573,3.129,574,3.129,575,4.911,576,5.865,577,3.129,578,4.299,579,4.299,580,2.617,581,3.129,582,4.299,583,3.129,584,3.129,585,3.129,586,3.129,587,3.129,588,3.129,589,4.635,590,4.299,591,3.129,592,2.617,593,3.129,594,3.129,595,3.129,596,3.129]],["title/interfaces/MirrorNode.html",[0,0.8,378,1.411]],["body/interfaces/MirrorNode.html",[0,1.186,2,2.093,3,0.32,4,0.32,5,0.214,7,0.839,8,1.09,12,0.739,13,0.03,19,0.266,20,0.027,21,0.027,73,1.407,93,2.046,378,2.483,597,3.941,598,6.162,599,4.489]],["title/interfaces/Operator.html",[0,0.8,176,1.298]],["body/interfaces/Operator.html",[0,1.158,2,2.044,3,0.313,4,0.313,5,0.209,7,0.82,8,1.074,12,0.78,13,0.03,19,0.26,20,0.026,21,0.026,73,1.387,88,2.498,90,3.568,93,2.087,176,2.251,580,5.113,600,3.848]],["title/interfaces/PrivateKeyList.html",[0,0.8,137,1.855]],["body/interfaces/PrivateKeyList.html",[0,1.167,2,2.06,3,0.315,4,0.315,5,0.211,7,0.826,8,1.08,12,0.732,13,0.031,15,0.427,19,0.262,20,0.026,21,0.026,88,2.504,106,1.895,132,1.611,137,3.231,301,4.719,589,5.126,601,3.879,602,3.879]],["title/modules/RestModule.html",[22,0.566,33,1.298]],["body/modules/RestModule.html",[3,0.257,4,0.257,5,0.172,12,0.645,13,0.032,15,0.557,19,0.214,20,0.023,21,0.023,22,1.015,24,1.211,33,2.329,39,1.835,40,1.991,41,1.991,42,0.5,49,0.555,56,1.118,69,1.331,71,1.442,72,1.442,73,1.227,86,1.442,142,1.442,216,4.153,217,2.447,218,3.55,219,2.684,221,3.93,222,4.299,223,2.447,224,3.55,228,3.55,229,2.752,230,2.205,231,4.076,232,3.159,233,2.752,234,3.159,235,2.447,236,3.159,378,1.678,379,2.752,458,2.447,465,3.128,603,3.777,604,3.777,605,3.777,606,5.395,607,2.752]],["title/injectables/RestService.html",[50,0.334,465,1.685]],["body/injectables/RestService.html",[3,0.237,4,0.237,5,0.158,7,0.621,8,0.901,12,0.731,13,0.032,15,0.509,19,0.197,20,0.022,21,0.022,42,0.461,49,0.512,50,0.485,51,1.117,54,2.304,55,2.414,56,1.368,57,2.75,65,1.605,69,1.509,71,1.368,72,1.368,73,1.163,86,1.031,87,1.888,93,1.663,119,1.423,120,1.423,121,1.535,123,1.74,141,2.165,142,1.031,145,1.423,146,1.423,152,1.423,159,1.423,194,2.698,204,2.033,219,2.625,230,2.033,235,2.257,242,2.913,265,2.913,378,2.625,379,2.538,465,2.45,476,1.847,480,1.687,607,2.538,608,2.913,609,4.622,610,6.03,611,4.622,612,4.622,613,3.484,614,3.484,615,4.622,616,3.484,617,3.484,618,3.484,619,5.525,620,3.484,621,3.484,622,3.484,623,3.484,624,3.484,625,3.484,626,3.484]],["title/interfaces/TokenBalance.html",[0,0.8,17,1.855]],["body/interfaces/TokenBalance.html",[0,1.164,2,2.055,3,0.314,4,0.314,5,0.21,7,0.824,8,1.078,12,0.782,13,0.03,17,3.226,19,0.262,20,0.026,21,0.026,75,3.368,84,5.122,91,3.968,93,1.895,209,5.122,627,3.868]],["title/interfaces/TransactionDetails.html",[0,0.8,536,2.059]],["body/interfaces/TransactionDetails.html",[0,1.174,2,2.071,3,0.317,4,0.317,5,0.212,7,0.831,8,1.083,12,0.735,13,0.031,15,0.43,19,0.264,20,0.026,21,0.026,129,3.437,132,1.619,201,4.473,536,3.599,628,3.899,629,4.473]],["title/modules/TransactionsModule.html",[22,0.566,376,1.855]],["body/modules/TransactionsModule.html",[3,0.268,4,0.268,5,0.18,13,0.031,15,0.551,19,0.223,20,0.024,21,0.024,22,0.893,24,1.266,25,2.048,30,2.301,33,2.497,35,2.428,36,1.912,37,1.912,39,1.887,40,2.048,41,2.048,42,0.522,44,2.093,45,2.304,48,1.912,49,0.58,194,2.304,376,3.807,458,2.558,630,3.301,631,3.301,632,3.947,633,3.301,634,3.429,635,3.429,636,3.947,637,3.947]],["title/injectables/TransactionsRestService.html",[50,0.334,634,1.685]],["body/injectables/TransactionsRestService.html",[3,0.188,4,0.188,5,0.126,7,0.493,12,0.701,13,0.032,15,0.364,19,0.156,20,0.019,21,0.019,42,0.366,49,0.406,50,0.414,51,0.887,56,1.168,65,1.37,69,1.446,71,1.568,72,1.568,73,1.333,85,1.467,86,1.483,87,2.367,90,3.092,93,2.034,121,1.63,141,1.042,142,1.483,145,2.047,146,2.047,152,2.367,159,2.047,194,3.214,204,3.214,460,2.016,464,2.315,465,2.919,474,2.315,476,2.657,477,4.605,479,3.299,480,2.427,484,3.299,485,3.299,599,2.874,629,2.016,634,2.091,638,4.605,639,3.945,640,3.945,641,3.945,642,3.945,643,2.767,644,3.945,645,5.011,646,2.767,647,3.945,648,2.767,649,2.767,650,3.945,651,2.767,652,3.945,653,2.767,654,2.767,655,5.011,656,3.945,657,3.945,658,3.945,659,3.945,660,3.945,661,3.945,662,3.945,663,3.945,664,3.945,665,2.767,666,2.767,667,2.767,668,2.767,669,2.767]],["title/injectables/TransactionsService.html",[50,0.334,635,1.685]],["body/injectables/TransactionsService.html",[3,0.24,4,0.161,5,0.108,7,0.422,8,0.687,12,0.715,13,0.032,15,0.388,19,0.134,20,0.017,21,0.017,42,0.314,49,0.348,50,0.37,51,0.76,54,1.868,55,2.131,56,1.043,57,3.231,65,1.224,66,1.383,67,2.131,69,1.475,71,1.544,72,1.544,73,1.313,86,1.473,87,2.358,88,1.903,93,1.349,98,1.727,106,2.034,119,0.968,120,0.968,121,1.755,123,1.327,129,1.868,132,0.823,133,1.383,141,0.892,142,1.473,143,2.726,144,2.23,145,2.034,146,2.034,147,1.868,148,3.497,149,2.639,151,2.057,152,2.268,153,2.726,157,2.726,158,2.455,159,2.034,175,2.283,176,1.44,177,2.283,180,3.045,181,2.283,183,1.383,184,1.536,198,1.536,203,1.727,205,1.982,238,1.257,244,1.383,322,1.982,357,1.982,441,1.727,476,1.868,480,1.707,532,2.947,542,2.947,629,4.131,635,1.868,670,1.982,671,3.524,672,3.524,673,3.524,674,3.524,675,3.524,676,3.524,677,3.524,678,2.37,679,2.37,680,3.524,681,2.37,682,5.55,683,3.524,684,2.37,685,3.524,686,2.37,687,3.524,688,2.37,689,3.524,690,4.206,691,3.524,692,3.524,693,3.524,694,3.524,695,3.524,696,3.524,697,3.524,698,2.37,699,3.524,700,2.37,701,2.947,702,3.524,703,2.37,704,2.37,705,2.37,706,2.37,707,2.37,708,2.37]],["title/coverage.html",[709,3.633]],["body/coverage.html",[0,1.551,1,2.474,5,0.174,6,3.193,12,0.505,13,0.031,17,2.229,20,0.023,21,0.023,34,2.024,50,0.672,52,3.193,67,1.56,68,1.849,106,1.56,121,1.13,137,2.229,176,1.56,208,5.41,219,1.696,237,3.193,287,2.024,290,3.193,374,2.474,378,1.696,390,3.193,393,3.193,400,2.024,403,3.193,453,2.229,454,2.229,459,3.193,460,3.575,465,2.024,490,3.193,536,2.474,569,3.193,597,3.193,600,3.193,601,3.193,602,3.193,608,3.193,627,3.193,628,3.193,634,2.024,635,2.024,638,3.193,670,3.193,709,3.193,710,3.818,711,3.818,712,3.818,713,3.818,714,3.818,715,5.724,716,5.423,717,3.818,718,5.423,719,3.818,720,3.818,721,3.818,722,5.724,723,5.423,724,3.818,725,3.818]],["title/dependencies.html",[25,1.562,726,2.216]],["body/dependencies.html",[13,0.031,20,0.027,21,0.027,25,1.984,42,0.642,132,1.687,229,3.538,263,4.062,264,4.062,607,3.538,727,4.856,728,4.856,729,4.856,730,4.856,731,4.856,732,4.856,733,4.856,734,4.856,735,4.856]],["title/index.html",[7,0.472,701,2.216,736,2.65]],["body/index.html",[5,0.124,13,0.032,15,0.566,19,0.22,20,0.018,21,0.018,22,0.694,34,2.414,39,1.024,40,1.592,42,0.515,48,1.317,49,0.572,50,0.409,57,1.442,65,0.945,68,2.205,83,3.259,88,1.592,90,2.274,106,1.592,121,1.153,123,1.024,132,0.945,141,2.123,147,2.066,163,2.525,175,1.763,194,1.588,195,1.982,217,1.763,223,1.763,228,1.982,233,1.982,238,2.066,239,2.839,244,2.902,245,2.275,256,1.982,270,1.763,287,2.414,298,2.275,303,2.275,306,2.275,348,3.833,369,2.525,378,1.731,400,2.414,408,2.275,438,1.982,458,1.763,480,2.652,592,3.259,599,1.982,634,2.066,635,1.442,737,4.911,738,5.043,739,2.72,740,2.72,741,2.72,742,2.72,743,3.897,744,2.72,745,2.72,746,2.72,747,2.72,748,3.897,749,2.72,750,2.72,751,3.897,752,2.72,753,2.72,754,3.897,755,2.72,756,2.72,757,2.72,758,2.72,759,3.897,760,3.897,761,2.72,762,4.553,763,2.72,764,2.72,765,2.72,766,2.72,767,2.72,768,2.72,769,2.72,770,4.972,771,2.72,772,2.72,773,2.72,774,2.72,775,2.72,776,2.72,777,2.72,778,2.72,779,2.72,780,2.72,781,2.72,782,2.72,783,2.72,784,2.72,785,2.72,786,2.72,787,2.72,788,2.72,789,2.72,790,3.897,791,2.72,792,2.72,793,2.72,794,2.72,795,2.72,796,2.72,797,2.72,798,2.72,799,4.553,800,5.475,801,2.72,802,2.72,803,2.72,804,2.72,805,2.72,806,2.72,807,2.72,808,2.72,809,2.72,810,2.72,811,2.72,812,2.72,813,2.72,814,2.72,815,2.72]],["title/modules.html",[24,1.393]],["body/modules.html",[13,0.026,20,0.026,21,0.026,23,2.686,24,1.475,30,1.732,31,2.439,32,2.439,33,1.88,282,2.686,369,2.981,376,2.686,381,2.686,816,6.345,817,6.345,818,6.345,819,6.51,820,5.898,821,5.898]],["title/overview.html",[822,3.633]],["body/overview.html",[2,1.469,13,0.031,20,0.021,21,0.021,23,3.701,24,1.06,25,1.823,26,2.765,27,2.765,28,2.765,29,2.765,30,2.278,31,3.396,32,3.086,33,2.378,34,3.155,35,2.161,36,1.601,37,1.601,51,1.06,68,2.882,282,3.579,283,2.765,285,2.765,286,2.765,287,3.155,376,3.678,381,3.473,396,2.765,398,2.765,399,2.765,400,3.155,449,2.765,450,2.765,452,2.765,453,3.473,454,3.473,564,2.765,565,2.765,566,2.765,630,2.765,631,2.765,633,2.765,634,3.155,635,3.155,822,2.765,823,3.306,824,3.306,825,3.306]],["title/properties.html",[8,0.746,726,2.216]],["body/properties.html",[8,0.919,13,0.031,20,0.027,21,0.027,53,2.498,163,3.054,238,2.498,244,3.262,737,4.983,738,3.941,826,4.713,827,4.713,828,4.713,829,4.713,830,4.713,831,4.713,832,4.713,833,4.713,834,4.713,835,4.713,836,4.713,837,4.713,838,4.713,839,4.713,840,4.713,841,4.713]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["0/12",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":788,"title":{},"body":{"index.html":{}}}],["1.0.2",{"_index":827,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":561,"title":{},"body":{"injectables/HtsService.html":{}}}],["100",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":662,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["11",{"_index":824,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":825,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":823,"title":{},"body":{"overview.html":{}}}],["9/10",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["account",{"_index":83,"title":{},"body":{"injectables/AccountsService.html":{},"index.html":{}}}],["account's",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":796,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":791,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"interfaces/AccountBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":90,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(6",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfo",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":43,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":383,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":23,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":34,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":749,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":549,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":550,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":540,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":563,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":560,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":336,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":304,"title":{},"body":{"injectables/HcsService.html":{}}}],["amount",{"_index":517,"title":{},"body":{"injectables/HtsService.html":{}}}],["apikey",{"_index":598,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["app.controller",{"_index":761,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":753,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":763,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":760,"title":{},"body":{"index.html":{}}}],["append",{"_index":404,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":409,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":751,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":762,"title":{},"body":{"index.html":{}}}],["array",{"_index":14,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":594,"title":{},"body":{"injectables/KeysService.html":{}}}],["associatetoken",{"_index":491,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":501,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":57,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":807,"title":{},"body":{"index.html":{}}}],["author",{"_index":841,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":621,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":821,"title":{},"body":{"modules.html":{}}}],["await",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":84,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["browse",{"_index":819,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":816,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":833,"title":{},"body":{"properties.html":{}}}],["call",{"_index":609,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":669,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":478,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":482,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":487,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":489,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":668,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":663,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":654,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":612,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":667,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":310,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":367,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":772,"title":{},"body":{"index.html":{}}}],["catch",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":480,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["choice",{"_index":259,"title":{},"body":{"injectables/ClientService.html":{}}}],["cid",{"_index":510,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":277,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":276,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":227,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":44,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":30,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":384,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":388,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":67,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":26,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":27,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":29,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":28,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":283,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":285,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":284,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":286,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":396,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":398,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":397,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":399,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":449,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":450,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":451,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":452,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":564,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":566,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":565,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":630,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":631,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":632,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":633,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":228,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":770,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":777,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":776,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":775,"title":{},"body":{"index.html":{}}}],["connect",{"_index":758,"title":{},"body":{"index.html":{}}}],["connection",{"_index":271,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(error",{"_index":800,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":789,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":811,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":810,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":799,"title":{},"body":{"index.html":{}}}],["const",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":65,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":66,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":242,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":464,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":411,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":420,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":709,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":270,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"index.html":{}}}],["create(key",{"_index":414,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":58,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":74,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":79,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":671,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":677,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":291,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":299,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":326,"title":{},"body":{"injectables/HcsService.html":{}}}],["decimals",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["decorators",{"_index":246,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":69,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":308,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":416,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":292,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":305,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":53,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"properties.html":{}}}],["dex",{"_index":830,"title":{},"body":{"properties.html":{}}}],["dissociatetoken",{"_index":492,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":503,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":351,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":222,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":264,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":314,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":614,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":781,"title":{},"body":{"index.html":{}}}],["execute",{"_index":344,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(this.clientservice.getclient",{"_index":546,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":354,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetches",{"_index":101,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":426,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":427,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":428,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":429,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":410,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":430,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":431,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":432,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":645,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":345,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":752,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":217,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":218,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":223,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":224,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":59,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":89,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":92,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":95,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(this.clientservice.getclient",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":340,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":317,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":591,"title":{},"body":{"injectables/KeysService.html":{}}}],["generated",{"_index":790,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":570,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":571,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":574,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":792,"title":{},"body":{"index.html":{}}}],["getallholders",{"_index":461,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":467,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":462,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":469,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":639,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":644,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":640,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":647,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":240,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":405,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":418,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":60,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":99,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":406,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfos(fileid",{"_index":421,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":706,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":61,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":103,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatesttransactions",{"_index":641,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":650,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":293,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":309,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":493,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":505,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":241,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":62,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":107,"title":{},"body":{"injectables/AccountsService.html":{}}}],["gets",{"_index":253,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":642,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":652,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":672,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":680,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":701,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":463,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":472,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionquery",{"_index":673,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":683,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":674,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":685,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":839,"title":{},"body":{"properties.html":{}}}],["given",{"_index":802,"title":{},"body":{"index.html":{}}}],["gives",{"_index":249,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":386,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":820,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":16,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["hbar",{"_index":11,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["hbar(amount",{"_index":551,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(maxtransactionfee",{"_index":437,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbars",{"_index":9,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["hcs",{"_index":298,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":289,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":380,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":808,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":282,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":287,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":619,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":244,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":840,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":375,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":835,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":764,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":785,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":783,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":784,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":782,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":786,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":750,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":747,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":369,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":765,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":773,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":219,"title":{"interfaces/HederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["hederaservice",{"_index":374,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":408,"title":{},"body":{"injectables/HfsService.html":{},"index.html":{}}}],["hfs.service",{"_index":402,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":382,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":381,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":400,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":481,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":483,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":831,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":737,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts",{"_index":457,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts.service",{"_index":456,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":31,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":453,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":454,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":606,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":834,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":832,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":768,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":610,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":98,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["if(filters",{"_index":666,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["if(key",{"_index":554,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(length",{"_index":593,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(memo",{"_index":552,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(publickeys",{"_index":586,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(this.mirrornode.apikey",{"_index":620,"title":{},"body":{"injectables/RestService.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":780,"title":{},"body":{"index.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":447,"title":{},"body":{"injectables/HfsService.html":{}}}],["inject",{"_index":235,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":265,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":50,"title":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":51,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":746,"title":{},"body":{"index.html":{}}}],["installation",{"_index":742,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{}},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"overview.html":{}}}],["invalid",{"_index":250,"title":{},"body":{"injectables/ClientService.html":{}}}],["isc",{"_index":837,"title":{},"body":{"properties.html":{}}}],["js",{"_index":739,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":809,"title":{},"body":{"index.html":{}}}],["key",{"_index":106,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":798,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":301,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":590,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":438,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["keys.service",{"_index":568,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":46,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":581,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":76,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":32,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":68,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":77,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":828,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":801,"title":{},"body":{"index.html":{}}}],["length",{"_index":575,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":836,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":315,"title":{},"body":{"injectables/HcsService.html":{}}}],["list.types",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":602,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["lodash",{"_index":475,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":486,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":55,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":255,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":328,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":394,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":425,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":525,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":579,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":615,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":689,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":256,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["matching",{"_index":21,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxtransactionfee",{"_index":412,"title":{},"body":{"injectables/HfsService.html":{}}}],["memo",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":311,"title":{},"body":{"injectables/HcsService.html":{}}}],["method",{"_index":754,"title":{},"body":{"index.html":{}}}],["methods",{"_index":56,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mintnfttoken",{"_index":494,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":508,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":759,"title":{},"body":{"index.html":{}}}],["mirror.types",{"_index":391,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["mirrornode",{"_index":378,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{},"index.html":{}}}],["module",{"_index":22,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":81,"title":{},"body":{"injectables/AccountsService.html":{}}}],["name",{"_index":72,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":592,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":757,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":738,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":607,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":229,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":263,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":238,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":485,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":656,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":659,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":658,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nftid",{"_index":533,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":543,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":544,"title":{},"body":{"injectables/HtsService.html":{}}}],["node",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["npm",{"_index":743,"title":{},"body":{"index.html":{}}}],["null",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":75,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/TokenBalance.html":{}}}],["number(amount",{"_index":562,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(response.tokendecimals?._map.get(tokenid",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(response.tokens._map.get(tokenid)?.tostring",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{}}}],["offline",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{}}}],["once",{"_index":779,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":262,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":247,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":176,"title":{"interfaces/Operator.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/Operator.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["operator.types",{"_index":392,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["operators",{"_index":239,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":221,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":236,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":234,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":755,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":343,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":822,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":726,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":756,"title":{},"body":{"index.html":{}}}],["pausekey",{"_index":513,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":495,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":512,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":88,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":813,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":797,"title":{},"body":{"index.html":{}}}],["privatekey.generate",{"_index":582,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":137,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":589,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":595,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":87,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":476,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve,reject",{"_index":548,"title":{},"body":{"injectables/HtsService.html":{}}}],["promise(resolve",{"_index":660,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":771,"title":{},"body":{"index.html":{}}}],["protected",{"_index":54,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":231,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":585,"title":{},"body":{"injectables/KeysService.html":{}}}],["provider",{"_index":373,"title":{},"body":{"modules/HederaModule.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":105,"title":{},"body":{"injectables/AccountsService.html":{}}}],["public.mirrornode.hedera.com",{"_index":769,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":580,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":584,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":596,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":588,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":578,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":587,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(this.clientservice.getclient",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":251,"title":{},"body":{"injectables/ClientService.html":{}}}],["receipt",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":707,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["reject",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":96,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":838,"title":{},"body":{"properties.html":{}}}],["request",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":441,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(balance",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":446,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":488,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":357,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":448,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":583,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":547,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(receipt",{"_index":542,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":443,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":346,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":360,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":479,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":626,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":708,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":368,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":558,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":664,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next.split",{"_index":657,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest.service",{"_index":458,"title":{},"body":{"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":460,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:10",{"_index":648,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:11",{"_index":473,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:24",{"_index":468,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:39",{"_index":646,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:5",{"_index":643,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:50",{"_index":471,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:6",{"_index":466,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:73",{"_index":651,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:86",{"_index":653,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":45,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":474,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":33,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":385,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":389,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":465,"title":{"injectables/RestService.html":{}},"body":{"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":20,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":86,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":745,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":702,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":690,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":703,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(this.clientservice.getclient",{"_index":705,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":682,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":691,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":692,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":740,"title":{},"body":{"index.html":{}}}],["sender",{"_index":555,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":506,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":434,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":444,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":698,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":697,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setinitialbalance(new",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkey(keyslength",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":433,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":358,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":545,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([new",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":704,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":699,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["settimeout(resolve",{"_index":661,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":538,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":355,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":696,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":744,"title":{},"body":{"index.html":{}}}],["sig",{"_index":82,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":349,"title":{},"body":{"injectables/HcsService.html":{}}}],["sign(key",{"_index":700,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{}}}],["signatures",{"_index":353,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":341,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":675,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":687,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(this.clientservice.getclient",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":352,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":80,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":829,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":102,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":52,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:166",{"_index":78,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:218",{"_index":94,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:246",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:273",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:30",{"_index":70,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:47",{"_index":100,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:77",{"_index":104,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:96",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":215,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:23",{"_index":225,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:9",{"_index":220,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":237,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:17",{"_index":254,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:22",{"_index":260,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:27",{"_index":261,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:32",{"_index":258,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:37",{"_index":243,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:61",{"_index":248,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:77",{"_index":252,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":288,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":290,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:125",{"_index":327,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:211",{"_index":307,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:252",{"_index":324,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:278",{"_index":321,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:28",{"_index":297,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:335",{"_index":316,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:47",{"_index":302,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":370,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:17",{"_index":371,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:46",{"_index":372,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":393,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:12",{"_index":395,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":401,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":403,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:106",{"_index":413,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:163",{"_index":424,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:231",{"_index":417,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:26",{"_index":407,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:281",{"_index":419,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:309",{"_index":422,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:45",{"_index":415,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":459,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":455,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":490,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:109",{"_index":511,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:131",{"_index":507,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:149",{"_index":516,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:194",{"_index":522,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:240",{"_index":519,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:25",{"_index":500,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:31",{"_index":502,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:53",{"_index":504,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:75",{"_index":514,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:92",{"_index":524,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":567,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":569,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:13",{"_index":573,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:24",{"_index":577,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:7",{"_index":572,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":603,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:10",{"_index":604,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:25",{"_index":605,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":608,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:18",{"_index":613,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:8",{"_index":616,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:9",{"_index":611,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":638,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":636,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":670,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:102",{"_index":681,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:20",{"_index":676,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:26",{"_index":684,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:41",{"_index":686,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:57",{"_index":688,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:80",{"_index":678,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/account_balance.types.ts",{"_index":6,"title":{},"body":{"interfaces/AccountBalance.html":{},"coverage.html":{}}}],["src/types/hedera_options.types.ts",{"_index":390,"title":{},"body":{"interfaces/HederaOptions.html":{},"coverage.html":{}}}],["src/types/mirror.types.ts",{"_index":597,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":600,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":601,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["src/types/token_balance.types.ts",{"_index":627,"title":{},"body":{"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["src/types/transaction_details.types.ts",{"_index":628,"title":{},"body":{"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["start",{"_index":313,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":736,"title":{"index.html":{}},"body":{}}],["statements",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":216,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":93,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":322,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":300,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":294,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":319,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":556,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":440,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(this.clientservice.getclient",{"_index":442,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":804,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":318,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":509,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":817,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":818,"title":{},"body":{"modules.html":{}}}],["table",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":257,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["then((response",{"_index":815,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":787,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":795,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":272,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":280,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":366,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.getclient",{"_index":273,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":275,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":805,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.mirrornode",{"_index":618,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":267,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":269,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":812,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":623,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":793,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(undefined",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":617,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":622,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":624,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":266,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":274,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":281,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":268,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":279,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":278,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":477,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":803,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":576,"title":{},"body":{"injectables/KeysService.html":{}}}],["timestamp",{"_index":649,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":97,"title":{},"body":{"injectables/AccountsService.html":{}}}],["token_balance.types",{"_index":18,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":526,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":17,"title":{"interfaces/TokenBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["tokendecimals",{"_index":521,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":530,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":91,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["tokenminttransaction",{"_index":527,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":535,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":534,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":528,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":10,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["tokens.push",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":529,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":303,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":329,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":331,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":306,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":806,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":295,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":323,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":335,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":356,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":334,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":333,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":332,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":330,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":347,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":625,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(this.clientservice.getclient",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(this.clientservice.getclient",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":337,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":363,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":435,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setkey(newkey",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":445,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":364,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":436,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setstarttime(start",{"_index":362,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":338,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":339,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":553,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":342,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":350,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":439,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":539,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":359,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":541,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":365,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{}}}],["transactiondetails",{"_index":536,"title":{"interfaces/TransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["transactionid",{"_index":629,"title":{},"body":{"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":532,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":693,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":694,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":695,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":655,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":637,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":665,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":377,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":376,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":634,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":635,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":679,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":559,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":496,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":515,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":497,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":518,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":498,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":520,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":531,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":387,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(this.clientservice.getclient",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":557,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":12,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/account_balance.types",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/hedera_options.types",{"_index":230,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/mirror.types",{"_index":379,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/operator.types",{"_index":226,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{}}}],["types/private",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/token_balance.types",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/transaction_details.types",{"_index":537,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":320,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":361,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":63,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpausetoken",{"_index":499,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":523,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":423,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":64,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":296,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":325,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":794,"title":{},"body":{"index.html":{}}}],["url",{"_index":599,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":778,"title":{},"body":{"index.html":{}}}],["use",{"_index":348,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":774,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":233,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":232,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":245,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":826,"title":{},"body":{"properties.html":{}}}],["void",{"_index":312,"title":{},"body":{"injectables/HcsService.html":{}}}],["walletid",{"_index":470,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["while(response.links.next",{"_index":484,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["workound",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{}}}],["wrapper",{"_index":741,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":748,"title":{},"body":{"index.html":{}}}],["yes",{"_index":85,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":814,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":766,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":767,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccountBalance.html":{"url":"interfaces/AccountBalance.html","title":"interface - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/account_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { TokenBalance } from \"./token_balance.types\";\n\nexport interface AccountBalance {\n  hbars: Hbar\n  tokens: Array  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService],\n  exports: [AccountsService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, keysThreshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:166\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:218\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:47\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:77\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:246\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:96\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:30\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountBalanceQuery,\n  AccountCreateTransaction,\n  AccountId,\n  AccountInfo,\n  AccountInfoQuery,\n  AccountUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenFreezeTransaction,\n  TokenId,\n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { TokenBalance } from '../../types/token_balance.types';\nimport { AccountBalance } from '../../types/account_balance.types';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) { }\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountInfoQuery()\n          .setAccountId(accountId);\n\n\n        /**\n         * Signing the transaction...\n         */\n        const accountInfo = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * resolving the account's info...\n         */\n        resolve(accountInfo);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetches Specific account public key\n   * @param {AccountId} accountId \n   * @returns {any} Account Public Key\n   */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new AccountUpdateTransaction()\n          /**\n          * setting single node accountId, as a workound for offline signature...\n          */\n          .setNodeAccountIds([new AccountId(6)])\n          .setAccountId(accountId);\n\n        /**\n         * If there is a memo...\n         */\n        if (memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        /**\n         * If there is a new key...\n         */\n        if (newKey) {\n          transaction.setKey(newKey);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Signing the transaction with the client operator...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Request the receipt of the transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction consensus status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Creates a single or multi-sig account\n   * @param {number} balance \n   * @param {number} keysLength \n   * @param {number} keysThreshold \n   * @returns {AccountId, PrivateKey} single or multi-sig account\n   */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    keysThreshold?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let key = null;\n\n        if (keysLength > 1) {\n          key = await this.keysService.generateKeyList(undefined, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountCreateTransaction()\n          .setKey(keysLength > 1 ? (key).keyList : (key).publicKey)\n          .setInitialBalance(new Hbar(balance));\n\n        /**\n         * Executing the transactions...\n         */\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * Fetching the receipt...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving the accountId...\n         */\n        resolve({\n          accountId: receipt.accountId,\n          key: key\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Freezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenFreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unfreezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenUnfreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * \n   * @param {string} accountId \n   * @param {string} tokenId \n   * @returns {AccountBalance}\n   */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(this.clientService.getClient());\n        let balance = null;\n\n        if (tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n\n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:37\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:61\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:77\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:17\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:37\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:32\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Operator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:22\n                        \n                    \n\n            \n                \n                    Single Operator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:27\n                        \n                    \n\n            \n                \n                    Array of Operators\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n\n/**\n * Injectable\n */\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n\n  /**\n   * Single Operator\n   */\n  private operator: Operator;\n\n  /**\n   * Array of Operators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet';\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {HederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n\n    /**\n     * Create our connection to the Hedera network...\n     */\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {Operator}\n   */\n  getNodeOperator(): Operator {\n    return this.operator;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                            \n                        \n\n                \n                    \n                            HCS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:47\n                \n            \n\n\n            \n                \n                    Create topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:211\n                \n            \n\n\n            \n                \n                    Delete topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:335\n                \n            \n\n\n            \n                \n                    Get topic message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Subscription Message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:278\n                \n            \n\n\n            \n                \n                    Submit Message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:252\n                \n            \n\n\n            \n                \n                    Get topic info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:125\n                \n            \n\n\n            \n                \n                    Update topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  /**\n   * HCS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {\n  }\n\n\n  /**\n   * Create topic\n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {TopicId}\n   */\n  createTopic(\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n\n        /**\n         * setting the admin key, if any...\n         */\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n\n        /**\n         * setting the submit key, if any...\n         */\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n\n        /**\n         * setting the topic memo, if any...\n         */\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n\n        /**\n         * if there is an admin key, transaction must be signed...\n         */\n        if (adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise, we can just execute it...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * finally, fetching the topicId from the response...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n\n  /**\n   * Update topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} currentAdminKey \n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {Status}\n   */\n  updateTopic(\n    topicId: TopicId,\n    currentAdminKey?: PrivateKey,\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n\n        /**\n         * setting the new admin key, if any...\n         */\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n\n        /**\n         * setting the new submit key, if any...\n         */\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n\n        /**\n         * setting the new topic memo, if any...\n         */\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * if the transaction has got an admin key, we must use it to sign...\n         */\n        if (currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n\n          /**\n           * if there is a new admin key, we must use it to double sign it...\n           */\n          if (adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n\n          /**\n           * executing the transaction, after signatures...\n           */\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise we can just sign the transaction...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * fetching the status of the executed transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Delete topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} adminKey \n   * @returns {Status}\n   */\n  deleteTopic(\n    topicId: TopicId,\n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction, and freezing it...\n         */\n        const transaction = new TopicDeleteTransaction()\n          .setTopicId(topicId)\n          .freezeWith(this.clientService.getClient());\n\n        /**\n         * signing the transaction with admin key...\n         */\n        const signTx = await transaction.sign(adminKey);\n\n        /**\n         * fetching response...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic info\n   * @param {TopicId} topicId \n   * @returns {TopicInfo}\n   */\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n        * creating the transaction for the query...\n        */\n        const transaction = new TopicInfoQuery().setTopicId(topicId);\n        const info = await transaction.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Submit Message\n   * @param {TopicId} topicId \n   * @param {string} message \n   * @param {PrivateKey} submitKey \n   * @returns {string} \n   */\n  submitMessage(\n    topicId: TopicId,\n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let txResponse = null;\n\n        /**\n         * creating the transaction, setting topic and message...\n         */\n        const transaction = new TopicMessageSubmitTransaction()\n          .setTopicId(topicId)\n          .setMessage(message);\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * if there is an submit key, transaction must be signed...\n         */\n        if (submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise, we can just execute it...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * finally, fetching the status...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic message\n   * @param {TopicId} topicId \n   * @param {any} callback \n   * @param {number} start \n   * @param {number} end \n   * @param {number} limit \n   * @returns {any} Subscription Message\n   */\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicMessageQuery()\n          .setTopicId(topicId);\n\n        if (start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if (end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if (limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(),\n          null,\n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { HederaOptions } from '../types/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HederaOptions.html":{"url":"interfaces/HederaOptions.html","title":"interface - HederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/hedera_options.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         MirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MirrorNode } from \"./mirror.types\";\nimport { Operator } from \"./operator.types\";\n\nexport interface HederaOptions {\n  operators: Array\n  mirrorNode: MirrorNode\n  network: 'mainnet' | 'testnet'\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:12\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HederaService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:26\n                            \n                        \n\n                \n                    \n                            HFS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:106\n                \n            \n\n\n            \n                \n                    Append File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:45\n                \n            \n\n\n            \n                \n                    Create File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:231\n                \n            \n\n\n            \n                \n                    Delete File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:281\n                \n            \n\n\n            \n                \n                    Get contents\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:309\n                \n            \n\n\n            \n                \n                    Get Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:163\n                \n            \n\n\n            \n                \n                    Update File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:26\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  FileAppendTransaction,\n  FileContentsQuery,\n  FileCreateTransaction,\n  FileDeleteTransaction,\n  FileId,\n  FileInfo,\n  FileInfoQuery,\n  FileUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HfsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n\n  /**\n   * HFS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Create File\n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {FileId} \n   */\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if (memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // \n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the file ID...\n         */\n        resolve(receipt.fileId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Append File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {number} maxTransactionFee \n   * @returns {Status}\n   */\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update File\n   * @param {FileId} fileId \n   * @param {string} content \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if (memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        if (newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get contents\n   * @param {FileId} fileId \n   * @returns {string}\n   */\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new FileContentsQuery()\n          .setFileId(fileId);\n\n        /**\n         * Signing the transaction...\n         */\n        const contents = await transaction.execute(this.clientService.getClient());\n        resolve(contents.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get Info\n   * @param {FileId} fileId \n   * @returns {FileInfo}\n   */\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new FileInfoQuery()\n          .setFileId(fileId);\n\n        /**\n         * Signing the transaction...\n         */\n        const infos = await transaction.execute(this.clientService.getClient());\n        resolve(infos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n@Injectable()\nexport class HtsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, supplyKey: PrivateKey, CID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId, from: AccountId, to: AccountId, amount: number, tokenDecimals: number, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { \n  AccountId, \n  Hbar, \n  PrivateKey, \n  Status, \n  TokenAssociateTransaction, \n  TokenId, \n  TokenMintTransaction, \n  TokenPauseTransaction, \n  TokenUnpauseTransaction, \n  TokenDissociateTransaction,\n  Transaction, \n  TransferTransaction, \n  TransactionReceipt, \n  NftId, \n  TokenNftInfoQuery, \n  TokenNftInfo \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { TransactionDetails } from '../../types/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HtsService {\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async dissociateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenDissociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async pauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenPauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenUnpauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async mintNftToken(\n    tokenId: TokenId,\n    supplyKey: PrivateKey,\n    CID: string\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenMintTransaction()\n        .setTokenId(tokenId)\n        .addMetadata(Buffer.from(CID))\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n        .setNftId(nftId)\n        .execute(this.clientService.getClient());\n\n        resolve(nftInfos);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount))\n          .addHbarTransfer(to, new Hbar(amount));\n\n        if(memo) {\n          transaction.setTransactionMemo(memo);\n        }\n          \n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,    \n    amount: number,\n    tokenDecimals: number,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addTokenTransfer(tokenId, from, Number(-amount  * (10 ** tokenDecimals)))\n          .addTokenTransfer(tokenId, to, Number(amount  * (10 ** tokenDecimals)));\n\n          if(memo) {\n            transaction.setTransactionMemo(memo);\n          }\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class KeysService {\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n  constructor() {\n    // KeyService Class\n  }\n\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n  url: string\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n  accountId: string\n  privateKey: string\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\nexport interface PrivateKeyList {\n  privateKeys: PrivateKey[]\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Injectable()\nexport class RestService {\n  private mirrorNode: MirrorNode;\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenBalance.html":{"url":"interfaces/TokenBalance.html","title":"interface - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/token_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenBalance {\n  tokenId: string\n  balance: number\n  decimals: number  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionDetails.html":{"url":"interfaces/TransactionDetails.html","title":"interface - TransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/transaction_details.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\nexport interface TransactionDetails {\n  status: Status\n  transaction_id: TransactionId\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n@Injectable()\nexport class TransactionsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string):  Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if(filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n        .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`schedules/${transactionId}`);\n        \n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { \n  PrivateKey, \n  ScheduleCreateTransaction, \n  ScheduleId, \n  ScheduleInfoQuery, \n  ScheduleSignTransaction, \n  Status, \n  Transaction, \n  TransactionId, \n  TransactionReceipt, \n  TransactionReceiptQuery,\n  TransactionRecordQuery, \n  TransactionResponse \n} from '@hashgraph/sdk';\n\n@Injectable()\nexport class TransactionsService {\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionRecordQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error: any) {\n        reject(error);\n      }\n    });\n  }  \n\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionReceiptQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true)\n        .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n            .setScheduleId(scheduleId)\n            .freezeWith(this.clientService.getClient())\n            .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating a schedule transaction...\n        let  scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n            .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(this.clientService.getClient());\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/types/account_balance.types.ts\n            \n            interface\n            AccountBalance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/hedera_options.types.ts\n            \n            interface\n            HederaOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/token_balance.types.ts\n            \n            interface\n            TokenBalance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/transaction_details.types.ts\n            \n            interface\n            TransactionDetails\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install hsuite-nestjs-hederainstead, if you use yarn:\nyarn add hsuite-nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from 'hsuite-nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from 'hsuite-nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from 'hsuite-nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from 'hsuite-nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from 'hsuite-nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from 'hsuite-nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.2\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
