var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccountBalance.html",[0,0.8,1,2.059]],["body/interfaces/AccountBalance.html",[0,1.152,1,3.559,2,2.033,3,0.311,4,0.311,5,0.208,6,3.827,7,0.815,8,1.071,9,5.104,10,5.104,11,3.954,12,0.726,13,0.031,14,3.435,15,0.506,16,4.576,17,2.671,18,4.576,19,0.259,20,0.026,21,0.026]],["title/modules/AccountsModule.html",[22,0.566,23,1.855]],["body/modules/AccountsModule.html",[3,0.262,4,0.262,5,0.175,13,0.032,15,0.56,19,0.218,20,0.023,21,0.023,22,0.879,23,3.808,24,1.234,25,2.015,26,3.218,27,3.218,28,3.218,29,3.218,30,2.286,31,3.219,32,3.219,33,2.481,34,3.417,35,2.388,36,1.864,37,1.864,38,3.848,39,1.857,40,2.015,41,2.015,42,0.509,43,3.848,44,2.04,45,2.246,46,3.218,47,3.218,48,1.864,49,0.565]],["title/injectables/AccountsService.html",[34,1.685,50,0.334]],["body/injectables/AccountsService.html",[1,1.39,3,0.222,4,0.086,5,0.058,7,0.226,8,0.418,9,1.794,10,2.734,11,0.824,12,0.61,13,0.032,14,0.742,15,0.389,17,0.742,19,0.072,20,0.01,21,0.01,34,1.137,42,0.168,49,0.187,50,0.225,51,0.408,52,1.063,53,1.236,54,1.81,55,0.635,56,2.925,57,2.783,58,2.146,59,2.146,60,2.146,61,2.146,62,2.146,63,2.783,64,1.136,65,0.742,66,1.81,67,2.233,68,1.259,69,2.146,70,1.311,71,1.311,72,1.115,73,1.271,74,2.663,75,3.652,76,3.652,77,1.271,78,2.146,79,3.054,80,3.269,81,3.269,82,4.614,83,3.705,84,1.733,85,1.546,86,2.134,87,2.004,88,2.146,89,3.619,90,3.805,91,4.43,92,1.804,93,1.271,94,2.146,95,3.269,96,3.269,97,2.382,98,2.146,99,1.271,100,3.269,101,3.269,102,2.146,103,1.271,104,3.269,105,2.004,106,2.146,107,1.271,108,2.146,109,1.271,110,2.146,111,1.271,112,2.734,113,2.734,114,2.366,115,1.271,116,2.146,117,1.563,118,0.519,119,0.519,120,1.614,121,2.146,122,1.231,123,2.146,124,2.146,125,3.269,126,2.146,127,2.146,128,2.235,129,2.146,130,2.146,131,0.442,132,0.742,133,1.271,134,1.271,135,1.271,136,0.742,137,1.063,138,1.063,139,4.662,140,0.808,141,1.248,142,1.452,143,1.492,144,1.722,145,1.476,146,2.994,147,2.956,148,3.054,149,1.625,150,2.299,151,1.39,152,1.563,153,1.271,154,1.271,155,1.618,156,1.722,157,1.271,158,1.271,159,1.794,160,1.063,161,0.824,162,1.271,163,1.271,164,1.271,165,1.271,166,1.271,167,0.926,168,1.271,169,1.794,170,1.271,171,0.824,172,2.119,173,1.063,174,1.063,175,0.824,176,0.519,177,2.119,178,1.804,179,1.271,180,2.312,181,2.119,182,1.063,183,0.742,184,1.39,185,1.271,186,1.794,187,1.271,188,1.271,189,1.271,190,1.271,191,1.271,192,1.271,193,1.271,194,0.926,195,0.742,196,0.926,197,1.908,198,1.271,199,1.794,200,1.39,201,2.146,202,1.794,203,1.563,204,2.146,205,0.926,206,1.063,207,0.742,208,1.063,209,1.271,210,3.269,211,2.146,212,2.734,213,1.794,214,2.146,215,2.146,216,1.271,217,1.271,218,1.271,219,0.926,220,0.824]],["title/modules/ClientModule.html",[22,0.566,30,1.196]],["body/modules/ClientModule.html",[3,0.257,4,0.257,5,0.172,12,0.645,13,0.032,15,0.544,19,0.214,20,0.023,21,0.023,22,1.015,24,1.211,30,2.146,39,1.835,40,1.543,41,1.991,42,0.5,49,0.555,55,1.118,66,2.411,68,1.331,70,1.442,71,1.442,72,1.227,85,1.442,141,1.442,176,1.543,221,3.777,222,4.153,223,2.448,224,3.55,225,2.684,226,3.777,227,3.931,228,4.299,229,2.448,230,3.55,231,3.777,232,2.752,233,3.777,234,3.55,235,2.752,236,2.205,237,4.076,238,3.159,239,2.752,240,3.159,241,2.448,242,3.159]],["title/injectables/ClientService.html",[50,0.334,66,1.298]],["body/injectables/ClientService.html",[3,0.183,4,0.183,5,0.122,7,0.478,8,0.753,12,0.721,13,0.032,14,2.885,15,0.483,19,0.152,20,0.018,21,0.018,42,0.355,49,0.394,50,0.405,51,0.861,54,2.348,55,1.143,64,1.341,66,1.577,68,1.569,70,0.795,71,0.795,72,0.676,79,3.229,85,1.463,118,1.097,119,1.097,120,1.143,122,1.861,131,0.933,139,2.246,140,2.356,141,1.143,161,3.203,175,3.938,176,2.556,220,2.502,225,2.553,232,1.956,236,1.567,241,1.74,243,2.246,244,3.047,245,3.814,246,4.942,247,4.942,248,2.246,249,3.861,250,2.638,251,3.229,252,2.685,253,3.861,254,2.685,255,3.861,256,3.861,257,4.942,258,2.685,259,3.861,260,2.685,261,3.861,262,2.813,263,3.78,264,2.685,265,3.861,266,2.685,267,2.685,268,2.685,269,2.246,270,2.246,271,2.246,272,3.861,273,2.685,274,2.685,275,2.685,276,1.74,277,2.685,278,4.942,279,2.685,280,4.52,281,2.685,282,2.685,283,2.685,284,2.685,285,2.685,286,2.685,287,2.685,288,2.685,289,2.685]],["title/modules/HcsModule.html",[22,0.566,290,1.855]],["body/modules/HcsModule.html",[3,0.279,4,0.279,5,0.186,13,0.031,15,0.541,19,0.232,20,0.024,21,0.024,22,0.914,24,1.314,25,2.097,30,2.323,33,2.521,35,2.485,36,1.984,37,1.984,39,1.932,40,2.097,41,2.097,42,0.542,44,2.172,45,2.391,48,1.984,49,0.602,290,3.776,291,3.427,292,4.097,293,3.427,294,3.427,295,3.446,296,4.097,297,4.097]],["title/injectables/HcsService.html",[50,0.334,295,1.685]],["body/injectables/HcsService.html",[3,0.214,4,0.103,5,0.069,7,0.27,8,0.484,12,0.63,13,0.032,15,0.291,19,0.086,20,0.012,21,0.012,42,0.2,49,0.222,50,0.261,51,0.486,53,1.401,54,1.766,55,0.735,64,0.862,65,0.884,66,1.766,68,1.301,70,1.351,71,1.351,72,1.149,74,2.614,84,2.755,85,1.279,86,2.167,87,2.298,92,1.581,105,2.298,114,3.288,117,1.104,118,0.619,119,0.619,120,1.699,122,1.187,128,1.933,131,0.526,132,0.884,140,0.57,141,1.279,143,1.766,144,1.766,145,2.133,146,3.431,147,2.946,149,0.884,150,2.323,151,2.363,152,1.104,156,1.766,160,3.817,171,2.043,172,2.607,177,3.288,178,2.363,180,2.128,181,2.363,183,1.449,184,2.363,194,1.104,196,2.656,197,2.523,200,0.982,205,3.149,207,1.449,219,3.149,220,2.801,276,0.982,295,1.316,298,1.267,299,3.153,300,3.153,301,3.153,302,3.153,303,3.646,304,3.153,305,2.482,306,1.515,307,5.197,308,3.325,309,1.515,310,5.074,311,1.515,312,5.078,313,1.515,314,1.515,315,3.153,316,4.931,317,2.482,318,3.153,319,3.153,320,3.153,321,1.515,322,1.515,323,1.515,324,3.153,325,1.515,326,1.515,327,1.515,328,1.515,329,3.153,330,1.515,331,2.482,332,2.482,333,1.515,334,2.482,335,2.482,336,2.482,337,1.515,338,1.515,339,1.267,340,3.984,341,4.322,342,2.482,343,3.05,344,2.482,345,2.482,346,3.646,347,2.482,348,2.482,349,2.482,350,2.637,351,2.482,352,2.482,353,1.515,354,1.515,355,1.808,356,3.153,357,1.515,358,1.515,359,1.515,360,1.515,361,1.515,362,1.515,363,1.267,364,3.153,365,1.515,366,1.267,367,1.515,368,1.515,369,1.515,370,1.515,371,1.515,372,3.153,373,1.515,374,1.515,375,1.515,376,1.515,377,1.515,378,1.515,379,1.515,380,1.515,381,1.515,382,1.515]],["title/modules/HederaModule.html",[22,0.566,383,2.059]],["body/modules/HederaModule.html",[3,0.223,4,0.223,5,0.149,12,0.586,13,0.032,15,0.584,19,0.185,20,0.021,21,0.021,22,0.96,23,3.286,24,1.05,30,1.232,31,2.985,32,2.985,33,1.337,39,1.669,40,1.811,41,1.811,42,0.433,44,1.735,45,1.911,46,2.738,47,2.738,49,0.481,55,0.969,68,1.211,70,1.312,71,1.312,72,1.116,85,1.312,141,1.312,176,1.337,222,3.925,223,2.121,224,3.23,225,2.393,227,3.23,228,4.102,229,2.121,230,3.23,232,2.385,236,1.911,290,3.286,383,3.491,384,3.273,385,3.273,386,3.273,387,3.273,388,3.648,389,3.273,390,3.286,391,3.273,392,1.454,393,2.385,394,3.273,395,3.286,396,3.273,397,3.273,398,4.433,399,4.433,400,4.433,401,4.433,402,4.433,403,4.433]],["title/interfaces/HederaOptions.html",[0,0.8,225,1.411]],["body/interfaces/HederaOptions.html",[0,1.106,2,1.951,3,0.299,4,0.299,5,0.2,7,0.782,8,1.045,12,0.765,13,0.031,14,3.374,15,0.494,19,0.248,20,0.025,21,0.025,176,1.795,225,2.38,244,3.191,245,4.385,262,4.211,263,4.835,392,2.849,404,3.674,405,4.393,406,4.393]],["title/injectables/HederaService.html",[50,0.334,388,2.059]],["body/injectables/HederaService.html",[3,0.31,4,0.31,5,0.208,7,0.813,8,1.069,12,0.604,13,0.031,15,0.421,19,0.258,20,0.026,21,0.026,42,0.604,49,0.67,50,0.576,51,1.463,53,2.611,54,2.588,68,1.246,118,1.864,119,1.864,120,1.623,122,2.064,388,3.553,407,3.816,408,5.483,409,4.563]],["title/modules/HfsModule.html",[22,0.566,395,1.855]],["body/modules/HfsModule.html",[3,0.288,4,0.288,5,0.193,13,0.031,15,0.524,19,0.239,20,0.025,21,0.025,22,0.933,24,1.358,25,2.14,30,2.342,35,2.537,36,2.051,37,2.051,39,1.972,40,2.14,41,2.14,42,0.56,44,2.245,48,2.051,49,0.622,395,3.749,410,3.541,411,4.234,412,3.541,413,3.541,414,3.461,415,4.234,416,4.234]],["title/injectables/HfsService.html",[50,0.334,414,1.685]],["body/injectables/HfsService.html",[3,0.116,4,0.116,5,0.195,7,0.304,8,0.533,11,1.105,12,0.659,13,0.032,15,0.315,19,0.096,20,0.013,21,0.013,42,0.226,49,0.25,50,0.287,51,0.547,53,1.518,54,1.865,55,0.809,56,3.116,64,0.949,65,0.995,66,1.865,68,1.36,70,1.419,71,1.419,72,1.206,74,2.907,84,2.541,85,1.351,86,2.24,87,2.359,92,1.832,97,1.242,105,2.035,112,2.858,113,2.858,114,2.957,117,2.49,118,0.697,119,0.697,120,1.671,122,1.029,128,2.072,131,0.592,132,0.995,140,1.472,141,1.351,142,2.027,143,1.865,144,1.865,145,2.42,146,3.523,147,3.14,149,2.664,150,2.42,151,1.77,155,1.865,156,1.865,167,1.99,169,2.285,171,2.533,172,2.771,173,1.426,174,1.426,178,2.533,180,2.908,183,1.995,194,2.847,276,2.215,363,2.858,414,1.448,417,1.426,418,3.418,419,3.418,420,3.418,421,2.732,422,1.705,423,6.15,424,5.138,425,5.483,426,1.705,427,1.705,428,1.705,429,1.705,430,1.705,431,1.705,432,1.705,433,1.705,434,1.705,435,1.705,436,1.705,437,2.732,438,2.732,439,2.732,440,2.732,441,2.732,442,1.705,443,2.732,444,2.732,445,1.705,446,3.418,447,2.732,448,3.909,449,3.909,450,3.909,451,2.49,452,2.858,453,3.909,454,2.847,455,3.909,456,1.705,457,4.277,458,1.705,459,1.705,460,1.705,461,1.705,462,1.705]],["title/modules/HtsModule.html",[22,0.566,31,1.685]],["body/modules/HtsModule.html",[3,0.26,4,0.26,5,0.174,13,0.031,15,0.546,19,0.217,20,0.023,21,0.023,22,0.876,24,1.228,25,2.009,30,2.376,31,3.468,33,2.478,35,2.381,36,1.855,37,1.855,39,1.851,40,2.009,41,2.009,42,0.507,44,2.03,45,2.235,48,1.855,49,0.562,463,3.203,464,3.203,465,3.83,466,3.203,467,3.759,468,3.759,469,3.83,470,3.83,471,3.83,472,2.482]],["title/injectables/HtsRestService.html",[50,0.334,467,1.855]],["body/injectables/HtsRestService.html",[3,0.207,4,0.207,5,0.138,7,0.542,12,0.691,13,0.032,15,0.446,19,0.172,20,0.02,21,0.02,42,0.403,49,0.447,50,0.443,51,0.976,55,1.248,64,1.465,68,1.427,70,1.546,71,1.546,72,1.315,85,1.432,86,2.32,90,3.136,92,1.993,120,1.432,140,1.146,141,1.432,142,2.15,143,1.977,144,1.977,150,2.242,155,1.977,156,1.977,186,3.527,207,3.203,467,2.462,473,4.589,474,2.217,475,4.217,476,4.217,477,4.217,478,2.545,479,3.01,480,3.043,481,4.217,482,3.043,483,4.217,484,4.84,485,3.043,486,4.217,487,3.043,488,2.545,489,4.217,490,4.589,491,3.043,492,2.545,493,5.677,494,3.043,495,5.225,496,3.527,497,3.527,498,4.217,499,4.217,500,4.217,501,3.043]],["title/injectables/HtsService.html",[50,0.334,468,1.855]],["body/injectables/HtsService.html",[3,0.092,4,0.092,5,0.061,7,0.241,8,0.441,11,1.464,12,0.663,13,0.032,15,0.313,19,0.076,20,0.011,21,0.011,42,0.179,49,0.199,50,0.237,51,0.433,53,1.293,54,1.67,55,0.669,56,3.162,64,0.785,65,0.789,66,1.67,68,1.368,70,1.443,71,1.443,72,1.227,74,2.901,84,2.005,85,1.398,86,2.287,87,2.412,89,3.513,90,4.046,92,1.515,105,2.287,114,2.649,118,0.552,119,0.552,120,1.726,122,0.85,128,2.3,131,0.47,132,0.789,140,0.509,141,1.398,142,1.816,143,1.67,144,1.93,145,1.543,146,3.425,147,3.162,148,1.889,149,1.698,150,2.459,152,2.12,155,1.93,156,1.93,159,2.434,167,1.646,171,1.886,172,2.947,177,2.947,178,2.947,180,2.924,181,2.947,182,2.434,183,1.984,197,1.698,199,2.434,200,2.45,202,2.434,203,2.12,244,1.543,250,1.698,452,3.162,454,2.12,468,1.319,502,1.131,503,2.91,504,2.91,505,2.91,506,2.91,507,2.259,508,2.91,509,2.91,510,2.91,511,2.259,512,2.259,513,1.352,514,1.352,515,1.352,516,1.352,517,1.352,518,4.547,519,1.352,520,1.352,521,2.91,522,2.91,523,1.352,524,2.259,525,4.087,526,1.352,527,1.352,528,1.352,529,4.338,530,1.352,531,1.352,532,1.352,533,3.781,534,1.352,535,2.259,536,1.352,537,2.259,538,2.259,539,2.259,540,2.259,541,2.259,542,2.259,543,3.4,544,1.131,545,2.259,546,2.259,547,1.352,548,0.876,549,1.352,550,2.259,551,2.259,552,1.352,553,1.352,554,1.131,555,2.259,556,1.352,557,1.352,558,1.352,559,1.352,560,1.352,561,1.352,562,1.352,563,2.259,564,2.91,565,2.91,566,2.91,567,2.91,568,2.91,569,2.259,570,2.259,571,2.259,572,1.352,573,1.352]],["title/modules/KeysModule.html",[22,0.566,32,1.685]],["body/modules/KeysModule.html",[3,0.3,4,0.3,5,0.201,13,0.031,15,0.495,19,0.25,20,0.026,21,0.026,22,0.958,24,1.416,25,2.196,32,3.373,35,2.603,36,2.139,37,2.139,39,2.024,41,2.196,42,0.584,48,2.139,49,0.649,67,3.178,574,3.693,575,3.693,576,3.693,577,4.416,578,4.416]],["title/injectables/KeysService.html",[50,0.334,67,1.539]],["body/injectables/KeysService.html",[3,0.207,4,0.207,5,0.139,7,0.543,8,0.823,12,0.559,13,0.032,14,1.78,15,0.447,19,0.172,20,0.02,21,0.02,42,0.403,49,0.62,50,0.443,51,0.978,53,2.152,54,2.321,55,1.25,64,1.683,67,2.045,68,1.428,70,0.902,71,0.902,72,0.767,74,3.012,84,2.568,85,1.25,86,2.136,87,1.246,92,1.553,105,1.979,118,1.246,119,1.246,120,1.724,122,1.59,131,1.059,136,1.78,137,2.55,138,2.55,141,1.25,142,1.876,143,1.725,144,1.725,147,1.616,150,1.246,155,1.725,156,1.725,184,2.736,197,2.828,308,4,350,2.55,355,2.221,451,3.076,579,2.55,580,5.229,581,4.844,582,4.223,583,3.049,584,3.049,585,4.844,586,5.824,587,3.049,588,4.223,589,4.223,590,2.55,591,3.049,592,4.223,593,3.049,594,3.049,595,3.049,596,3.049,597,3.049,598,3.049,599,4.592,600,4.223,601,3.049,602,2.55,603,3.049,604,3.049,605,3.049,606,3.049]],["title/interfaces/MirrorNode.html",[0,0.8,392,1.411]],["body/interfaces/MirrorNode.html",[0,1.178,2,2.079,3,0.318,4,0.318,5,0.213,7,0.834,8,1.085,12,0.736,13,0.03,19,0.265,20,0.026,21,0.026,72,1.401,92,2.042,392,2.472,607,3.914,608,6.148,609,4.479]],["title/interfaces/Operator.html",[0,0.8,176,1.298]],["body/interfaces/Operator.html",[0,1.149,2,2.027,3,0.31,4,0.31,5,0.208,7,0.813,8,1.069,12,0.777,13,0.03,19,0.258,20,0.026,21,0.026,72,1.38,87,2.491,89,3.559,92,2.085,176,2.24,590,5.099,610,3.816]],["title/interfaces/PrivateKeyList.html",[0,0.8,136,1.855]],["body/interfaces/PrivateKeyList.html",[0,1.158,2,2.044,3,0.313,4,0.313,5,0.209,7,0.82,8,1.075,12,0.729,13,0.031,15,0.424,19,0.26,20,0.026,21,0.026,87,2.498,105,1.88,131,1.598,136,3.216,308,4.712,599,5.113,611,3.848,612,3.848]],["title/modules/RestModule.html",[22,0.566,33,1.298]],["body/modules/RestModule.html",[3,0.252,4,0.252,5,0.169,12,0.637,13,0.032,15,0.554,19,0.21,20,0.023,21,0.023,22,1.008,24,1.189,33,2.313,39,1.813,40,1.968,41,1.968,42,0.491,49,0.545,55,1.098,68,1.315,70,1.425,71,1.425,72,1.212,85,1.425,141,1.425,222,4.124,223,2.403,224,3.509,225,2.671,227,3.896,228,4.274,229,2.403,230,3.509,234,3.509,235,2.702,236,2.165,237,4.028,238,3.102,239,2.702,240,3.102,241,2.403,242,3.102,392,1.648,393,2.702,472,2.403,479,3.111,613,3.709,614,3.709,615,3.709,616,5.348,617,2.702]],["title/injectables/RestService.html",[50,0.334,479,1.685]],["body/injectables/RestService.html",[3,0.232,4,0.232,5,0.155,7,0.607,8,0.888,12,0.725,13,0.032,15,0.505,19,0.193,20,0.022,21,0.022,42,0.451,49,0.501,50,0.478,51,1.093,53,2.279,54,2.4,55,1.348,56,2.72,64,1.583,68,1.496,70,1.348,71,1.348,72,1.147,85,1.009,86,1.861,92,1.645,118,1.393,119,1.393,120,1.519,122,1.715,140,2.149,141,1.009,142,1.514,143,1.393,144,1.393,150,1.393,155,1.393,156,1.393,195,2.659,207,1.99,225,2.609,236,1.99,241,2.209,248,2.851,271,2.851,392,2.609,393,2.484,479,2.415,617,2.484,618,2.851,619,4.556,620,5.997,621,4.556,622,4.556,623,3.409,624,3.409,625,4.556,626,3.409,627,3.409,628,3.409,629,5.477,630,3.409,631,3.409,632,3.409,633,3.409,634,3.409,635,3.409,636,3.409]],["title/interfaces/TokenBalance.html",[0,0.8,17,1.855]],["body/interfaces/TokenBalance.html",[0,1.155,2,2.038,3,0.312,4,0.312,5,0.209,7,0.817,8,1.073,12,0.779,13,0.03,17,3.211,19,0.259,20,0.026,21,0.026,74,3.362,83,5.108,90,3.958,92,1.889,213,5.108,637,3.838]],["title/interfaces/TransactionDetails.html",[0,0.8,548,2.059]],["body/interfaces/TransactionDetails.html",[0,1.165,2,2.056,3,0.315,4,0.315,5,0.211,7,0.824,8,1.078,12,0.731,13,0.031,15,0.427,19,0.262,20,0.026,21,0.026,128,3.432,131,1.607,203,4.462,548,3.583,638,3.87,639,4.462]],["title/modules/TransactionsModule.html",[22,0.566,390,1.855]],["body/modules/TransactionsModule.html",[3,0.264,4,0.264,5,0.177,13,0.031,15,0.549,19,0.22,20,0.024,21,0.024,22,0.884,24,1.245,25,2.027,30,2.292,33,2.487,35,2.403,36,1.881,37,1.881,39,1.868,40,2.027,41,2.027,42,0.514,44,2.059,45,2.267,48,1.881,49,0.57,195,2.267,390,3.799,472,2.517,640,3.248,641,3.248,642,3.884,643,3.248,644,3.421,645,3.421,646,3.884,647,3.884]],["title/injectables/TransactionsRestService.html",[50,0.334,644,1.685]],["body/injectables/TransactionsRestService.html",[3,0.183,4,0.183,5,0.122,7,0.478,12,0.693,13,0.032,15,0.356,19,0.152,20,0.018,21,0.018,42,0.355,49,0.394,50,0.405,51,0.861,55,1.143,64,1.341,68,1.43,70,1.55,71,1.55,72,1.318,84,1.424,85,1.463,86,2.348,89,3.056,92,2.026,120,1.613,140,1.011,141,1.463,142,2.195,143,2.019,144,2.019,150,2.348,155,2.019,156,2.019,195,3.182,207,3.182,474,1.956,478,2.246,479,2.89,488,2.246,490,4.559,492,3.229,496,3.229,497,3.229,609,2.813,639,1.956,644,2.047,648,4.559,649,3.861,650,3.861,651,3.861,652,3.861,653,2.685,654,3.861,655,4.942,656,2.685,657,3.861,658,2.685,659,2.685,660,3.861,661,2.685,662,3.861,663,2.685,664,2.685,665,4.942,666,3.861,667,3.861,668,3.861,669,3.861,670,3.861,671,3.861,672,3.861,673,3.861,674,3.861,675,2.685,676,2.685,677,2.685,678,2.685,679,2.685]],["title/injectables/TransactionsService.html",[50,0.334,645,1.685]],["body/injectables/TransactionsService.html",[3,0.233,4,0.156,5,0.104,7,0.408,8,0.67,12,0.706,13,0.032,15,0.38,19,0.129,20,0.016,21,0.016,42,0.303,49,0.336,50,0.361,51,0.734,53,1.83,54,2.104,55,1.016,56,3.212,64,1.193,65,1.336,66,2.104,68,1.458,70,1.524,71,1.524,72,1.296,85,1.452,86,2.338,87,1.87,92,1.321,97,1.668,105,2.004,118,0.935,119,0.935,120,1.742,122,1.293,128,1.82,131,0.795,132,1.336,140,0.862,141,1.452,142,1.525,143,2.004,144,2.004,145,1.82,146,3.473,147,2.6,149,2.004,150,2.244,151,2.67,155,1.403,156,2.004,175,2.225,176,1.403,177,2.225,180,3.006,181,2.225,183,1.336,184,1.483,197,2.405,200,1.483,205,3.002,206,1.914,208,1.914,219,3.002,220,2.67,244,1.214,250,1.336,343,1.914,366,1.914,454,1.668,544,2.872,554,2.872,639,4.093,645,1.82,680,1.914,681,3.433,682,3.433,683,3.433,684,3.433,685,3.433,686,3.433,687,3.433,688,2.289,689,2.289,690,3.433,691,2.289,692,5.493,693,3.433,694,2.289,695,3.433,696,2.289,697,3.433,698,2.289,699,3.433,700,4.12,701,3.433,702,3.433,703,3.433,704,3.433,705,3.433,706,3.433,707,3.433,708,2.289,709,3.433,710,2.289,711,2.872,712,3.433,713,2.289,714,2.289,715,2.289,716,2.289,717,2.289,718,2.289]],["title/coverage.html",[719,3.633]],["body/coverage.html",[0,1.545,1,2.431,5,0.171,6,3.137,12,0.496,13,0.031,17,2.19,20,0.023,21,0.023,34,1.989,50,0.67,52,3.137,66,1.533,67,1.817,105,1.533,120,1.11,136,2.19,176,1.533,212,5.459,225,1.666,243,3.137,295,1.989,298,3.137,388,2.431,392,1.666,404,3.137,407,3.137,414,1.989,417,3.137,467,2.19,468,2.19,473,3.137,474,3.535,479,1.989,502,3.137,548,2.431,579,3.137,607,3.137,610,3.137,611,3.137,612,3.137,618,3.137,637,3.137,638,3.137,644,1.989,645,1.989,648,3.137,680,3.137,719,3.137,720,3.751,721,3.751,722,3.751,723,3.751,724,3.751,725,3.751,726,3.751,727,4.852,728,3.751,729,5.378,730,3.751,731,3.751,732,3.751,733,5.686,734,5.378,735,3.751,736,3.751]],["title/dependencies.html",[25,1.562,737,2.216]],["body/dependencies.html",[13,0.031,20,0.027,21,0.027,25,1.974,42,0.639,131,1.678,235,3.52,269,4.041,270,4.041,617,3.52,738,4.831,739,4.831,740,4.831,741,4.831,742,4.831,743,4.831,744,4.831,745,4.831,746,4.831]],["title/index.html",[7,0.472,711,2.216,747,2.65]],["body/index.html",[5,0.12,13,0.032,15,0.563,19,0.216,20,0.018,21,0.018,22,0.679,34,2.373,39,0.993,40,1.557,42,0.504,48,1.278,49,0.56,50,0.4,56,1.399,64,0.916,67,2.167,82,3.188,87,1.557,89,2.225,105,1.557,120,1.128,122,0.993,131,0.916,140,2.103,145,2.021,155,2.214,161,2.47,175,1.709,195,1.54,196,1.922,223,1.709,229,1.709,234,1.922,239,1.922,244,2.021,245,2.777,250,2.861,251,2.206,262,1.922,276,1.709,295,2.373,312,2.206,339,2.206,340,2.206,355,3.788,383,2.47,392,1.693,414,2.373,451,1.922,472,1.709,602,3.188,609,1.922,644,2.021,645,1.399,748,4.874,749,5.012,750,2.638,751,2.638,752,2.638,753,2.638,754,3.812,755,2.638,756,2.638,757,2.638,758,2.638,759,3.812,760,2.638,761,2.638,762,3.812,763,2.638,764,2.638,765,3.812,766,2.638,767,2.638,768,2.638,769,2.638,770,3.812,771,3.812,772,2.638,773,4.475,774,2.638,775,2.638,776,2.638,777,2.638,778,2.638,779,2.638,780,2.638,781,4.902,782,2.638,783,2.638,784,2.638,785,2.638,786,2.638,787,2.638,788,2.638,789,2.638,790,2.638,791,2.638,792,2.638,793,2.638,794,2.638,795,2.638,796,2.638,797,2.638,798,2.638,799,2.638,800,2.638,801,3.812,802,2.638,803,2.638,804,2.638,805,2.638,806,2.638,807,2.638,808,2.638,809,2.638,810,4.475,811,5.419,812,2.638,813,2.638,814,2.638,815,2.638,816,2.638,817,2.638,818,2.638,819,2.638,820,2.638,821,2.638,822,2.638,823,2.638,824,2.638,825,2.638,826,2.638,827,2.638]],["title/modules.html",[24,1.393]],["body/modules.html",[13,0.026,20,0.026,21,0.026,23,2.664,24,1.463,30,1.718,31,2.419,32,2.419,33,1.864,290,2.664,383,2.957,390,2.664,395,2.664,828,6.333,829,6.333,830,6.333,831,6.501,832,5.877,833,5.877]],["title/overview.html",[834,3.633]],["body/overview.html",[2,1.434,13,0.031,20,0.021,21,0.021,23,3.688,24,1.035,25,1.794,26,2.7,27,2.7,28,2.7,29,2.7,30,2.266,31,3.386,32,3.065,33,2.362,34,3.135,35,2.127,36,1.564,37,1.564,51,1.035,67,2.864,290,3.562,291,2.7,293,2.7,294,2.7,295,3.135,390,3.664,395,3.452,410,2.7,412,2.7,413,2.7,414,3.135,463,2.7,464,2.7,466,2.7,467,3.452,468,3.452,574,2.7,575,2.7,576,2.7,640,2.7,641,2.7,643,2.7,644,3.135,645,3.135,834,2.7,835,3.228,836,3.228,837,3.228]],["title/properties.html",[8,0.746,737,2.216]],["body/properties.html",[8,0.913,13,0.031,20,0.026,21,0.026,161,3.033,244,2.481,250,3.249,748,4.969,749,3.914,838,4.68,839,4.68,840,4.68,841,4.68,842,4.68,843,4.68,844,4.68,845,4.68,846,4.68,847,4.68,848,4.68,849,4.68,850,4.68,851,4.68,852,4.68,853,4.68,854,4.68]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["0/12",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":799,"title":{},"body":{"index.html":{}}}],["1.0.2",{"_index":839,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":571,"title":{},"body":{"injectables/HtsService.html":{}}}],["1000",{"_index":672,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["11",{"_index":836,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":837,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["8/10",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":835,"title":{},"body":{"overview.html":{}}}],["account",{"_index":82,"title":{},"body":{"injectables/AccountsService.html":{},"index.html":{}}}],["account's",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":807,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":802,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"interfaces/AccountBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":89,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(6",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfo",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":43,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":397,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":23,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":34,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":760,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":560,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":561,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":552,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":573,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":570,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":341,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":310,"title":{},"body":{"injectables/HcsService.html":{}}}],["amount",{"_index":529,"title":{},"body":{"injectables/HtsService.html":{}}}],["apikey",{"_index":608,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["app.controller",{"_index":772,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":764,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":774,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":771,"title":{},"body":{"index.html":{}}}],["append",{"_index":418,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":422,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":762,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":773,"title":{},"body":{"index.html":{}}}],["array",{"_index":14,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":604,"title":{},"body":{"injectables/KeysService.html":{}}}],["associatetoken",{"_index":503,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":513,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":56,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":818,"title":{},"body":{"index.html":{}}}],["author",{"_index":854,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":631,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":833,"title":{},"body":{"modules.html":{}}}],["await",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":83,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["browse",{"_index":831,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":828,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":846,"title":{},"body":{"properties.html":{}}}],["call",{"_index":619,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":679,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":491,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":494,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":499,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":501,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":678,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":673,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":664,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":622,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":677,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":315,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":381,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":783,"title":{},"body":{"index.html":{}}}],["catch",{"_index":219,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["choice",{"_index":265,"title":{},"body":{"injectables/ClientService.html":{}}}],["cid",{"_index":522,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":283,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":282,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":233,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":44,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":30,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":398,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":402,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":66,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":26,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":27,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":29,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":28,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":291,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":293,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":292,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":294,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":410,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":412,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":411,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":413,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":463,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":464,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":465,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":466,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":574,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":576,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":575,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":640,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":641,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":642,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":643,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":234,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":781,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":788,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":787,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":786,"title":{},"body":{"index.html":{}}}],["connect",{"_index":769,"title":{},"body":{"index.html":{}}}],["connection",{"_index":277,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(error",{"_index":811,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":800,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":822,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":821,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":810,"title":{},"body":{"index.html":{}}}],["const",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":64,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":65,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":248,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":478,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":424,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":459,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":719,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":276,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"index.html":{}}}],["create(key",{"_index":427,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":57,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":73,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":78,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":681,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":687,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":299,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":306,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":329,"title":{},"body":{"injectables/HcsService.html":{}}}],["decimals",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["decorators",{"_index":252,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":68,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":363,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":429,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":300,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":311,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":840,"title":{},"body":{"properties.html":{}}}],["dex",{"_index":843,"title":{},"body":{"properties.html":{}}}],["dissociatetoken",{"_index":504,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":515,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":359,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":228,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":270,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":319,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":624,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":220,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":792,"title":{},"body":{"index.html":{}}}],["execute",{"_index":351,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(this.clientservice.getclient",{"_index":558,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":362,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetches",{"_index":100,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":438,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":439,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":440,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":441,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":423,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":442,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":443,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":444,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":655,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":352,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":763,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":223,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":224,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":229,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":230,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":58,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":88,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":91,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":94,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(this.clientservice.getclient",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":346,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":322,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":601,"title":{},"body":{"injectables/KeysService.html":{}}}],["generated",{"_index":801,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":580,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":581,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":584,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":803,"title":{},"body":{"index.html":{}}}],["getallholders",{"_index":475,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":481,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":476,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":483,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":649,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":654,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":650,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":657,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":246,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":419,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":431,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":59,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":98,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":420,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfos(fileid",{"_index":433,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":716,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":60,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":102,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatesttransactions",{"_index":651,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":660,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":301,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":314,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":505,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":517,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":247,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":61,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":106,"title":{},"body":{"injectables/AccountsService.html":{}}}],["gets",{"_index":259,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":652,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":662,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":682,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":690,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":711,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":477,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":486,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionquery",{"_index":683,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":693,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":684,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":695,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":852,"title":{},"body":{"properties.html":{}}}],["given",{"_index":813,"title":{},"body":{"index.html":{}}}],["gives",{"_index":255,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":400,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":832,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":16,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["hbar",{"_index":11,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["hbar(amount",{"_index":562,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(maxtransactionfee",{"_index":450,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbars",{"_index":9,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["hcs",{"_index":339,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":297,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":394,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":819,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":290,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":295,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":629,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":250,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":853,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":389,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":848,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":775,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":796,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":794,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":795,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":793,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":797,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":761,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":758,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":383,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":776,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":784,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":225,"title":{"interfaces/HederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["hederaservice",{"_index":388,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":823,"title":{},"body":{"index.html":{}}}],["hfs.service",{"_index":416,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":396,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":395,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":414,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":493,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":495,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":844,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":748,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts",{"_index":471,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts.service",{"_index":470,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":31,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":467,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":468,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":616,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":847,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":845,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":779,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":620,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":97,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["if(adminkey",{"_index":348,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(currentadminkey",{"_index":357,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(end",{"_index":374,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(filters",{"_index":676,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["if(key",{"_index":564,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(keyslength",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{}}}],["if(length",{"_index":603,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(limit",{"_index":376,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(maxtransactionfee",{"_index":448,"title":{},"body":{"injectables/HfsService.html":{}}}],["if(memo",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["if(newkey",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["if(publickeys",{"_index":596,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(start",{"_index":371,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(submitkey",{"_index":368,"title":{},"body":{"injectables/HcsService.html":{}}}],["if(this.mirrornode.apikey",{"_index":630,"title":{},"body":{"injectables/RestService.html":{}}}],["if(tokenid",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":791,"title":{},"body":{"index.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":461,"title":{},"body":{"injectables/HfsService.html":{}}}],["inject",{"_index":241,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":271,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":50,"title":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":51,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":757,"title":{},"body":{"index.html":{}}}],["installation",{"_index":753,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{}},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"overview.html":{}}}],["invalid",{"_index":256,"title":{},"body":{"injectables/ClientService.html":{}}}],["isc",{"_index":850,"title":{},"body":{"properties.html":{}}}],["js",{"_index":750,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":820,"title":{},"body":{"index.html":{}}}],["key",{"_index":105,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":809,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":308,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":600,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":451,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["keys.service",{"_index":578,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":46,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":591,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":75,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":32,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":67,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":76,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":841,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":812,"title":{},"body":{"index.html":{}}}],["length",{"_index":585,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":849,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":320,"title":{},"body":{"injectables/HcsService.html":{}}}],["list.types",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":612,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["lodash",{"_index":489,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":498,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":54,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":261,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":331,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":408,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":437,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":537,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":589,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":625,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":699,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":262,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["matching",{"_index":21,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math",{"_index":284,"title":{},"body":{"injectables/ClientService.html":{}}}],["maxtransactionfee",{"_index":425,"title":{},"body":{"injectables/HfsService.html":{}}}],["memo",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":316,"title":{},"body":{"injectables/HcsService.html":{}}}],["method",{"_index":765,"title":{},"body":{"index.html":{}}}],["methods",{"_index":55,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mintnfttoken",{"_index":506,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":520,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":770,"title":{},"body":{"index.html":{}}}],["mirror.types",{"_index":405,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["mirrornode",{"_index":392,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{},"index.html":{}}}],["module",{"_index":22,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":80,"title":{},"body":{"injectables/AccountsService.html":{}}}],["name",{"_index":71,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":602,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":768,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":749,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":617,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":235,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":269,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":244,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":497,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":666,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":669,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":668,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nftid",{"_index":545,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":555,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":556,"title":{},"body":{"injectables/HtsService.html":{}}}],["node",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["npm",{"_index":754,"title":{},"body":{"index.html":{}}}],["null",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":74,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/TokenBalance.html":{}}}],["number(amount",{"_index":572,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(response.tokendecimals?._map.get(tokenid",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(response.tokens._map.get(tokenid)?.tostring",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["offline",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{}}}],["once",{"_index":790,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":268,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":253,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":176,"title":{"interfaces/Operator.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/Operator.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["operator.types",{"_index":406,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["operators",{"_index":245,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["optional",{"_index":72,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":227,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":242,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":240,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":766,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":350,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":834,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":737,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["parameters",{"_index":70,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":767,"title":{},"body":{"index.html":{}}}],["pausekey",{"_index":525,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":507,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":524,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":87,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":825,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":808,"title":{},"body":{"index.html":{}}}],["privatekey.generate",{"_index":592,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":136,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":599,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":605,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":86,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve,reject",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["promise(resolve",{"_index":670,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":782,"title":{},"body":{"index.html":{}}}],["protected",{"_index":53,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":237,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":595,"title":{},"body":{"injectables/KeysService.html":{}}}],["provider",{"_index":387,"title":{},"body":{"modules/HederaModule.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":104,"title":{},"body":{"injectables/AccountsService.html":{}}}],["public.mirrornode.hedera.com",{"_index":780,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":590,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":594,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":606,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":598,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":588,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":597,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(this.clientservice.getclient",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":257,"title":{},"body":{"injectables/ClientService.html":{}}}],["receipt",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":717,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["reject",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":95,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":851,"title":{},"body":{"properties.html":{}}}],["request",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":454,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(balance",{"_index":218,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":460,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":500,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":366,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":462,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":593,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":559,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(receipt",{"_index":554,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":456,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":353,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":370,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":492,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":636,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":718,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":382,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":568,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":674,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next.split",{"_index":667,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":216,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest.service",{"_index":472,"title":{},"body":{"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":474,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:10",{"_index":658,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:11",{"_index":487,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:24",{"_index":482,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:39",{"_index":656,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:5",{"_index":653,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:50",{"_index":485,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:6",{"_index":480,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:73",{"_index":661,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:86",{"_index":663,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest/rest.module",{"_index":45,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":488,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":33,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":399,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":403,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":479,"title":{"injectables/RestService.html":{}},"body":{"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":20,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":85,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":756,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":712,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":700,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":713,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(this.clientservice.getclient",{"_index":715,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":692,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":701,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":702,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":751,"title":{},"body":{"index.html":{}}}],["select",{"_index":285,"title":{},"body":{"injectables/ClientService.html":{}}}],["sender",{"_index":565,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":518,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":446,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":457,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":708,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":707,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setinitialbalance(new",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkey(keyslength",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":445,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":367,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":557,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([new",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":714,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":709,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["settimeout(resolve",{"_index":671,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":550,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":364,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":706,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":755,"title":{},"body":{"index.html":{}}}],["sig",{"_index":81,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":356,"title":{},"body":{"injectables/HcsService.html":{}}}],["sign(key",{"_index":710,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{}}}],["signatures",{"_index":361,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":347,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":685,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":697,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(this.clientservice.getclient",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":360,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":79,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":842,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":101,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":52,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:163",{"_index":77,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:215",{"_index":93,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:243",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:27",{"_index":69,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:270",{"_index":107,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:44",{"_index":99,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:74",{"_index":103,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:93",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":221,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:23",{"_index":231,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:9",{"_index":226,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":243,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:13",{"_index":260,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:18",{"_index":266,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:23",{"_index":267,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:28",{"_index":264,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:33",{"_index":249,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:57",{"_index":254,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:76",{"_index":258,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":296,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":298,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:123",{"_index":313,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:147",{"_index":327,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:162",{"_index":325,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:195",{"_index":321,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:21",{"_index":305,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:30",{"_index":309,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:73",{"_index":330,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":384,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:17",{"_index":385,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:46",{"_index":386,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":407,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:5",{"_index":409,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":415,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":417,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:143",{"_index":430,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:174",{"_index":432,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:19",{"_index":421,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:192",{"_index":434,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:25",{"_index":428,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:62",{"_index":426,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:95",{"_index":436,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":473,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":469,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":502,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:109",{"_index":523,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:131",{"_index":519,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:149",{"_index":528,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:194",{"_index":534,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:240",{"_index":531,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:25",{"_index":512,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:31",{"_index":514,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:53",{"_index":516,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:75",{"_index":526,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:92",{"_index":536,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":577,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":579,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:13",{"_index":583,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:24",{"_index":587,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:7",{"_index":582,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":613,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:10",{"_index":614,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:25",{"_index":615,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":618,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:18",{"_index":623,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:8",{"_index":626,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:9",{"_index":621,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":648,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":646,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":680,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:102",{"_index":691,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:20",{"_index":686,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:26",{"_index":694,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:41",{"_index":696,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:57",{"_index":698,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:80",{"_index":688,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/account_balance.types.ts",{"_index":6,"title":{},"body":{"interfaces/AccountBalance.html":{},"coverage.html":{}}}],["src/types/hedera_options.types.ts",{"_index":404,"title":{},"body":{"interfaces/HederaOptions.html":{},"coverage.html":{}}}],["src/types/mirror.types.ts",{"_index":607,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":610,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":611,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["src/types/token_balance.types.ts",{"_index":637,"title":{},"body":{"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["src/types/transaction_details.types.ts",{"_index":638,"title":{},"body":{"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["start",{"_index":318,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":747,"title":{"index.html":{}},"body":{}}],["statements",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":222,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":92,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":343,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":307,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":302,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":323,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":566,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":453,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(this.clientservice.getclient",{"_index":455,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":815,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":378,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":521,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":829,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":830,"title":{},"body":{"modules.html":{}}}],["table",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":263,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["then((response",{"_index":827,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":798,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":806,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":278,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":288,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":380,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.getclient",{"_index":279,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":281,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":816,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.mirrornode",{"_index":628,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":273,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":275,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":824,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":633,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":804,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(undefined",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":627,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":632,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":634,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":272,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":280,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":289,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":274,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":287,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":286,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":490,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":814,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":586,"title":{},"body":{"injectables/KeysService.html":{}}}],["timestamp",{"_index":659,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":96,"title":{},"body":{"injectables/AccountsService.html":{}}}],["token_balance.types",{"_index":18,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":538,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":17,"title":{"interfaces/TokenBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["tokendecimals",{"_index":533,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":542,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":90,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["tokenminttransaction",{"_index":539,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":547,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":546,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":540,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":10,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["tokens.push",{"_index":217,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":541,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":340,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":332,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":334,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":312,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":817,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":303,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":326,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":338,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":365,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":337,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":336,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":335,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":333,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":354,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":635,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(this.clientservice.getclient",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(this.clientservice.getclient",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":342,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":375,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":447,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setkey(newkey",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":458,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":377,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":449,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setstarttime(start",{"_index":373,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":344,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":345,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":563,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":349,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":358,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":452,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":551,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":369,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":553,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":379,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{}}}],["transactiondetails",{"_index":548,"title":{"interfaces/TransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["transactionid",{"_index":639,"title":{},"body":{"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":544,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":703,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":704,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":705,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":665,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":647,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":675,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":391,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":390,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":644,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":645,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":689,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":569,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":508,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":527,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":509,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":530,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":510,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":532,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":543,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":401,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(this.clientservice.getclient",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":567,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":12,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/account_balance.types",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/hedera_options.types",{"_index":236,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/mirror.types",{"_index":393,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/operator.types",{"_index":232,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{}}}],["types/private",{"_index":137,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/token_balance.types",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/transaction_details.types",{"_index":549,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":324,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":372,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":62,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpausetoken",{"_index":511,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":535,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":435,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":63,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":304,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":328,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":805,"title":{},"body":{"index.html":{}}}],["url",{"_index":609,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":789,"title":{},"body":{"index.html":{}}}],["use",{"_index":355,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":785,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":239,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":238,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":251,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":838,"title":{},"body":{"properties.html":{}}}],["void",{"_index":317,"title":{},"body":{"injectables/HcsService.html":{}}}],["walletid",{"_index":484,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["while(response.links.next",{"_index":496,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["workound",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{}}}],["wrapper",{"_index":752,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":759,"title":{},"body":{"index.html":{}}}],["yes",{"_index":84,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":826,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":777,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":778,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccountBalance.html":{"url":"interfaces/AccountBalance.html","title":"interface - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/account_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { TokenBalance } from \"./token_balance.types\";\n\nexport interface AccountBalance {\n  hbars: Hbar\n  tokens: Array  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService],\n  exports: [AccountsService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, keysThreshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:163\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:215\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:44\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:74\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:270\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:243\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:93\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:27\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { \n  AccountBalanceQuery,\n  AccountCreateTransaction, \n  AccountId, \n  AccountInfo, \n  AccountInfoQuery, \n  AccountUpdateTransaction, \n  Hbar,\n  PrivateKey,\n  Status, \n  TokenFreezeTransaction, \n  TokenId, \n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { TokenBalance } from '../../types/token_balance.types';\nimport { AccountBalance } from '../../types/account_balance.types';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class AccountsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) {}\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountInfoQuery()\n            .setAccountId(accountId);\n\n\n        /**\n         * Signing the transaction...\n         */\n        const accountInfo = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * resolving the account's info...\n         */\n        resolve(accountInfo);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetches Specific account public key\n   * @param {AccountId} accountId \n   * @returns {any} Account Public Key\n   */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new AccountUpdateTransaction()\n         /**\n         * setting single node accountId, as a workound for offline signature...\n         */\n            .setNodeAccountIds([new AccountId(6)])    \n            .setAccountId(accountId);\n\n            /**\n             * If there is a memo...\n             */\n        if(memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        /**\n         * If there is a new key...\n         */\n        if(newKey) {\n          transaction.setKey(newKey);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Signing the transaction with the client operator...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Request the receipt of the transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction consensus status...\n         */\n        resolve(receipt.status);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Creates a single or multi-sig account\n   * @param {number} balance \n   * @param {number} keysLength \n   * @param {number} keysThreshold \n   * @returns {AccountId, PrivateKey} single or multi-sig account\n   */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    keysThreshold?: number\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        let key = null;\n\n        if(keysLength > 1) {\n          key = await this.keysService.generateKeyList(undefined, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountCreateTransaction()\n            .setKey(keysLength > 1 ? (key).keyList : (key).publicKey)\n            .setInitialBalance(new Hbar(balance));\n\n        /**\n         * Executing the transactions...\n         */\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * Fetching the receipt...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving the accountId...\n         */\n        resolve({\n          accountId: receipt.accountId,\n          key: key\n        });\n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  /**\n   * Freezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenFreezeTransaction()\n            .setAccountId(accountId)\n            .setTokenId(tokenId)\n            .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));   \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unfreezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenUnfreezeTransaction()\n            .setAccountId(accountId)\n            .setTokenId(tokenId)\n            .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));   \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * \n   * @param {string} accountId \n   * @param {string} tokenId \n   * @returns {AccountBalance}\n   */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(this.clientService.getClient());\n        let balance = null;\n\n        if(tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()): 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)): 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n          \n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()): 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)): 0\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:33\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:57\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:76\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:13\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:33\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:28\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Operator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:18\n                        \n                    \n\n            \n                \n                    Single Operator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:23\n                        \n                    \n\n            \n                \n                    Array of Operators\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n\n  /**\n   * Single Operator\n   */\n  private operator: Operator;\n\n  /**\n   * Array of Operators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet';\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {HederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n    \n    /**\n     * Create our connection to the Hedera network...\n     */\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n    \n    /**\n     * Math Random to select random operator\n     */\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {Operator}\n   */\n  getNodeOperator(): Operator {\n    return this.operator;\n  }  \n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:21\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HcsService {\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {\n    // HCS Service\n  }\n\n  // Create topic...\n  createTopic(\n    adminKey?: PrivateKey, \n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n        // setting the admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if there is an admin key, transaction must be signed...\n        if(adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n        // finally, fetching the topicId from the response...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Update topic...\n  updateTopic(\n    topicId: TopicId, \n    currentAdminKey?: PrivateKey, \n    adminKey?: PrivateKey, \n    submitKey?: Key | KeyList, \n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n        // setting the new admin key, if any...\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n        // setting the new submit key, if any...\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n        // setting the new topic memo, if any...\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if the transaction has got an admin key, we must use it to sign...\n        if(currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n          // if there is a new admin key, we must use it to double sign it...\n          if(adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n          // executing the transaction, after signatures...\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise we can just sign the transaction...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n        // fetching the status of the executed transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Delete topic...\n  deleteTopic(\n    topicId: TopicId, \n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction, and freezing it...\n        const transaction = new TopicDeleteTransaction()\n        .setTopicId(topicId)\n        .freezeWith(this.clientService.getClient());\n        // signing the transaction with admin key...\n        const signTx = await transaction.sign(adminKey);\n        // fetching response...\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        // resolving status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Get topic info...\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = new TopicInfoQuery().setTopicId(topicId);  \n        const info = await transaction.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Submit Message...\n  submitMessage(\n    topicId: TopicId, \n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let txResponse = null;\n        // creating the transaction, setting topic and message...\n        const transaction = new TopicMessageSubmitTransaction()\n        .setTopicId(topicId)\n        .setMessage(message);\n        // freezing the transaction...\n        transaction.freezeWith(this.clientService.getClient());\n        // if there is an submit key, transaction must be signed...\n        if(submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        } \n        // otherwise, we can just execute it...\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }        \n        // finally, fetching the status...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Get topic message...\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // creating the transaction...\n        const transaction = new TopicMessageQuery()\n        .setTopicId(topicId);\n\n        if(start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if(end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if(limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(), \n          null, \n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { HederaOptions } from '../types/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HederaOptions.html":{"url":"interfaces/HederaOptions.html","title":"interface - HederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/hedera_options.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         MirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MirrorNode } from \"./mirror.types\";\nimport { Operator } from \"./operator.types\";\n\nexport interface HederaOptions {\n  operators: Array\n  mirrorNode: MirrorNode\n  network: 'mainnet' | 'testnet'\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n@Injectable()\nexport class HederaService {\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { \n  FileAppendTransaction, \n  FileContentsQuery, \n  FileCreateTransaction, \n  FileDeleteTransaction, \n  FileId, \n  FileInfo, \n  FileInfoQuery, \n  FileUpdateTransaction, \n  Hbar, \n  PrivateKey, \n  Status \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HfsService {\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the file ID\n        resolve(receipt.fileId);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,    \n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if(memo) {\n          transaction.setFileMemo(memo);\n        }          \n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        if(newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n        \n        // Signing the transaction...\n        let signTx = await transaction.sign(signKey);\n\n        if(newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n        \n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if(maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n        \n        // Signing with the file private keys...\n        const signTx = await transaction.sign(key);\n        // Executing the transaction...\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // Requesting the receipt...\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n        // Get the transaction status\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = new FileContentsQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const contents = await transaction.execute(this.clientService.getClient());\n        resolve(contents.toString());\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = new FileInfoQuery()\n            .setFileId(fileId);\n\n        // Signing the transaction...\n        const infos = await transaction.execute(this.clientService.getClient());\n        resolve(infos);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n@Injectable()\nexport class HtsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, supplyKey: PrivateKey, CID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId, from: AccountId, to: AccountId, amount: number, tokenDecimals: number, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { \n  AccountId, \n  Hbar, \n  PrivateKey, \n  Status, \n  TokenAssociateTransaction, \n  TokenId, \n  TokenMintTransaction, \n  TokenPauseTransaction, \n  TokenUnpauseTransaction, \n  TokenDissociateTransaction,\n  Transaction, \n  TransferTransaction, \n  TransactionReceipt, \n  NftId, \n  TokenNftInfoQuery, \n  TokenNftInfo \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { TransactionDetails } from '../../types/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HtsService {\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async dissociateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenDissociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async pauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenPauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenUnpauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async mintNftToken(\n    tokenId: TokenId,\n    supplyKey: PrivateKey,\n    CID: string\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenMintTransaction()\n        .setTokenId(tokenId)\n        .addMetadata(Buffer.from(CID))\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n        .setNftId(nftId)\n        .execute(this.clientService.getClient());\n\n        resolve(nftInfos);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount))\n          .addHbarTransfer(to, new Hbar(amount));\n\n        if(memo) {\n          transaction.setTransactionMemo(memo);\n        }\n          \n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,    \n    amount: number,\n    tokenDecimals: number,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addTokenTransfer(tokenId, from, Number(-amount  * (10 ** tokenDecimals)))\n          .addTokenTransfer(tokenId, to, Number(amount  * (10 ** tokenDecimals)));\n\n          if(memo) {\n            transaction.setTransactionMemo(memo);\n          }\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class KeysService {\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n  constructor() {\n    // KeyService Class\n  }\n\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n  url: string\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n  accountId: string\n  privateKey: string\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\nexport interface PrivateKeyList {\n  privateKeys: PrivateKey[]\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Injectable()\nexport class RestService {\n  private mirrorNode: MirrorNode;\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenBalance.html":{"url":"interfaces/TokenBalance.html","title":"interface - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/token_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenBalance {\n  tokenId: string\n  balance: number\n  decimals: number  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionDetails.html":{"url":"interfaces/TransactionDetails.html","title":"interface - TransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/transaction_details.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\nexport interface TransactionDetails {\n  status: Status\n  transaction_id: TransactionId\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n@Injectable()\nexport class TransactionsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string):  Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if(filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n        .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`schedules/${transactionId}`);\n        \n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { \n  PrivateKey, \n  ScheduleCreateTransaction, \n  ScheduleId, \n  ScheduleInfoQuery, \n  ScheduleSignTransaction, \n  Status, \n  Transaction, \n  TransactionId, \n  TransactionReceipt, \n  TransactionReceiptQuery,\n  TransactionRecordQuery, \n  TransactionResponse \n} from '@hashgraph/sdk';\n\n@Injectable()\nexport class TransactionsService {\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionRecordQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error: any) {\n        reject(error);\n      }\n    });\n  }  \n\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionReceiptQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true)\n        .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n            .setScheduleId(scheduleId)\n            .freezeWith(this.clientService.getClient())\n            .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating a schedule transaction...\n        let  scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n            .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(this.clientService.getClient());\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/types/account_balance.types.ts\n            \n            interface\n            AccountBalance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/hedera_options.types.ts\n            \n            interface\n            HederaOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/token_balance.types.ts\n            \n            interface\n            TokenBalance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/transaction_details.types.ts\n            \n            interface\n            TransactionDetails\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install hsuite-nestjs-hederainstead, if you use yarn:\nyarn add hsuite-nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from 'hsuite-nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from 'hsuite-nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from 'hsuite-nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from 'hsuite-nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from 'hsuite-nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from 'hsuite-nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.2\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
