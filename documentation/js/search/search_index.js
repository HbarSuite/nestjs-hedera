var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccountBalance.html",[0,0.8,1,2.059]],["body/interfaces/AccountBalance.html",[0,1.162,1,3.578,2,2.052,3,0.314,4,0.314,5,0.21,6,3.863,7,0.823,8,1.077,9,5.119,10,5.119,11,3.966,12,0.731,13,0.031,14,3.132,15,0.509,16,4.619,17,2.696,18,4.619,19,0.261,20,0.026,21,0.026]],["title/modules/AccountsModule.html",[22,0.566,23,1.855]],["body/modules/AccountsModule.html",[3,0.267,4,0.267,5,0.178,13,0.032,15,0.562,19,0.222,20,0.024,21,0.024,22,0.889,23,3.816,24,1.257,25,2.039,26,3.279,27,3.279,28,3.279,29,3.279,30,2.297,31,3.235,32,3.235,33,2.493,34,3.426,35,2.417,36,1.899,37,1.899,38,3.921,39,1.879,40,2.039,41,2.039,42,0.519,43,3.921,44,2.079,45,2.289,46,3.279,47,3.279,48,1.899,49,0.576]],["title/injectables/AccountsService.html",[34,1.685,50,0.334]],["body/injectables/AccountsService.html",[1,1.432,3,0.227,4,0.09,5,0.06,7,0.235,8,0.431,9,1.848,10,2.796,11,0.853,12,0.619,13,0.032,14,0.698,15,0.395,17,0.768,19,0.074,20,0.01,21,0.01,34,1.171,42,0.174,49,0.193,50,0.351,51,0.422,52,1.101,53,0.638,54,1.268,55,1.837,56,0.654,57,2.949,58,2.855,59,2.209,60,2.209,61,2.209,62,2.209,63,2.209,64,2.855,65,1.161,66,0.768,67,1.837,68,2.265,69,1.277,70,2.209,71,1.331,72,1.331,73,1.132,74,1.317,75,2.694,76,4.033,77,3.725,78,1.317,79,2.209,80,3.116,81,3.343,82,3.343,83,4.653,84,3.761,85,1.772,86,1.562,87,2.156,88,2.028,89,2.209,90,3.634,91,3.848,92,4.497,93,1.818,94,1.317,95,2.209,96,3.343,97,2.796,98,2.435,99,2.209,100,1.317,101,3.343,102,3.343,103,2.209,104,1.317,105,3.343,106,2.028,107,2.209,108,1.317,109,2.209,110,1.317,111,2.209,112,1.317,113,2.796,114,3.373,115,2.613,116,1.317,117,2.209,118,1.61,119,0.538,120,0.538,121,1.628,122,2.209,123,1.161,124,2.209,125,2.209,126,3.343,127,2.209,128,2.209,129,2.272,130,2.209,131,2.209,132,0.457,133,0.768,134,1.317,135,1.317,136,1.317,137,0.768,138,1.101,139,1.101,140,3.28,141,0.832,142,1.268,143,2.777,144,2.561,145,1.751,146,1.751,147,1.513,148,3.026,149,2.979,150,3.116,151,1.666,152,2.317,153,1.432,154,1.61,155,1.317,156,1.317,157,2.777,158,2.501,159,1.751,160,1.317,161,1.317,162,1.101,163,0.853,164,1.317,165,1.317,166,1.317,167,1.317,168,1.317,169,1.317,170,1.317,171,0.853,172,2.166,173,1.101,174,1.101,175,0.853,176,0.538,177,2.166,178,1.85,179,1.317,180,2.354,181,2.166,182,1.101,183,0.768,184,1.432,185,1.848,186,1.317,187,1.317,188,1.317,189,1.317,190,1.317,191,1.317,192,1.317,193,0.959,194,0.768,195,0.959,196,1.317,197,1.848,198,1.432,199,2.209,200,1.848,201,1.61,202,2.209,203,0.959,204,0.768,205,1.101,206,3.343,207,2.209,208,2.796,209,1.848,210,2.209,211,2.209,212,1.317,213,1.317,214,1.317]],["title/modules/ClientModule.html",[22,0.566,30,1.196]],["body/modules/ClientModule.html",[3,0.262,4,0.262,5,0.175,12,0.653,13,0.032,15,0.547,19,0.218,20,0.023,21,0.023,22,1.023,24,1.235,30,2.162,39,1.858,40,1.574,41,2.017,42,0.51,49,0.566,56,1.14,67,2.426,69,1.348,71,1.461,72,1.461,73,1.242,86,1.461,142,1.461,176,1.574,215,3.853,216,4.184,217,2.496,218,3.596,219,2.698,220,3.853,221,3.968,222,4.325,223,2.496,224,3.596,225,3.853,226,2.807,227,3.853,228,3.596,229,2.807,230,2.249,231,4.128,232,3.222,233,2.807,234,3.222,235,2.496,236,3.222]],["title/injectables/ClientService.html",[50,0.334,67,1.298]],["body/injectables/ClientService.html",[3,0.19,4,0.19,5,0.127,7,0.497,8,0.773,12,0.73,13,0.032,14,2.665,15,0.49,19,0.158,20,0.019,21,0.019,42,0.369,49,0.409,50,0.528,51,0.894,53,1.35,55,2.372,56,1.174,65,1.378,67,1.62,69,1.585,71,0.825,72,0.825,73,0.702,80,3.317,86,1.488,119,1.139,120,1.139,121,1.174,123,1.746,132,0.968,140,1.627,141,2.368,142,1.174,158,2.315,163,3.258,175,3.966,176,2.556,219,2.578,226,2.031,230,1.627,235,1.807,237,2.332,238,3.077,239,3.87,240,5.028,241,5.028,242,2.332,243,3.966,244,2.694,245,3.317,246,2.788,247,3.966,248,2.788,249,3.966,250,3.966,251,3.966,252,2.788,253,3.966,254,2.788,255,3.966,256,2.889,257,3.86,258,2.788,259,3.966,260,2.788,261,2.788,262,2.788,263,2.332,264,2.332,265,2.332,266,3.966,267,2.788,268,2.788,269,2.788,270,1.807,271,2.788,272,5.028,273,2.788,274,4.616,275,2.788,276,2.788,277,2.788,278,2.788,279,2.788,280,2.788,281,2.788]],["title/modules/HcsModule.html",[22,0.566,282,1.855]],["body/modules/HcsModule.html",[3,0.283,4,0.283,5,0.189,13,0.031,15,0.544,19,0.235,20,0.025,21,0.025,22,0.923,24,1.334,25,2.117,30,2.332,33,2.531,35,2.51,36,2.015,37,2.015,39,1.951,40,2.117,41,2.117,42,0.55,44,2.206,45,2.429,48,2.015,49,0.611,282,3.784,283,3.48,284,4.161,285,3.48,286,3.48,287,3.453,288,4.161,289,4.161]],["title/injectables/HcsService.html",[50,0.334,287,1.685]],["body/injectables/HcsService.html",[3,0.231,4,0.092,5,0.061,7,0.24,8,0.439,12,0.601,13,0.032,15,0.267,19,0.076,20,0.011,21,0.011,42,0.178,49,0.198,50,0.356,51,0.432,53,0.652,54,1.289,55,1.855,56,0.666,65,0.782,66,0.786,67,1.855,69,1.24,71,1.282,72,1.282,73,1.09,75,2.713,85,2.652,86,1.515,87,2.091,88,2.347,93,1.674,106,2.285,115,3.316,118,1.64,119,0.55,120,0.55,121,1.655,123,1.417,129,2.163,132,0.468,133,0.786,140,3.326,141,0.507,142,1.207,143,2.643,144,2.163,145,1.667,146,1.667,147,2.163,148,3.378,149,2.859,151,0.786,152,2.26,153,2.197,154,0.981,157,2.643,158,2.381,159,1.667,162,3.622,171,1.88,172,2.445,177,3.156,178,2.197,180,1.979,181,2.197,183,1.314,184,2.197,193,0.981,195,2.471,198,0.873,203,0.981,204,1.314,270,1.459,287,1.194,290,1.126,291,2.902,292,2.902,293,2.902,294,2.902,295,3.773,296,2.902,297,2.252,298,1.883,299,1.347,300,5.393,301,3.155,302,1.347,303,4.366,304,5.393,305,1.347,306,5.183,307,1.347,308,1.883,309,1.347,310,3.391,311,5.311,312,2.252,313,3.773,314,3.773,315,3.773,316,1.347,317,1.347,318,2.902,319,1.347,320,2.902,321,1.347,322,3.156,323,1.347,324,1.347,325,1.347,326,3.773,327,1.347,328,2.252,329,2.252,330,1.347,331,2.252,332,2.252,333,2.252,334,1.347,335,1.347,336,4.079,337,2.252,338,2.252,339,2.252,340,3.391,341,2.252,342,2.252,343,2.427,344,2.252,345,2.252,346,1.347,347,1.347,348,1.64,349,2.902,350,1.347,351,1.347,352,1.347,353,1.347,354,1.347,355,2.902,356,1.347,357,1.126,358,1.347,359,1.347,360,1.347,361,2.902,362,1.347,363,1.347,364,1.347,365,1.347,366,1.347,367,1.347,368,1.347]],["title/modules/HederaModule.html",[22,0.566,369,2.059]],["body/modules/HederaModule.html",[3,0.229,4,0.229,5,0.153,12,0.597,13,0.032,15,0.586,19,0.19,20,0.021,21,0.021,22,0.97,23,3.316,24,1.078,30,1.266,31,3.012,32,3.012,33,1.373,39,1.699,40,1.844,41,1.844,42,0.445,44,1.782,45,1.962,46,2.811,47,2.811,49,0.494,56,0.995,69,1.232,71,1.336,72,1.336,73,1.136,86,1.336,142,1.336,176,1.373,216,3.968,217,2.178,218,3.288,219,2.419,221,3.288,222,4.139,223,2.178,224,3.288,226,2.449,230,1.962,282,3.316,369,3.529,370,3.361,371,3.361,372,3.361,373,3.361,374,3.681,375,3.361,376,3.316,377,3.361,378,1.493,379,2.449,380,3.361,381,3.316,382,3.361,383,3.361,384,4.513,385,4.513,386,4.513,387,4.513,388,4.513,389,4.513]],["title/interfaces/HederaOptions.html",[0,0.8,219,1.411]],["body/interfaces/HederaOptions.html",[0,1.119,2,1.974,3,0.302,4,0.302,5,0.202,7,0.792,8,1.052,12,0.769,13,0.031,14,3.08,15,0.497,19,0.251,20,0.026,21,0.026,176,1.816,219,2.397,238,3.204,239,4.402,256,4.233,257,4.859,378,2.855,390,3.717,391,4.444,392,4.444]],["title/injectables/HederaService.html",[50,0.334,374,2.059]],["body/injectables/HederaService.html",[3,0.303,4,0.303,5,0.203,7,0.794,8,1.054,12,0.589,13,0.031,15,0.411,19,0.252,20,0.026,21,0.026,42,0.589,49,0.654,50,0.635,51,1.428,53,2.158,54,2.584,55,2.627,69,1.217,119,1.82,120,1.82,121,1.599,123,2.101,374,3.502,393,3.726,394,5.404,395,4.455]],["title/modules/HfsModule.html",[22,0.566,381,1.855]],["body/modules/HfsModule.html",[3,0.292,4,0.292,5,0.195,13,0.031,15,0.528,19,0.243,20,0.025,21,0.025,22,0.941,24,1.376,25,2.158,30,2.35,35,2.558,36,2.079,37,2.079,39,1.989,40,2.158,41,2.158,42,0.568,44,2.276,48,2.079,49,0.63,381,3.757,396,3.59,397,4.293,398,3.59,399,3.59,400,3.467,401,4.293,402,4.293]],["title/injectables/HfsService.html",[50,0.334,400,1.685]],["body/injectables/HfsService.html",[3,0.209,4,0.1,5,0.243,7,0.261,8,0.471,11,0.949,12,0.622,13,0.032,15,0.284,19,0.083,20,0.011,21,0.011,42,0.194,49,0.215,50,0.375,51,0.47,53,0.71,54,1.368,55,1.92,56,0.715,57,3.021,65,0.839,66,0.855,67,1.92,69,1.283,71,1.331,72,1.331,73,1.132,75,2.958,85,2.384,86,1.555,87,2.146,88,2.386,93,1.873,98,1.067,106,2.101,113,2.988,114,3.557,115,3.251,118,2.879,119,0.599,120,0.599,121,1.609,123,1.477,129,2.384,132,0.509,133,0.855,140,3.384,141,1.345,142,1.259,143,2.756,144,2.255,145,1.738,146,1.738,147,2.255,148,3.432,149,3.049,151,2.482,152,2.349,153,1.565,157,2.756,158,2.482,159,1.738,171,2.315,172,2.561,173,1.225,174,1.225,178,2.315,180,2.743,183,1.798,193,2.603,270,2.561,308,3.305,400,1.28,403,1.225,404,3.952,405,3.081,406,3.081,407,2.415,408,2.02,409,1.465,410,6.244,411,5.252,412,5.797,413,1.465,414,1.465,415,1.465,416,1.465,417,1.465,418,1.465,419,1.465,420,3.081,421,1.465,422,1.465,423,1.465,424,1.465,425,2.415,426,2.415,427,2.415,428,2.415,429,2.415,430,2.415,431,2.415,432,2.415,433,1.465,434,3.081,435,2.415,436,3.573,437,3.573,438,2.244,439,2.576,440,3.573,441,2.603,442,3.573,443,1.465,444,3.952,445,1.465,446,1.465,447,1.465,448,1.465]],["title/modules/HtsModule.html",[22,0.566,31,1.685]],["body/modules/HtsModule.html",[3,0.265,4,0.265,5,0.178,13,0.032,15,0.55,19,0.221,20,0.024,21,0.024,22,0.887,24,1.252,25,2.034,30,2.384,31,3.475,33,2.49,35,2.411,36,1.891,37,1.891,39,1.874,40,2.034,41,2.034,42,0.516,44,2.07,45,2.279,48,1.891,49,0.573,449,3.265,450,3.265,451,3.904,452,3.265,453,3.769,454,3.769,455,3.904,456,3.904,457,3.265,458,2.53]],["title/injectables/HtsRestService.html",[50,0.334,453,1.855]],["body/injectables/HtsRestService.html",[3,0.314,4,0.19,5,0.127,7,0.497,12,0.666,13,0.032,14,2.928,15,0.426,19,0.158,20,0.019,21,0.019,42,0.369,49,0.41,50,0.528,51,0.895,53,1.352,56,1.175,65,1.379,69,1.374,71,1.489,72,1.489,73,1.266,86,1.635,87,2.257,91,3.763,93,2.017,97,3.321,121,1.367,123,1.379,140,3.102,141,1.051,142,1.367,145,1.887,146,1.887,152,2.172,159,1.887,185,3.321,204,3.316,453,2.317,457,3.321,459,4.445,460,2.034,461,3.97,462,3.97,463,3.97,464,2.336,465,3.012,466,2.793,467,3.97,468,3.97,469,2.793,470,5.992,471,3.97,472,5.523,473,2.793,474,3.97,475,2.793,476,2.336,477,3.97,478,2.449,479,4.445,480,2.793,481,2.336,482,2.237,483,2.793,484,5.031,485,3.321,486,3.321,487,3.97,488,3.97,489,3.97,490,2.793]],["title/injectables/HtsService.html",[50,0.334,454,1.855]],["body/injectables/HtsService.html",[3,0.097,4,0.097,5,0.065,7,0.254,8,0.46,11,1.529,12,0.674,13,0.032,15,0.324,19,0.081,20,0.011,21,0.011,42,0.188,49,0.209,50,0.248,51,0.457,54,1.342,55,1.714,56,0.698,57,3.189,65,0.82,66,0.832,67,1.714,69,1.392,71,1.471,72,1.471,73,1.251,75,2.939,85,2.064,86,1.427,87,2.314,88,2.433,90,3.541,91,4.07,93,1.546,106,2.314,115,2.719,119,0.582,120,0.582,121,1.743,123,0.82,129,2.355,132,0.495,133,0.832,141,0.536,142,1.427,144,1.602,145,1.714,146,1.97,147,1.602,148,3.457,149,3.189,150,1.974,151,1.763,152,2.479,154,2.201,159,1.97,171,1.957,172,3.012,177,3.012,178,3.012,180,2.975,181,3.012,182,2.526,183,2.05,197,2.526,198,2.523,200,2.526,201,2.201,238,1.602,244,1.763,439,3.256,441,2.201,454,1.377,478,2.224,482,2.335,491,1.192,492,3.021,493,3.021,494,3.021,495,3.021,496,2.36,497,3.021,498,3.021,499,3.021,500,2.36,501,2.36,502,1.425,503,1.425,504,1.425,505,1.425,506,1.425,507,4.648,508,1.425,509,1.425,510,3.021,511,3.021,512,1.425,513,2.36,514,4.196,515,1.425,516,1.425,517,1.425,518,4.443,519,1.425,520,1.425,521,1.425,522,3.893,523,1.425,524,2.36,525,1.425,526,2.36,527,2.36,528,2.36,529,2.36,530,2.36,531,2.36,532,3.513,533,1.192,534,2.36,535,2.36,536,1.425,537,0.923,538,1.425,539,2.36,540,2.36,541,1.425,542,1.425,543,1.192,544,2.36,545,1.425,546,1.425,547,1.425,548,1.425,549,3.021,550,1.425,551,1.425,552,1.425,553,2.36,554,2.36,555,3.021,556,3.021,557,3.021,558,3.021,559,3.021,560,2.36,561,2.36,562,2.36,563,1.425,564,1.425]],["title/modules/KeysModule.html",[22,0.566,32,1.685]],["body/modules/KeysModule.html",[3,0.304,4,0.304,5,0.203,13,0.031,15,0.499,19,0.253,20,0.026,21,0.026,22,0.964,24,1.432,25,2.211,32,3.381,35,2.621,36,2.163,37,2.163,39,2.038,41,2.211,42,0.591,48,2.163,49,0.656,68,3.183,565,3.736,566,3.736,567,3.736,568,4.467,569,4.467]],["title/injectables/KeysService.html",[50,0.334,68,1.539]],["body/injectables/KeysService.html",[3,0.213,4,0.213,5,0.143,7,0.559,8,0.84,12,0.57,13,0.032,14,1.665,15,0.454,19,0.178,20,0.02,21,0.02,42,0.415,49,0.633,50,0.452,51,1.007,54,2.186,55,2.342,56,1.275,65,1.709,68,2.087,69,1.446,71,0.929,72,0.929,73,0.79,75,3.039,85,2.608,86,1.275,87,2.163,88,1.283,93,1.578,106,2.01,119,1.283,120,1.283,121,1.738,123,1.497,132,1.091,137,1.833,138,2.626,139,2.626,142,1.275,144,2.608,145,1.761,146,1.761,149,1.665,152,1.283,159,1.761,184,2.792,301,4.043,343,2.626,348,2.288,438,3.139,478,2.285,482,2.087,570,2.626,571,5.295,572,4.92,573,4.309,574,3.14,575,3.14,576,4.92,577,5.871,578,3.14,579,4.309,580,4.309,581,2.626,582,3.14,583,4.309,584,3.14,585,3.14,586,3.14,587,3.14,588,3.14,589,3.14,590,4.641,591,4.309,592,3.14,593,2.626,594,3.14,595,3.14,596,3.14,597,3.14]],["title/interfaces/MirrorNode.html",[0,0.8,378,1.411]],["body/interfaces/MirrorNode.html",[0,1.187,2,2.095,3,0.321,4,0.321,5,0.215,7,0.84,8,1.091,12,0.74,13,0.03,19,0.267,20,0.027,21,0.027,73,1.408,93,2.046,378,2.484,598,3.945,599,6.164,600,4.491]],["title/interfaces/Operator.html",[0,0.8,176,1.298]],["body/interfaces/Operator.html",[0,1.159,2,2.046,3,0.313,4,0.313,5,0.21,7,0.821,8,1.075,12,0.781,13,0.03,19,0.26,20,0.026,21,0.026,73,1.388,88,2.499,90,3.57,93,2.088,176,2.253,581,5.115,601,3.852]],["title/interfaces/PrivateKeyList.html",[0,0.8,137,1.855]],["body/interfaces/PrivateKeyList.html",[0,1.169,2,2.062,3,0.316,4,0.316,5,0.211,7,0.827,8,1.08,12,0.733,13,0.031,15,0.428,19,0.263,20,0.026,21,0.026,88,2.505,106,1.897,132,1.613,137,3.233,301,4.719,590,5.128,602,3.883,603,3.883]],["title/modules/RestModule.html",[22,0.566,33,1.298]],["body/modules/RestModule.html",[3,0.257,4,0.257,5,0.172,12,0.646,13,0.032,15,0.557,19,0.214,20,0.023,21,0.023,22,1.016,24,1.214,33,2.331,39,1.838,40,1.994,41,1.994,42,0.501,49,0.556,56,1.121,69,1.333,71,1.445,72,1.445,73,1.229,86,1.445,142,1.445,216,4.157,217,2.454,218,3.556,219,2.686,221,3.935,222,4.302,223,2.454,224,3.556,228,3.556,229,2.759,230,2.21,231,4.082,232,3.167,233,2.759,234,3.167,235,2.454,236,3.167,378,1.682,379,2.759,458,2.454,465,3.131,604,3.787,605,3.787,606,3.787,607,5.402,608,2.759]],["title/injectables/RestService.html",[50,0.334,465,1.685]],["body/injectables/RestService.html",[3,0.238,4,0.238,5,0.159,7,0.622,8,0.903,12,0.732,13,0.032,15,0.51,19,0.198,20,0.022,21,0.022,42,0.462,49,0.513,50,0.486,51,1.12,54,2.308,55,2.417,56,1.371,57,2.754,65,1.609,69,1.511,71,1.371,72,1.371,73,1.166,86,1.034,87,1.892,93,1.666,119,1.428,120,1.428,121,1.538,123,1.609,141,2.167,142,1.034,145,1.428,146,1.428,152,1.428,159,1.428,194,2.703,204,2.04,219,2.627,230,2.04,235,2.264,242,2.922,265,2.922,378,2.627,379,2.546,465,2.455,478,1.853,482,1.692,608,2.546,609,2.922,610,4.632,611,6.034,612,4.632,613,4.632,614,3.494,615,3.494,616,4.632,617,3.494,618,3.494,619,3.494,620,5.532,621,3.494,622,3.494,623,3.494,624,3.494,625,3.494,626,3.494,627,3.494]],["title/interfaces/TokenBalance.html",[0,0.8,17,1.855]],["body/interfaces/TokenBalance.html",[0,1.166,2,2.057,3,0.315,4,0.315,5,0.211,7,0.825,8,1.079,12,0.782,13,0.03,17,3.228,19,0.262,20,0.026,21,0.026,75,3.369,84,5.124,91,3.97,93,1.896,209,5.124,628,3.873]],["title/interfaces/TransactionDetails.html",[0,0.8,537,2.059]],["body/interfaces/TransactionDetails.html",[0,1.175,2,2.073,3,0.317,4,0.317,5,0.212,7,0.831,8,1.084,12,0.735,13,0.031,15,0.43,19,0.264,20,0.026,21,0.026,129,3.438,132,1.621,201,4.475,537,3.601,629,3.903,630,4.475]],["title/modules/TransactionsModule.html",[22,0.566,376,1.855]],["body/modules/TransactionsModule.html",[3,0.269,4,0.269,5,0.18,13,0.031,15,0.552,19,0.224,20,0.024,21,0.024,22,0.894,24,1.268,25,2.051,30,2.303,33,2.499,35,2.431,36,1.916,37,1.916,39,1.89,40,2.051,41,2.051,42,0.523,44,2.097,45,2.309,48,1.916,49,0.581,194,2.309,376,3.808,458,2.564,631,3.309,632,3.309,633,3.956,634,3.309,635,3.43,636,3.43,637,3.956,638,3.956]],["title/injectables/TransactionsRestService.html",[50,0.334,635,1.685]],["body/injectables/TransactionsRestService.html",[3,0.189,4,0.189,5,0.126,7,0.495,12,0.702,13,0.032,15,0.365,19,0.157,20,0.019,21,0.019,42,0.368,49,0.408,50,0.415,51,0.891,56,1.171,65,1.374,69,1.449,71,1.57,72,1.57,73,1.335,85,1.474,86,1.486,87,2.37,90,3.097,93,2.035,121,1.632,141,1.046,142,1.486,145,2.051,146,2.051,152,2.37,159,2.051,194,3.219,204,3.219,460,2.025,464,2.325,465,2.924,476,2.325,478,2.662,479,4.612,481,3.309,482,2.431,485,3.309,486,3.309,600,2.883,630,2.025,635,2.098,639,4.612,640,3.957,641,3.957,642,3.957,643,3.957,644,2.779,645,3.957,646,5.021,647,2.779,648,3.957,649,2.779,650,2.779,651,3.957,652,2.779,653,3.957,654,2.779,655,2.779,656,5.021,657,3.957,658,3.957,659,3.957,660,3.957,661,3.957,662,3.957,663,3.957,664,3.957,665,3.957,666,2.779,667,2.779,668,2.779,669,2.779,670,2.779]],["title/injectables/TransactionsService.html",[50,0.334,636,1.685]],["body/injectables/TransactionsService.html",[3,0.24,4,0.162,5,0.108,7,0.424,8,0.69,12,0.716,13,0.032,15,0.389,19,0.135,20,0.017,21,0.017,42,0.315,49,0.35,50,0.371,51,0.764,54,1.874,55,2.135,56,1.047,57,3.234,65,1.229,66,1.39,67,2.135,69,1.478,71,1.547,72,1.547,73,1.315,86,1.476,87,2.361,88,1.907,93,1.353,98,1.735,106,2.038,119,0.973,120,0.973,121,1.757,123,1.229,129,1.875,132,0.827,133,1.39,141,0.897,142,1.476,143,2.734,144,2.237,145,2.038,146,2.038,147,1.875,148,3.501,149,2.644,151,2.064,152,2.271,153,2.734,157,2.734,158,2.462,159,2.038,175,2.292,176,1.445,177,2.292,180,3.051,181,2.292,183,1.39,184,1.544,198,1.544,203,1.735,205,1.992,238,1.263,244,1.39,322,1.992,357,1.992,441,1.735,478,1.875,482,1.713,533,2.958,543,2.958,630,4.137,636,1.875,671,1.992,672,3.537,673,3.537,674,3.537,675,3.537,676,3.537,677,3.537,678,3.537,679,2.382,680,2.382,681,3.537,682,2.382,683,5.558,684,3.537,685,2.382,686,3.537,687,2.382,688,3.537,689,2.382,690,3.537,691,4.219,692,3.537,693,3.537,694,3.537,695,3.537,696,3.537,697,3.537,698,3.537,699,2.382,700,3.537,701,2.382,702,2.958,703,3.537,704,2.382,705,2.382,706,2.382,707,2.382,708,2.382,709,2.382]],["title/coverage.html",[710,3.633]],["body/coverage.html",[0,1.552,1,2.48,5,0.174,6,3.201,12,0.506,13,0.031,17,2.234,20,0.023,21,0.023,34,2.029,50,0.672,52,3.201,67,1.564,68,1.854,106,1.564,121,1.133,137,2.234,176,1.564,208,5.386,219,1.7,237,3.201,287,2.029,290,3.201,374,2.48,378,1.7,390,3.201,393,3.201,400,2.029,403,3.201,453,2.234,454,2.234,459,3.201,460,3.581,465,2.029,491,3.201,537,2.48,570,3.201,598,3.201,601,3.201,602,3.201,603,3.201,609,3.201,628,3.201,629,3.201,635,2.029,636,2.029,639,3.201,671,3.201,710,3.201,711,3.828,712,3.828,713,3.828,714,3.828,715,3.828,716,5.925,717,5.429,718,3.828,719,3.828,720,3.828,721,4.915,722,3.828,723,3.828,724,5.729,725,5.429,726,3.828,727,3.828]],["title/dependencies.html",[25,1.562,728,2.216]],["body/dependencies.html",[13,0.031,20,0.027,21,0.027,25,1.986,42,0.643,132,1.688,229,3.541,263,4.065,264,4.065,608,3.541,729,4.86,730,4.86,731,4.86,732,4.86,733,4.86,734,4.86,735,4.86,736,4.86,737,4.86]],["title/index.html",[7,0.472,702,2.216,738,2.65]],["body/index.html",[5,0.124,13,0.032,15,0.567,19,0.221,20,0.019,21,0.019,22,0.696,34,2.42,39,1.029,40,1.597,42,0.517,48,1.323,49,0.574,50,0.41,57,1.448,65,0.949,68,2.21,83,3.269,88,1.597,90,2.282,106,1.597,121,1.157,123,0.949,132,0.949,141,2.126,147,2.072,163,2.533,175,1.77,194,1.595,195,1.99,217,1.77,223,1.77,228,1.99,233,1.99,238,2.072,239,2.848,244,2.908,245,2.285,256,1.99,270,1.77,287,2.42,298,2.285,303,2.285,306,2.285,348,3.84,369,2.533,378,1.736,400,2.42,408,2.285,438,1.99,458,1.77,482,2.656,593,3.269,600,1.99,635,2.072,636,1.448,739,4.916,740,5.048,741,2.732,742,2.732,743,2.732,744,2.732,745,3.909,746,2.732,747,2.732,748,2.732,749,2.732,750,3.909,751,2.732,752,2.732,753,3.909,754,2.732,755,2.732,756,3.909,757,2.732,758,2.732,759,2.732,760,2.732,761,3.909,762,3.909,763,2.732,764,4.564,765,2.732,766,2.732,767,2.732,768,2.732,769,2.732,770,2.732,771,2.732,772,4.982,773,2.732,774,2.732,775,2.732,776,2.732,777,2.732,778,2.732,779,2.732,780,2.732,781,2.732,782,2.732,783,2.732,784,2.732,785,2.732,786,2.732,787,2.732,788,2.732,789,2.732,790,2.732,791,2.732,792,3.909,793,2.732,794,2.732,795,2.732,796,2.732,797,2.732,798,2.732,799,2.732,800,2.732,801,4.564,802,5.483,803,2.732,804,2.732,805,2.732,806,2.732,807,2.732,808,2.732,809,2.732,810,2.732,811,2.732,812,2.732,813,2.732,814,2.732,815,2.732,816,2.732,817,2.732]],["title/modules.html",[24,1.393]],["body/modules.html",[13,0.026,20,0.026,21,0.026,23,2.689,24,1.477,30,1.734,31,2.442,32,2.442,33,1.882,282,2.689,369,2.985,376,2.689,381,2.689,818,6.347,819,6.347,820,6.347,821,6.511,822,5.901,823,5.901]],["title/overview.html",[824,3.633]],["body/overview.html",[2,1.473,13,0.031,20,0.021,21,0.021,23,3.703,24,1.064,25,1.828,26,2.774,27,2.774,28,2.774,29,2.774,30,2.28,31,3.398,32,3.089,33,2.381,34,3.157,35,2.166,36,1.607,37,1.607,51,1.064,68,2.884,282,3.582,283,2.774,285,2.774,286,2.774,287,3.157,376,3.68,381,3.476,396,2.774,398,2.774,399,2.774,400,3.157,449,2.774,450,2.774,452,2.774,453,3.476,454,3.476,565,2.774,566,2.774,567,2.774,631,2.774,632,2.774,634,2.774,635,3.157,636,3.157,824,2.774,825,3.317,826,3.317,827,3.317]],["title/properties.html",[8,0.746,728,2.216]],["body/properties.html",[8,0.92,13,0.031,20,0.027,21,0.027,53,2.285,163,3.057,238,2.501,244,3.264,739,4.985,740,3.945,828,4.717,829,4.717,830,4.717,831,4.717,832,4.717,833,4.717,834,4.717,835,4.717,836,4.717,837,4.717,838,4.717,839,4.717,840,4.717,841,4.717,842,4.717,843,4.717]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["0.27.2",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["0/12",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["1).then(account",{"_index":790,"title":{},"body":{"index.html":{}}}],["1.0.2",{"_index":829,"title":{},"body":{"properties.html":{}}}],["1.1.1",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":562,"title":{},"body":{"injectables/HtsService.html":{}}}],["100",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":663,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["11",{"_index":826,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["2.14.0",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":827,"title":{},"body":{"overview.html":{}}}],["7.5.5",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["8.4.5",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":825,"title":{},"body":{"overview.html":{}}}],["9/10",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["account",{"_index":83,"title":{},"body":{"injectables/AccountsService.html":{},"index.html":{}}}],["account's",{"_index":155,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.accountid",{"_index":798,"title":{},"body":{"index.html":{}}}],["account.key.tostring",{"_index":793,"title":{},"body":{"index.html":{}}}],["accountbalance",{"_index":1,"title":{"interfaces/AccountBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"coverage.html":{}}}],["accountbalancequery",{"_index":124,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountcreatetransaction",{"_index":125,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountid",{"_index":90,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/Operator.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["accountid(6",{"_index":168,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfo",{"_index":126,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accountinfoquery",{"_index":127,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":43,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts/accounts.module",{"_index":383,"title":{},"body":{"modules/HederaModule.html":{}}}],["accountsmodule",{"_index":23,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":34,"title":{"injectables/AccountsService.html":{}},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["accountupdatetransaction",{"_index":128,"title":{},"body":{"injectables/AccountsService.html":{}}}],["add",{"_index":751,"title":{},"body":{"index.html":{}}}],["addhbartransfer(from",{"_index":550,"title":{},"body":{"injectables/HtsService.html":{}}}],["addhbartransfer(to",{"_index":551,"title":{},"body":{"injectables/HtsService.html":{}}}],["addmetadata(buffer.from(cid",{"_index":541,"title":{},"body":{"injectables/HtsService.html":{}}}],["addnfttransfer(new",{"_index":564,"title":{},"body":{"injectables/HtsService.html":{}}}],["addtokentransfer(tokenid",{"_index":561,"title":{},"body":{"injectables/HtsService.html":{}}}],["admin",{"_index":336,"title":{},"body":{"injectables/HcsService.html":{}}}],["adminkey",{"_index":304,"title":{},"body":{"injectables/HcsService.html":{}}}],["amount",{"_index":518,"title":{},"body":{"injectables/HtsService.html":{}}}],["apikey",{"_index":599,"title":{},"body":{"interfaces/MirrorNode.html":{}}}],["app.controller",{"_index":763,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":755,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":765,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":762,"title":{},"body":{"index.html":{}}}],["append",{"_index":404,"title":{},"body":{"injectables/HfsService.html":{}}}],["append(fileid",{"_index":409,"title":{},"body":{"injectables/HfsService.html":{}}}],["appmodule",{"_index":753,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":764,"title":{},"body":{"index.html":{}}}],["array",{"_index":14,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsRestService.html":{},"injectables/KeysService.html":{}}}],["array(length).keys()].foreach",{"_index":595,"title":{},"body":{"injectables/KeysService.html":{}}}],["associatetoken",{"_index":492,"title":{},"body":{"injectables/HtsService.html":{}}}],["associatetoken(accountid",{"_index":502,"title":{},"body":{"injectables/HtsService.html":{}}}],["async",{"_index":57,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["async(message",{"_index":809,"title":{},"body":{"index.html":{}}}],["author",{"_index":843,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":622,"title":{},"body":{"injectables/RestService.html":{}}}],["available",{"_index":823,"title":{},"body":{"modules.html":{}}}],["await",{"_index":152,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["axios",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["balance",{"_index":84,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["browse",{"_index":821,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":818,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":835,"title":{},"body":{"properties.html":{}}}],["call",{"_index":610,"title":{},"body":{"injectables/RestService.html":{}}}],["call(`schedules/${transactionid",{"_index":670,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`tokens/${tokenid",{"_index":480,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances",{"_index":483,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?${next",{"_index":488,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`tokens/${tokenid}/balances?account.id=gt:${walletid",{"_index":490,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["call(`transactions/?account.id=${accountid",{"_index":669,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&${next",{"_index":664,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(`transactions/?account.id=${accountid}&timestamp=gt:${timestamp",{"_index":655,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["call(endpoint",{"_index":613,"title":{},"body":{"injectables/RestService.html":{}}}],["call(url",{"_index":668,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["callback",{"_index":310,"title":{},"body":{"injectables/HcsService.html":{}}}],["callback(message",{"_index":367,"title":{},"body":{"injectables/HcsService.html":{}}}],["calling",{"_index":774,"title":{},"body":{"index.html":{}}}],["catch",{"_index":157,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["catch(error",{"_index":482,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["choice",{"_index":259,"title":{},"body":{"injectables/ClientService.html":{}}}],["cid",{"_index":511,"title":{},"body":{"injectables/HtsService.html":{}}}],["class",{"_index":49,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["client.formainnet",{"_index":277,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.fortestnet",{"_index":276,"title":{},"body":{"injectables/ClientService.html":{}}}],["client.service",{"_index":227,"title":{},"body":{"modules/ClientModule.html":{}}}],["client/client.module",{"_index":44,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["client/client.service",{"_index":133,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["clientmodule",{"_index":30,"title":{"modules/ClientModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["clientmodule.forroot(options",{"_index":384,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientmodule.forrootasync(options",{"_index":388,"title":{},"body":{"modules/HederaModule.html":{}}}],["clientservice",{"_index":67,"title":{"injectables/ClientService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["cluster_accountsmodule",{"_index":26,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":27,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":29,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":28,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule",{"_index":283,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_exports",{"_index":285,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hcsmodule_imports",{"_index":284,"title":{},"body":{"modules/HcsModule.html":{}}}],["cluster_hcsmodule_providers",{"_index":286,"title":{},"body":{"modules/HcsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule",{"_index":396,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_exports",{"_index":398,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_hfsmodule_imports",{"_index":397,"title":{},"body":{"modules/HfsModule.html":{}}}],["cluster_hfsmodule_providers",{"_index":399,"title":{},"body":{"modules/HfsModule.html":{},"overview.html":{}}}],["cluster_htsmodule",{"_index":449,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_exports",{"_index":450,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_htsmodule_imports",{"_index":451,"title":{},"body":{"modules/HtsModule.html":{}}}],["cluster_htsmodule_providers",{"_index":452,"title":{},"body":{"modules/HtsModule.html":{},"overview.html":{}}}],["cluster_keysmodule",{"_index":565,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_exports",{"_index":567,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_keysmodule_providers",{"_index":566,"title":{},"body":{"modules/KeysModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":631,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":632,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":633,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":634,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["configmodule",{"_index":228,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["configservice",{"_index":772,"title":{},"body":{"index.html":{}}}],["configservice.get('network",{"_index":779,"title":{},"body":{"index.html":{}}}],["configservice.get(`mirrornode",{"_index":778,"title":{},"body":{"index.html":{}}}],["configservice.get>(`operators",{"_index":777,"title":{},"body":{"index.html":{}}}],["connect",{"_index":760,"title":{},"body":{"index.html":{}}}],["connection",{"_index":271,"title":{},"body":{"injectables/ClientService.html":{}}}],["consensus",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["console.error(error",{"_index":802,"title":{},"body":{"index.html":{}}}],["console.log(\"account",{"_index":791,"title":{},"body":{"index.html":{}}}],["console.log(\"subscribed",{"_index":813,"title":{},"body":{"index.html":{}}}],["console.log(hcsmessage",{"_index":812,"title":{},"body":{"index.html":{}}}],["console.log(response",{"_index":801,"title":{},"body":{"index.html":{}}}],["const",{"_index":149,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["constructor",{"_index":65,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["constructor(clientservice",{"_index":66,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["constructor(hederaoptions",{"_index":242,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["constructor(restservice",{"_index":464,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["content",{"_index":411,"title":{},"body":{"injectables/HfsService.html":{}}}],["contents",{"_index":420,"title":{},"body":{"injectables/HfsService.html":{}}}],["controllers",{"_index":48,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["coverage",{"_index":710,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":270,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"index.html":{}}}],["create(key",{"_index":414,"title":{},"body":{"injectables/HfsService.html":{}}}],["createaccount",{"_index":58,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createaccount(balance",{"_index":74,"title":{},"body":{"injectables/AccountsService.html":{}}}],["creates",{"_index":79,"title":{},"body":{"injectables/AccountsService.html":{}}}],["createscheduledtransaction",{"_index":672,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createscheduledtransaction(transactiontoschedule",{"_index":678,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtopic",{"_index":291,"title":{},"body":{"injectables/HcsService.html":{}}}],["createtopic(adminkey",{"_index":299,"title":{},"body":{"injectables/HcsService.html":{}}}],["creating",{"_index":147,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["currentadminkey",{"_index":326,"title":{},"body":{"injectables/HcsService.html":{}}}],["decimals",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{}}}],["decorators",{"_index":246,"title":{},"body":{"injectables/ClientService.html":{}}}],["default",{"_index":119,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["defined",{"_index":69,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["delete",{"_index":308,"title":{},"body":{"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["delete(fileid",{"_index":416,"title":{},"body":{"injectables/HfsService.html":{}}}],["deletetopic",{"_index":292,"title":{},"body":{"injectables/HcsService.html":{}}}],["deletetopic(topicid",{"_index":305,"title":{},"body":{"injectables/HcsService.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":53,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"properties.html":{}}}],["dex",{"_index":832,"title":{},"body":{"properties.html":{}}}],["dissociatetoken",{"_index":493,"title":{},"body":{"injectables/HtsService.html":{}}}],["dissociatetoken(accountid",{"_index":504,"title":{},"body":{"injectables/HtsService.html":{}}}],["documentation",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["double",{"_index":351,"title":{},"body":{"injectables/HcsService.html":{}}}],["dynamicmodule",{"_index":222,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["emitter",{"_index":264,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["end",{"_index":314,"title":{},"body":{"injectables/HcsService.html":{}}}],["endpoint",{"_index":615,"title":{},"body":{"injectables/RestService.html":{}}}],["error",{"_index":158,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["example",{"_index":783,"title":{},"body":{"index.html":{}}}],["execute",{"_index":344,"title":{},"body":{"injectables/HcsService.html":{}}}],["execute(this.clientservice.getclient",{"_index":547,"title":{},"body":{"injectables/HtsService.html":{}}}],["executed",{"_index":354,"title":{},"body":{"injectables/HcsService.html":{}}}],["executing",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}}}],["fetches",{"_index":101,"title":{},"body":{"injectables/AccountsService.html":{}}}],["fetching",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["fileappendtransaction",{"_index":426,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecontentsquery",{"_index":427,"title":{},"body":{"injectables/HfsService.html":{}}}],["filecreatetransaction",{"_index":428,"title":{},"body":{"injectables/HfsService.html":{}}}],["filedeletetransaction",{"_index":429,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileid",{"_index":410,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfo",{"_index":430,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileinfoquery",{"_index":431,"title":{},"body":{"injectables/HfsService.html":{}}}],["fileupdatetransaction",{"_index":432,"title":{},"body":{"injectables/HfsService.html":{}}}],["filters",{"_index":646,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["finally",{"_index":345,"title":{},"body":{"injectables/HcsService.html":{}}}],["first",{"_index":754,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":217,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forroot(options",{"_index":218,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["forrootasync",{"_index":223,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["forrootasync(options",{"_index":224,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["freezeaccount",{"_index":59,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezeaccount(accountid",{"_index":89,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezekey",{"_index":92,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezes",{"_index":95,"title":{},"body":{"injectables/AccountsService.html":{}}}],["freezewith(this.clientservice.getclient",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["freezing",{"_index":340,"title":{},"body":{"injectables/HcsService.html":{}}}],["function",{"_index":317,"title":{},"body":{"injectables/HcsService.html":{}}}],["generate",{"_index":592,"title":{},"body":{"injectables/KeysService.html":{}}}],["generated",{"_index":792,"title":{},"body":{"index.html":{}}}],["generatekey",{"_index":571,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist",{"_index":572,"title":{},"body":{"injectables/KeysService.html":{}}}],["generatekeylist(publickeys",{"_index":575,"title":{},"body":{"injectables/KeysService.html":{}}}],["generating",{"_index":794,"title":{},"body":{"index.html":{}}}],["getallholders",{"_index":461,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholders(tokenid",{"_index":468,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet",{"_index":462,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getallholdersfromwallet(tokenid",{"_index":471,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["getalltransactions",{"_index":640,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactions(accountid",{"_index":645,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp",{"_index":641,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getalltransactionsfromtimestamp(timestamp",{"_index":648,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getclient",{"_index":240,"title":{},"body":{"injectables/ClientService.html":{}}}],["getcontents",{"_index":405,"title":{},"body":{"injectables/HfsService.html":{}}}],["getcontents(fileid",{"_index":418,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfo",{"_index":60,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfo(accountid",{"_index":99,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getinfos",{"_index":406,"title":{},"body":{"injectables/HfsService.html":{}}}],["getinfos(fileid",{"_index":421,"title":{},"body":{"injectables/HfsService.html":{}}}],["geting",{"_index":707,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getkeys",{"_index":61,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getkeys(accountid",{"_index":103,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getlatesttransactions",{"_index":642,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getlatesttransactions(accountid",{"_index":651,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getmessages",{"_index":293,"title":{},"body":{"injectables/HcsService.html":{}}}],["getmessages(topicid",{"_index":309,"title":{},"body":{"injectables/HcsService.html":{}}}],["getnftinfo",{"_index":494,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnftinfo(tokenid",{"_index":506,"title":{},"body":{"injectables/HtsService.html":{}}}],["getnodeoperator",{"_index":241,"title":{},"body":{"injectables/ClientService.html":{}}}],["getquerybalance",{"_index":62,"title":{},"body":{"injectables/AccountsService.html":{}}}],["getquerybalance(accountid",{"_index":107,"title":{},"body":{"injectables/AccountsService.html":{}}}],["gets",{"_index":253,"title":{},"body":{"injectables/ClientService.html":{}}}],["getscheduledtransaction",{"_index":643,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtransaction(transactionid",{"_index":653,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["getscheduledtrasaction",{"_index":673,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getscheduledtrasaction(scheduleid",{"_index":681,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["getting",{"_index":702,"title":{"index.html":{}},"body":{"injectables/TransactionsService.html":{}}}],["gettokeninfo",{"_index":463,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettokeninfo(tokenid",{"_index":474,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["gettransactionquery",{"_index":674,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionquery(transactionid",{"_index":684,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt",{"_index":675,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["gettransactionreceipt(transactionid",{"_index":686,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["git+https://github.com/hbarsuite/nestjs",{"_index":841,"title":{},"body":{"properties.html":{}}}],["given",{"_index":804,"title":{},"body":{"index.html":{}}}],["gives",{"_index":249,"title":{},"body":{"injectables/ClientService.html":{}}}],["global",{"_index":386,"title":{},"body":{"modules/HederaModule.html":{}}}],["graph",{"_index":822,"title":{},"body":{"modules.html":{}}}],["hashgraph/sdk",{"_index":132,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["hashgraph/sdk/lib/contract/contractcreateflow",{"_index":16,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["hbar",{"_index":11,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["hbar(amount",{"_index":552,"title":{},"body":{"injectables/HtsService.html":{}}}],["hbar(balance",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{}}}],["hbar(maxtransactionfee",{"_index":437,"title":{},"body":{"injectables/HfsService.html":{}}}],["hbars",{"_index":9,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["hcs",{"_index":298,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["hcs.service",{"_index":289,"title":{},"body":{"modules/HcsModule.html":{}}}],["hcs/hcs.module",{"_index":380,"title":{},"body":{"modules/HederaModule.html":{}}}],["hcsmessage",{"_index":810,"title":{},"body":{"index.html":{}}}],["hcsmodule",{"_index":282,"title":{"modules/HcsModule.html":{}},"body":{"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules.html":{},"overview.html":{}}}],["hcsservice",{"_index":287,"title":{"injectables/HcsService.html":{}},"body":{"modules/HcsModule.html":{},"injectables/HcsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["headers",{"_index":620,"title":{},"body":{"injectables/RestService.html":{}}}],["hedera",{"_index":244,"title":{},"body":{"injectables/ClientService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["hedera.git",{"_index":842,"title":{},"body":{"properties.html":{}}}],["hedera.service",{"_index":375,"title":{},"body":{"modules/HederaModule.html":{}}}],["hedera/issues",{"_index":837,"title":{},"body":{"properties.html":{}}}],["hedera/lib",{"_index":766,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/accounts/accounts.service",{"_index":787,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hcs/hcs.service",{"_index":785,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/hfs/hfs.service",{"_index":786,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/keys/keys.service",{"_index":784,"title":{},"body":{"index.html":{}}}],["hedera/lib/hedera/transactions/transactions",{"_index":788,"title":{},"body":{"index.html":{}}}],["hederaimport",{"_index":752,"title":{},"body":{"index.html":{}}}],["hederainstead",{"_index":749,"title":{},"body":{"index.html":{}}}],["hederamodule",{"_index":369,"title":{"modules/HederaModule.html":{}},"body":{"modules/HederaModule.html":{},"index.html":{},"modules.html":{}}}],["hederamodule.forroot",{"_index":767,"title":{},"body":{"index.html":{}}}],["hederamodule.forrootasync",{"_index":775,"title":{},"body":{"index.html":{}}}],["hederaoptions",{"_index":219,"title":{"interfaces/HederaOptions.html":{}},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{}}}],["hederaservice",{"_index":374,"title":{"injectables/HederaService.html":{}},"body":{"modules/HederaModule.html":{},"injectables/HederaService.html":{},"coverage.html":{}}}],["hfs",{"_index":408,"title":{},"body":{"injectables/HfsService.html":{},"index.html":{}}}],["hfs.service",{"_index":402,"title":{},"body":{"modules/HfsModule.html":{}}}],["hfs/hfs.module",{"_index":382,"title":{},"body":{"modules/HederaModule.html":{}}}],["hfsmodule",{"_index":381,"title":{"modules/HfsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules.html":{},"overview.html":{}}}],["hfsservice",{"_index":400,"title":{"injectables/HfsService.html":{}},"body":{"modules/HfsModule.html":{},"injectables/HfsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["holders",{"_index":470,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["holders.concat(response.balances",{"_index":484,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["homepage",{"_index":833,"title":{},"body":{"properties.html":{}}}],["hsuite",{"_index":739,"title":{},"body":{"index.html":{},"properties.html":{}}}],["hts",{"_index":457,"title":{},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{}}}],["hts.service",{"_index":456,"title":{},"body":{"modules/HtsModule.html":{}}}],["hts/hts.module",{"_index":47,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["htsmodule",{"_index":31,"title":{"modules/HtsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules.html":{},"overview.html":{}}}],["htsrestservice",{"_index":453,"title":{"injectables/HtsRestService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"coverage.html":{},"overview.html":{}}}],["htsservice",{"_index":454,"title":{"injectables/HtsService.html":{}},"body":{"modules/HtsModule.html":{},"injectables/HtsService.html":{},"coverage.html":{},"overview.html":{}}}],["httpmodule",{"_index":607,"title":{},"body":{"modules/RestModule.html":{}}}],["https://github.com/hbarsuite/nestjs",{"_index":836,"title":{},"body":{"properties.html":{}}}],["https://hsuite.finance",{"_index":834,"title":{},"body":{"properties.html":{}}}],["https://mainnet",{"_index":770,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":611,"title":{},"body":{"injectables/RestService.html":{}}}],["id",{"_index":98,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["identifier",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["if(filters",{"_index":667,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["if(key",{"_index":555,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(length",{"_index":594,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(memo",{"_index":553,"title":{},"body":{"injectables/HtsService.html":{}}}],["if(publickeys",{"_index":587,"title":{},"body":{"injectables/KeysService.html":{}}}],["if(this.mirrornode.apikey",{"_index":621,"title":{},"body":{"injectables/RestService.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["imported",{"_index":782,"title":{},"body":{"index.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["infos",{"_index":447,"title":{},"body":{"injectables/HfsService.html":{}}}],["inject",{"_index":235,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["inject('hederaoptions",{"_index":265,"title":{},"body":{"injectables/ClientService.html":{},"injectables/RestService.html":{}}}],["injectable",{"_index":50,"title":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["injectables",{"_index":51,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"overview.html":{}}}],["install",{"_index":748,"title":{},"body":{"index.html":{}}}],["installation",{"_index":744,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{}},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccountBalance.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"overview.html":{}}}],["invalid",{"_index":250,"title":{},"body":{"injectables/ClientService.html":{}}}],["isc",{"_index":839,"title":{},"body":{"properties.html":{}}}],["js",{"_index":741,"title":{},"body":{"index.html":{}}}],["json.parse(buffer.from(message.contents).tostring",{"_index":811,"title":{},"body":{"index.html":{}}}],["key",{"_index":106,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["key).keylist",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).publickey",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{}}}],["key).then(response",{"_index":800,"title":{},"body":{"index.html":{}}}],["keylist",{"_index":301,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["keylist(publickeylist",{"_index":591,"title":{},"body":{"injectables/KeysService.html":{}}}],["keys",{"_index":438,"title":{},"body":{"injectables/HfsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["keys.service",{"_index":569,"title":{},"body":{"modules/KeysModule.html":{}}}],["keys/keys.module",{"_index":46,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{}}}],["keys/keys.service",{"_index":134,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keyservice",{"_index":582,"title":{},"body":{"injectables/KeysService.html":{}}}],["keyslength",{"_index":76,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keysmodule",{"_index":32,"title":{"modules/KeysModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HederaModule.html":{},"modules/KeysModule.html":{},"modules.html":{},"overview.html":{}}}],["keysservice",{"_index":68,"title":{"injectables/KeysService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["keysthreshold",{"_index":77,"title":{},"body":{"injectables/AccountsService.html":{}}}],["keywords",{"_index":830,"title":{},"body":{"properties.html":{}}}],["latest",{"_index":803,"title":{},"body":{"index.html":{}}}],["length",{"_index":576,"title":{},"body":{"injectables/KeysService.html":{}}}],["license",{"_index":838,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":315,"title":{},"body":{"injectables/HcsService.html":{}}}],["list.types",{"_index":139,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["list.types.ts",{"_index":603,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["lodash",{"_index":477,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["lodash.get(response.links.next.split",{"_index":487,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["logger",{"_index":55,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["logger(\"accounts",{"_index":122,"title":{},"body":{"injectables/AccountsService.html":{}}}],["logger(\"client",{"_index":255,"title":{},"body":{"injectables/ClientService.html":{}}}],["logger(\"hcs",{"_index":328,"title":{},"body":{"injectables/HcsService.html":{}}}],["logger(\"hedera",{"_index":394,"title":{},"body":{"injectables/HederaService.html":{}}}],["logger(\"hfs",{"_index":425,"title":{},"body":{"injectables/HfsService.html":{}}}],["logger(\"hts",{"_index":526,"title":{},"body":{"injectables/HtsService.html":{}}}],["logger(\"keys",{"_index":580,"title":{},"body":{"injectables/KeysService.html":{}}}],["logger(\"rest",{"_index":616,"title":{},"body":{"injectables/RestService.html":{}}}],["logger(\"transactions",{"_index":690,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["mainnet",{"_index":256,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["matching",{"_index":21,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxtransactionfee",{"_index":412,"title":{},"body":{"injectables/HfsService.html":{}}}],["memo",{"_index":115,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["message",{"_index":311,"title":{},"body":{"injectables/HcsService.html":{}}}],["method",{"_index":756,"title":{},"body":{"index.html":{}}}],["methods",{"_index":56,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["mintnfttoken",{"_index":495,"title":{},"body":{"injectables/HtsService.html":{}}}],["mintnfttoken(tokenid",{"_index":509,"title":{},"body":{"injectables/HtsService.html":{}}}],["mirror",{"_index":761,"title":{},"body":{"index.html":{}}}],["mirror.types",{"_index":391,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["mirrornode",{"_index":378,"title":{"interfaces/MirrorNode.html":{}},"body":{"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/MirrorNode.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"coverage.html":{},"index.html":{}}}],["module",{"_index":22,"title":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["multi",{"_index":81,"title":{},"body":{"injectables/AccountsService.html":{}}}],["name",{"_index":72,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["need",{"_index":593,"title":{},"body":{"injectables/KeysService.html":{},"index.html":{}}}],["needed",{"_index":759,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":740,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nestjs/axios",{"_index":608,"title":{},"body":{"modules/RestModule.html":{},"injectables/RestService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":229,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":263,"title":{},"body":{"injectables/ClientService.html":{},"dependencies.html":{}}}],["network",{"_index":238,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{},"index.html":{},"properties.html":{}}}],["new",{"_index":121,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{}}}],["newkey",{"_index":114,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["next",{"_index":486,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["nextarray",{"_index":657,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.length).join",{"_index":660,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nextarray.slice(1",{"_index":659,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["nftid",{"_index":534,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftid(tokenid",{"_index":544,"title":{},"body":{"injectables/HtsService.html":{}}}],["nftinfos",{"_index":545,"title":{},"body":{"injectables/HtsService.html":{}}}],["node",{"_index":163,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"index.html":{},"properties.html":{}}}],["npm",{"_index":745,"title":{},"body":{"index.html":{}}}],["null",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["number",{"_index":75,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/TokenBalance.html":{}}}],["number(amount",{"_index":563,"title":{},"body":{"injectables/HtsService.html":{}}}],["number(response.tokendecimals?._map.get(tokenid",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{}}}],["number(response.tokens._map.get(tokenid)?.tostring",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{}}}],["offline",{"_index":165,"title":{},"body":{"injectables/AccountsService.html":{}}}],["once",{"_index":781,"title":{},"body":{"index.html":{}}}],["onevent",{"_index":262,"title":{},"body":{"injectables/ClientService.html":{}}}],["onevent('client.invalid_node_operator",{"_index":247,"title":{},"body":{"injectables/ClientService.html":{}}}],["operator",{"_index":176,"title":{"interfaces/Operator.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"interfaces/Operator.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["operator.types",{"_index":392,"title":{},"body":{"interfaces/HederaOptions.html":{}}}],["operators",{"_index":239,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{},"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["options",{"_index":221,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["options.useexisting",{"_index":236,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["options.usefactory",{"_index":234,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["order",{"_index":757,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":343,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["overview",{"_index":824,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":728,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":140,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{}}}],["parameters",{"_index":71,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["pass",{"_index":758,"title":{},"body":{"index.html":{}}}],["pausekey",{"_index":514,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken",{"_index":496,"title":{},"body":{"injectables/HtsService.html":{}}}],["pausetoken(tokenid",{"_index":513,"title":{},"body":{"injectables/HtsService.html":{}}}],["private",{"_index":141,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey",{"_index":88,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["privatekey.fromstring('your_private_key_here",{"_index":815,"title":{},"body":{"index.html":{}}}],["privatekey.fromstring(account.key.tostring",{"_index":799,"title":{},"body":{"index.html":{}}}],["privatekey.generate",{"_index":583,"title":{},"body":{"injectables/KeysService.html":{}}}],["privatekeylist",{"_index":137,"title":{"interfaces/PrivateKeyList.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["privatekeys",{"_index":590,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/PrivateKeyList.html":{}}}],["privatekeys.push(key",{"_index":596,"title":{},"body":{"injectables/KeysService.html":{}}}],["promise",{"_index":87,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async",{"_index":143,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve",{"_index":478,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["promise(async(resolve,reject",{"_index":549,"title":{},"body":{"injectables/HtsService.html":{}}}],["promise(resolve",{"_index":661,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{},"properties.html":{}}}],["protect",{"_index":773,"title":{},"body":{"index.html":{}}}],["protected",{"_index":54,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["provide",{"_index":231,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["provided",{"_index":586,"title":{},"body":{"injectables/KeysService.html":{}}}],["provider",{"_index":373,"title":{},"body":{"modules/HederaModule.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AccountsModule.html":{},"modules/ClientModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["public",{"_index":105,"title":{},"body":{"injectables/AccountsService.html":{}}}],["public.mirrornode.hedera.com",{"_index":771,"title":{},"body":{"index.html":{}}}],["publickey",{"_index":581,"title":{},"body":{"injectables/KeysService.html":{},"interfaces/Operator.html":{}}}],["publickeylist",{"_index":585,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(key.publickey",{"_index":597,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeylist.push(publickey.fromstring(key",{"_index":589,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys",{"_index":579,"title":{},"body":{"injectables/KeysService.html":{}}}],["publickeys.foreach(key",{"_index":588,"title":{},"body":{"injectables/KeysService.html":{}}}],["query",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["query.execute(this.clientservice.getclient",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/TransactionsService.html":{}}}],["random",{"_index":251,"title":{},"body":{"injectables/ClientService.html":{}}}],["receipt",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["receipt.accountid",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{}}}],["receipt.scheduleid",{"_index":708,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["receipt.status",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["reject",{"_index":145,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["reject(error",{"_index":159,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["related",{"_index":96,"title":{},"body":{"injectables/AccountsService.html":{}}}],["repository",{"_index":840,"title":{},"body":{"properties.html":{}}}],["request",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["requesting",{"_index":441,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["resolve",{"_index":144,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(accountinfo",{"_index":156,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(accountinfo.key",{"_index":161,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(balance",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["resolve(contents.tostring",{"_index":446,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(holders",{"_index":489,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["resolve(info",{"_index":357,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(infos",{"_index":448,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(key",{"_index":584,"title":{},"body":{"injectables/KeysService.html":{}}}],["resolve(nftinfos",{"_index":548,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(receipt",{"_index":543,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.fileid",{"_index":443,"title":{},"body":{"injectables/HfsService.html":{}}}],["resolve(receipt.status",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["resolve(receipt.topicid",{"_index":346,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(receipt.topicsequencenumber?.tostring",{"_index":360,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(response",{"_index":481,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["resolve(response?.data",{"_index":627,"title":{},"body":{"injectables/RestService.html":{}}}],["resolve(scheduleid",{"_index":709,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["resolve(subscription",{"_index":368,"title":{},"body":{"injectables/HcsService.html":{}}}],["resolve(transaction",{"_index":559,"title":{},"body":{"injectables/HtsService.html":{}}}],["resolve(transactions",{"_index":665,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["resolving",{"_index":154,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{}}}],["response",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsRestService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{}}}],["response.hbars",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.links.next.split",{"_index":658,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["response.tokens?._map.foreach((value",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{}}}],["response.tokens?._map.get(tokenid",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rest",{"_index":467,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service",{"_index":458,"title":{},"body":{"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"index.html":{}}}],["rest.service.ts",{"_index":460,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["rest.service.ts:10",{"_index":649,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:24",{"_index":475,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:39",{"_index":647,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:42",{"_index":469,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:5",{"_index":644,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:73",{"_index":652,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:74",{"_index":473,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest.service.ts:86",{"_index":654,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["rest.service.ts:9",{"_index":466,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["rest/rest.module",{"_index":45,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/TransactionsModule.html":{}}}],["rest/rest.service",{"_index":476,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["restmodule",{"_index":33,"title":{"modules/RestModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HederaModule.html":{},"modules/HtsModule.html":{},"modules/RestModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["restmodule.forroot(options",{"_index":385,"title":{},"body":{"modules/HederaModule.html":{}}}],["restmodule.forrootasync(options",{"_index":389,"title":{},"body":{"modules/HederaModule.html":{}}}],["restservice",{"_index":465,"title":{"injectables/RestService.html":{}},"body":{"injectables/HtsRestService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["results",{"_index":20,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":142,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["returns",{"_index":86,"title":{},"body":{"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["run",{"_index":747,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["schedule",{"_index":703,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulecreatetransaction",{"_index":691,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction",{"_index":704,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduledtransaction.execute(this.clientservice.getclient",{"_index":706,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleid",{"_index":683,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["scheduleinfoquery",{"_index":692,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["schedulesigntransaction",{"_index":693,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["sdk",{"_index":742,"title":{},"body":{"index.html":{}}}],["sender",{"_index":556,"title":{},"body":{"injectables/HtsService.html":{}}}],["serialnumber",{"_index":507,"title":{},"body":{"injectables/HtsService.html":{}}}],["service",{"_index":123,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{},"index.html":{}}}],["setaccountid(accountid",{"_index":150,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["setcontents(content",{"_index":434,"title":{},"body":{"injectables/HfsService.html":{}}}],["setfileid(fileid",{"_index":444,"title":{},"body":{"injectables/HfsService.html":{}}}],["setincludechildren(true",{"_index":699,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setincludeduplicates(true",{"_index":698,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setinitialbalance(new",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkey(keyslength",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setkeys([key",{"_index":433,"title":{},"body":{"injectables/HfsService.html":{}}}],["setmessage(message",{"_index":358,"title":{},"body":{"injectables/HcsService.html":{}}}],["setnftid(nftid",{"_index":546,"title":{},"body":{"injectables/HtsService.html":{}}}],["setnodeaccountids([new",{"_index":167,"title":{},"body":{"injectables/AccountsService.html":{}}}],["setscheduledtransaction(transactiontoschedule",{"_index":705,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["setscheduleid(scheduleid",{"_index":700,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["settimeout(resolve",{"_index":662,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["setting",{"_index":162,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{}}}],["settokenid(tokenid",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{}}}],["settokenids([tokenid",{"_index":539,"title":{},"body":{"injectables/HtsService.html":{}}}],["settopicid(topicid",{"_index":355,"title":{},"body":{"injectables/HcsService.html":{}}}],["settransactionid(transactionid",{"_index":697,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["shall",{"_index":746,"title":{},"body":{"index.html":{}}}],["sig",{"_index":82,"title":{},"body":{"injectables/AccountsService.html":{}}}],["sign",{"_index":349,"title":{},"body":{"injectables/HcsService.html":{}}}],["sign(key",{"_index":701,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signature",{"_index":166,"title":{},"body":{"injectables/AccountsService.html":{}}}],["signatures",{"_index":353,"title":{},"body":{"injectables/HcsService.html":{}}}],["signed",{"_index":341,"title":{},"body":{"injectables/HcsService.html":{}}}],["signing",{"_index":151,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["signkey",{"_index":113,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["signscheduledtransaction",{"_index":676,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signscheduledtransaction(scheduleid",{"_index":688,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["signtx",{"_index":172,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.execute(this.clientservice.getclient",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["signtx.sign(adminkey",{"_index":352,"title":{},"body":{"injectables/HcsService.html":{}}}],["signtx.sign(newkey",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["single",{"_index":80,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{}}}],["smart",{"_index":831,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccountBalance.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HcsModule.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"modules/HfsModule.html":{},"injectables/HfsService.html":{},"modules/HtsModule.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"modules/KeysModule.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["specific",{"_index":102,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.module.ts",{"_index":38,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/hedera/accounts/accounts.service.ts",{"_index":52,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/hedera/accounts/accounts.service.ts:166",{"_index":78,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:218",{"_index":94,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:246",{"_index":110,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:273",{"_index":108,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:30",{"_index":70,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:47",{"_index":100,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:77",{"_index":104,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/accounts/accounts.service.ts:96",{"_index":116,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/hedera/client/client.module.ts",{"_index":215,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:23",{"_index":225,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.module.ts:9",{"_index":220,"title":{},"body":{"modules/ClientModule.html":{}}}],["src/hedera/client/client.service.ts",{"_index":237,"title":{},"body":{"injectables/ClientService.html":{},"coverage.html":{}}}],["src/hedera/client/client.service.ts:17",{"_index":254,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:22",{"_index":260,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:27",{"_index":261,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:32",{"_index":258,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:37",{"_index":243,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:61",{"_index":248,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/client/client.service.ts:77",{"_index":252,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/hedera/hcs/hcs.module.ts",{"_index":288,"title":{},"body":{"modules/HcsModule.html":{}}}],["src/hedera/hcs/hcs.service.ts",{"_index":290,"title":{},"body":{"injectables/HcsService.html":{},"coverage.html":{}}}],["src/hedera/hcs/hcs.service.ts:125",{"_index":327,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:211",{"_index":307,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:252",{"_index":324,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:278",{"_index":321,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:28",{"_index":297,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:335",{"_index":316,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hcs/hcs.service.ts:47",{"_index":302,"title":{},"body":{"injectables/HcsService.html":{}}}],["src/hedera/hedera.module.ts",{"_index":370,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:17",{"_index":371,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.module.ts:46",{"_index":372,"title":{},"body":{"modules/HederaModule.html":{}}}],["src/hedera/hedera.service.ts",{"_index":393,"title":{},"body":{"injectables/HederaService.html":{},"coverage.html":{}}}],["src/hedera/hedera.service.ts:12",{"_index":395,"title":{},"body":{"injectables/HederaService.html":{}}}],["src/hedera/hfs/hfs.module.ts",{"_index":401,"title":{},"body":{"modules/HfsModule.html":{}}}],["src/hedera/hfs/hfs.service.ts",{"_index":403,"title":{},"body":{"injectables/HfsService.html":{},"coverage.html":{}}}],["src/hedera/hfs/hfs.service.ts:106",{"_index":413,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:163",{"_index":424,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:231",{"_index":417,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:26",{"_index":407,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:281",{"_index":419,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:309",{"_index":422,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hfs/hfs.service.ts:45",{"_index":415,"title":{},"body":{"injectables/HfsService.html":{}}}],["src/hedera/hts/hts",{"_index":459,"title":{},"body":{"injectables/HtsRestService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.module.ts",{"_index":455,"title":{},"body":{"modules/HtsModule.html":{}}}],["src/hedera/hts/hts.service.ts",{"_index":491,"title":{},"body":{"injectables/HtsService.html":{},"coverage.html":{}}}],["src/hedera/hts/hts.service.ts:109",{"_index":512,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:131",{"_index":508,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:149",{"_index":517,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:194",{"_index":523,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:240",{"_index":520,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:25",{"_index":501,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:31",{"_index":503,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:53",{"_index":505,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:75",{"_index":515,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/hts/hts.service.ts:92",{"_index":525,"title":{},"body":{"injectables/HtsService.html":{}}}],["src/hedera/keys/keys.module.ts",{"_index":568,"title":{},"body":{"modules/KeysModule.html":{}}}],["src/hedera/keys/keys.service.ts",{"_index":570,"title":{},"body":{"injectables/KeysService.html":{},"coverage.html":{}}}],["src/hedera/keys/keys.service.ts:13",{"_index":574,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:24",{"_index":578,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/keys/keys.service.ts:7",{"_index":573,"title":{},"body":{"injectables/KeysService.html":{}}}],["src/hedera/rest/rest.module.ts",{"_index":604,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:10",{"_index":605,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.module.ts:25",{"_index":606,"title":{},"body":{"modules/RestModule.html":{}}}],["src/hedera/rest/rest.service.ts",{"_index":609,"title":{},"body":{"injectables/RestService.html":{},"coverage.html":{}}}],["src/hedera/rest/rest.service.ts:18",{"_index":614,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:8",{"_index":617,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/rest/rest.service.ts:9",{"_index":612,"title":{},"body":{"injectables/RestService.html":{}}}],["src/hedera/transactions/transactions",{"_index":639,"title":{},"body":{"injectables/TransactionsRestService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.module.ts",{"_index":637,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/hedera/transactions/transactions.service.ts",{"_index":671,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/hedera/transactions/transactions.service.ts:102",{"_index":682,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:20",{"_index":677,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:26",{"_index":685,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:41",{"_index":687,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:57",{"_index":689,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/hedera/transactions/transactions.service.ts:80",{"_index":679,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/types/account_balance.types.ts",{"_index":6,"title":{},"body":{"interfaces/AccountBalance.html":{},"coverage.html":{}}}],["src/types/hedera_options.types.ts",{"_index":390,"title":{},"body":{"interfaces/HederaOptions.html":{},"coverage.html":{}}}],["src/types/mirror.types.ts",{"_index":598,"title":{},"body":{"interfaces/MirrorNode.html":{},"coverage.html":{}}}],["src/types/operator.types.ts",{"_index":601,"title":{},"body":{"interfaces/Operator.html":{},"coverage.html":{}}}],["src/types/private",{"_index":602,"title":{},"body":{"interfaces/PrivateKeyList.html":{},"coverage.html":{}}}],["src/types/token_balance.types.ts",{"_index":628,"title":{},"body":{"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["src/types/transaction_details.types.ts",{"_index":629,"title":{},"body":{"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["start",{"_index":313,"title":{},"body":{"injectables/HcsService.html":{}}}],["started",{"_index":738,"title":{"index.html":{}},"body":{}}],["statements",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":216,"title":{},"body":{"modules/ClientModule.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{}}}],["status",{"_index":129,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsService.html":{}}}],["string",{"_index":93,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["submit",{"_index":322,"title":{},"body":{"injectables/HcsService.html":{},"injectables/TransactionsService.html":{}}}],["submitkey",{"_index":300,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage",{"_index":294,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitmessage(topicid",{"_index":319,"title":{},"body":{"injectables/HcsService.html":{}}}],["submitting",{"_index":557,"title":{},"body":{"injectables/HtsService.html":{}}}],["submittx",{"_index":440,"title":{},"body":{"injectables/HfsService.html":{}}}],["submittx.getreceipt(this.clientservice.getclient",{"_index":442,"title":{},"body":{"injectables/HfsService.html":{}}}],["subscribing",{"_index":806,"title":{},"body":{"index.html":{}}}],["subscription",{"_index":318,"title":{},"body":{"injectables/HcsService.html":{}}}],["supplykey",{"_index":510,"title":{},"body":{"injectables/HtsService.html":{}}}],["support",{"_index":819,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":820,"title":{},"body":{"modules.html":{}}}],["table",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["testnet",{"_index":257,"title":{},"body":{"injectables/ClientService.html":{},"interfaces/HederaOptions.html":{}}}],["then((response",{"_index":817,"title":{},"body":{"index.html":{}}}],["this.accountsservice.createaccount(1",{"_index":789,"title":{},"body":{"index.html":{}}}],["this.accountsservice.updateaccount",{"_index":797,"title":{},"body":{"index.html":{}}}],["this.client",{"_index":272,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.client.setoperator(this.operator.accountid",{"_index":280,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.clientservice.getclient",{"_index":366,"title":{},"body":{"injectables/HcsService.html":{}}}],["this.getclient",{"_index":273,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.getinfo(accountid",{"_index":160,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.getnodeoperator",{"_index":275,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hcsservice.getmessages",{"_index":807,"title":{},"body":{"index.html":{}}}],["this.hederaoptions.mirrornode",{"_index":619,"title":{},"body":{"injectables/RestService.html":{}}}],["this.hederaoptions.network",{"_index":267,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hederaoptions.operators",{"_index":269,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.hfsservice.create",{"_index":814,"title":{},"body":{"index.html":{}}}],["this.httpservice",{"_index":624,"title":{},"body":{"injectables/RestService.html":{}}}],["this.keysservice.generatekey",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.keysservice.generatekey().then(key",{"_index":795,"title":{},"body":{"index.html":{}}}],["this.keysservice.generatekeylist(undefined",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.mirrornode",{"_index":618,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.apikey",{"_index":623,"title":{},"body":{"injectables/RestService.html":{}}}],["this.mirrornode.url}/api/v1/${endpoint",{"_index":625,"title":{},"body":{"injectables/RestService.html":{}}}],["this.network",{"_index":266,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator",{"_index":274,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operator.privatekey",{"_index":281,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators",{"_index":268,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators.length",{"_index":279,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.operators[math.floor(math.random",{"_index":278,"title":{},"body":{"injectables/ClientService.html":{}}}],["this.restservice",{"_index":479,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["this.transactionsservice.getlatesttransactions('your_account_id_here').then(response",{"_index":805,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":577,"title":{},"body":{"injectables/KeysService.html":{}}}],["timestamp",{"_index":650,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["token",{"_index":97,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{}}}],["token_balance.types",{"_index":18,"title":{},"body":{"interfaces/AccountBalance.html":{}}}],["tokenassociatetransaction",{"_index":527,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenbalance",{"_index":17,"title":{"interfaces/TokenBalance.html":{}},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"interfaces/TokenBalance.html":{},"coverage.html":{}}}],["tokendecimals",{"_index":522,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokendissociatetransaction",{"_index":531,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenfreezetransaction",{"_index":130,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenid",{"_index":91,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"interfaces/TokenBalance.html":{}}}],["tokenminttransaction",{"_index":528,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfo",{"_index":536,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokennftinfoquery",{"_index":535,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokenpausetransaction",{"_index":529,"title":{},"body":{"injectables/HtsService.html":{}}}],["tokens",{"_index":10,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{}}}],["tokens.push",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunfreezetransaction",{"_index":131,"title":{},"body":{"injectables/AccountsService.html":{}}}],["tokenunpausetransaction",{"_index":530,"title":{},"body":{"injectables/HtsService.html":{}}}],["topic",{"_index":303,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topiccreatetransaction",{"_index":329,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicdeletetransaction",{"_index":331,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicid",{"_index":306,"title":{},"body":{"injectables/HcsService.html":{},"index.html":{}}}],["topicid.fromstring('your_hcs_topic_id_here",{"_index":808,"title":{},"body":{"index.html":{}}}],["topicinfo",{"_index":295,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfo(topicid",{"_index":323,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery",{"_index":335,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicinfoquery().settopicid(topicid",{"_index":356,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessage",{"_index":334,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagequery",{"_index":333,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicmessagesubmittransaction",{"_index":332,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction",{"_index":330,"title":{},"body":{"injectables/HcsService.html":{}}}],["topicupdatetransaction().settopicid(topicid",{"_index":347,"title":{},"body":{"injectables/HcsService.html":{}}}],["topromise",{"_index":626,"title":{},"body":{"injectables/RestService.html":{}}}],["transaction",{"_index":148,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.execute(this.clientservice.getclient",{"_index":153,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/TransactionsService.html":{}}}],["transaction.freezewith(this.clientservice.getclient",{"_index":171,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.setaccountmemo(memo",{"_index":169,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setadminkey(adminkey",{"_index":337,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setendtime(end",{"_index":363,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setfilememo(memo",{"_index":435,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setkey(newkey",{"_index":170,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.setkeys([newkey",{"_index":445,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setlimit(limit",{"_index":364,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setmaxtransactionfee(new",{"_index":436,"title":{},"body":{"injectables/HfsService.html":{}}}],["transaction.setstarttime(start",{"_index":362,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.setsubmitkey(submitkey",{"_index":338,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settopicmemo(memo",{"_index":339,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.settransactionmemo(memo",{"_index":554,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(adminkey",{"_index":342,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(currentadminkey",{"_index":350,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(key",{"_index":439,"title":{},"body":{"injectables/HfsService.html":{},"injectables/HtsService.html":{}}}],["transaction.sign(pausekey",{"_index":540,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.sign(privatekey.fromstring(freezekey",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{}}}],["transaction.sign(signkey",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HfsService.html":{}}}],["transaction.sign(submitkey",{"_index":359,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction.sign(supplykey",{"_index":542,"title":{},"body":{"injectables/HtsService.html":{}}}],["transaction.subscribe",{"_index":365,"title":{},"body":{"injectables/HcsService.html":{}}}],["transaction_id",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{}}}],["transactiondetails",{"_index":537,"title":{"interfaces/TransactionDetails.html":{}},"body":{"injectables/HtsService.html":{},"interfaces/TransactionDetails.html":{},"coverage.html":{}}}],["transactionid",{"_index":630,"title":{},"body":{"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceipt",{"_index":533,"title":{},"body":{"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["transactionreceiptquery",{"_index":694,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionrecordquery",{"_index":695,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactionresponse",{"_index":696,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/RestService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["transactions.concat(response.transactions",{"_index":656,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions.service",{"_index":638,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions/?account.id=${accountid",{"_index":666,"title":{},"body":{"injectables/TransactionsRestService.html":{}}}],["transactions/transactions.module",{"_index":377,"title":{},"body":{"modules/HederaModule.html":{}}}],["transactionsmodule",{"_index":376,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/HederaModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsrestservice",{"_index":635,"title":{"injectables/TransactionsRestService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsRestService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactionsservice",{"_index":636,"title":{"injectables/TransactionsService.html":{}},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["transactiontoschedule",{"_index":680,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transfer",{"_index":560,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar",{"_index":497,"title":{},"body":{"injectables/HtsService.html":{}}}],["transferhbar(amount",{"_index":516,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken",{"_index":498,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfernfttoken(tokenid",{"_index":519,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken",{"_index":499,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertoken(tokenid",{"_index":521,"title":{},"body":{"injectables/HtsService.html":{}}}],["transfertransaction",{"_index":532,"title":{},"body":{"injectables/HtsService.html":{}}}],["true",{"_index":387,"title":{},"body":{"modules/HederaModule.html":{}}}],["try",{"_index":146,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.getreceipt(this.clientservice.getclient",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HtsService.html":{},"injectables/TransactionsService.html":{}}}],["txresponse.transactionid",{"_index":558,"title":{},"body":{"injectables/HtsService.html":{}}}],["txresponse.transactionid.tostring",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{}}}],["type",{"_index":12,"title":{},"body":{"interfaces/AccountBalance.html":{},"injectables/AccountsService.html":{},"modules/ClientModule.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"modules/HederaModule.html":{},"interfaces/HederaOptions.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsRestService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"interfaces/MirrorNode.html":{},"interfaces/Operator.html":{},"interfaces/PrivateKeyList.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{},"interfaces/TokenBalance.html":{},"interfaces/TransactionDetails.html":{},"injectables/TransactionsRestService.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["types/account_balance.types",{"_index":136,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/hedera_options.types",{"_index":230,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/mirror.types",{"_index":379,"title":{},"body":{"modules/HederaModule.html":{},"modules/RestModule.html":{},"injectables/RestService.html":{}}}],["types/operator.types",{"_index":226,"title":{},"body":{"modules/ClientModule.html":{},"injectables/ClientService.html":{},"modules/HederaModule.html":{}}}],["types/private",{"_index":138,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/KeysService.html":{}}}],["types/token_balance.types",{"_index":135,"title":{},"body":{"injectables/AccountsService.html":{}}}],["types/transaction_details.types",{"_index":538,"title":{},"body":{"injectables/HtsService.html":{}}}],["uint8array",{"_index":320,"title":{},"body":{"injectables/HcsService.html":{}}}],["undefined",{"_index":361,"title":{},"body":{"injectables/HcsService.html":{}}}],["unfreezeaccount",{"_index":63,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezeaccount(accountid",{"_index":109,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unfreezes",{"_index":111,"title":{},"body":{"injectables/AccountsService.html":{}}}],["unpausetoken",{"_index":500,"title":{},"body":{"injectables/HtsService.html":{}}}],["unpausetoken(tokenid",{"_index":524,"title":{},"body":{"injectables/HtsService.html":{}}}],["update",{"_index":118,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{}}}],["update(fileid",{"_index":423,"title":{},"body":{"injectables/HfsService.html":{}}}],["updateaccount",{"_index":64,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updateaccount(accountid",{"_index":112,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updates",{"_index":117,"title":{},"body":{"injectables/AccountsService.html":{}}}],["updatetopic",{"_index":296,"title":{},"body":{"injectables/HcsService.html":{}}}],["updatetopic(topicid",{"_index":325,"title":{},"body":{"injectables/HcsService.html":{}}}],["updating",{"_index":796,"title":{},"body":{"index.html":{}}}],["url",{"_index":600,"title":{},"body":{"interfaces/MirrorNode.html":{},"injectables/TransactionsRestService.html":{},"index.html":{}}}],["usage",{"_index":780,"title":{},"body":{"index.html":{}}}],["use",{"_index":348,"title":{},"body":{"injectables/HcsService.html":{},"injectables/KeysService.html":{},"index.html":{}}}],["useexisting",{"_index":776,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":233,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{},"index.html":{}}}],["usevalue",{"_index":232,"title":{},"body":{"modules/ClientModule.html":{},"modules/RestModule.html":{}}}],["value",{"_index":120,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ClientService.html":{},"injectables/HcsService.html":{},"injectables/HederaService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/RestService.html":{},"injectables/TransactionsService.html":{}}}],["variables",{"_index":245,"title":{},"body":{"injectables/ClientService.html":{},"index.html":{}}}],["version",{"_index":828,"title":{},"body":{"properties.html":{}}}],["void",{"_index":312,"title":{},"body":{"injectables/HcsService.html":{}}}],["walletid",{"_index":472,"title":{},"body":{"injectables/HtsRestService.html":{}}}],["while(response.links.next",{"_index":485,"title":{},"body":{"injectables/HtsRestService.html":{},"injectables/TransactionsRestService.html":{}}}],["workound",{"_index":164,"title":{},"body":{"injectables/AccountsService.html":{}}}],["wrapper",{"_index":743,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":750,"title":{},"body":{"index.html":{}}}],["yes",{"_index":85,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/HcsService.html":{},"injectables/HfsService.html":{},"injectables/HtsService.html":{},"injectables/KeysService.html":{},"injectables/TransactionsRestService.html":{}}}],["your_content_here",{"_index":816,"title":{},"body":{"index.html":{}}}],["your_operator_account_id",{"_index":768,"title":{},"body":{"index.html":{}}}],["your_operator_private_key",{"_index":769,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AccountsModule.html":{},"modules/HcsModule.html":{},"modules/HfsModule.html":{},"modules/HtsModule.html":{},"modules/KeysModule.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccountBalance.html":{"url":"interfaces/AccountBalance.html","title":"interface - AccountBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccountBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/account_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hbars\n                                        \n                                \n                                \n                                        \n                                            tokens\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hbars\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hbars:     Hbar\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Hbar\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokens:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Hbar } from \"@hashgraph/sdk/lib/contract/ContractCreateFlow\";\nimport { TokenBalance } from \"./token_balance.types\";\n\nexport interface AccountBalance {\n  hbars: Hbar\n  tokens: Array  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHtsModule\n\nHtsModule\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/accounts/accounts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            HtsModule\n                        \n                        \n                            KeysModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\nimport { KeysModule } from '../keys/keys.module';\nimport { HtsModule } from '../hts/hts.module';\n\n@Module({\n  imports: [ClientModule, RestModule, KeysModule, HtsModule],\n  controllers: [],\n  providers: [AccountsService],\n  exports: [AccountsService]\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                freezeAccount\n                            \n                            \n                                    Async\n                                getInfo\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                getQueryBalance\n                            \n                            \n                                    Async\n                                unfreezeAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService, keysService: KeysService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/accounts/accounts.service.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keysService\n                                                  \n                                                        \n                                                                        KeysService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(balance: number, keysLength: number, keysThreshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:166\n                \n            \n\n\n            \n                \n                    Creates a single or multi-sig account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    balance\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysLength\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keysThreshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        , PrivateKey} single or multi-sig account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        freezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:218\n                \n            \n\n\n            \n                \n                    Freezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:47\n                \n            \n\n\n            \n                \n                    Fetches specific Account Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(accountId: AccountId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:77\n                \n            \n\n\n            \n                \n                    Fetches Specific account public key\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Public Key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getQueryBalance\n                        \n                    \n                \n            \n            \n                \ngetQueryBalance(accountId: string | AccountId, tokenId?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            string | AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfreezeAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:246\n                \n            \n\n\n            \n                \n                    Unfreezes account related to token ID\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    freezeKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateAccount\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: AccountId, signKey: PrivateKey, newKey?: PrivateKey, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/accounts/accounts.service.ts:96\n                \n            \n\n\n            \n                \n                    Updates Account\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account Update\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Accounts Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/accounts/accounts.service.ts:30\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  AccountBalanceQuery,\n  AccountCreateTransaction,\n  AccountId,\n  AccountInfo,\n  AccountInfoQuery,\n  AccountUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status,\n  TokenFreezeTransaction,\n  TokenId,\n  TokenUnfreezeTransaction\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { KeysService } from '../keys/keys.service';\nimport { TokenBalance } from '../../types/token_balance.types';\nimport { AccountBalance } from '../../types/account_balance.types';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class AccountsService {\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Accounts Service\");\n\n  /**\n   * Constructor\n   * @param {ClientService} clientService \n   * @param {KeysService} keysService \n   */\n  constructor(\n    private clientService: ClientService,\n    private keysService: KeysService\n  ) { }\n\n  /**\n   * Fetches specific Account Info\n   * @param {AccountId} accountId \n   * @returns {AccountInfo}\n   */\n  async getInfo(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountInfoQuery()\n          .setAccountId(accountId);\n\n\n        /**\n         * Signing the transaction...\n         */\n        const accountInfo = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * resolving the account's info...\n         */\n        resolve(accountInfo);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Fetches Specific account public key\n   * @param {AccountId} accountId \n   * @returns {any} Account Public Key\n   */\n  async getKeys(accountId: AccountId): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const accountInfo = await this.getInfo(accountId);\n        resolve(accountInfo.key);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Updates Account\n   * @param {AccountId} accountId \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @returns {Status} Account Update\n   */\n  async updateAccount(\n    accountId: AccountId,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new AccountUpdateTransaction()\n          /**\n          * setting single node accountId, as a workound for offline signature...\n          */\n          .setNodeAccountIds([new AccountId(6)])\n          .setAccountId(accountId);\n\n        /**\n         * If there is a memo...\n         */\n        if (memo) {\n          transaction.setAccountMemo(memo);\n        }\n\n        /**\n         * If there is a new key...\n         */\n        if (newKey) {\n          transaction.setKey(newKey);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Signing the transaction with the client operator...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Request the receipt of the transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction consensus status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Creates a single or multi-sig account\n   * @param {number} balance \n   * @param {number} keysLength \n   * @param {number} keysThreshold \n   * @returns {AccountId, PrivateKey} single or multi-sig account\n   */\n  async createAccount(\n    balance: number,\n    keysLength: number,\n    keysThreshold?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let key = null;\n\n        if (keysLength > 1) {\n          key = await this.keysService.generateKeyList(undefined, keysLength, keysThreshold);\n        } else {\n          key = await this.keysService.generateKey();\n        }\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new AccountCreateTransaction()\n          .setKey(keysLength > 1 ? (key).keyList : (key).publicKey)\n          .setInitialBalance(new Hbar(balance));\n\n        /**\n         * Executing the transactions...\n         */\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        /**\n         * Fetching the receipt...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving the accountId...\n         */\n        resolve({\n          accountId: receipt.accountId,\n          key: key\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Freezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async freezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenFreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Unfreezes account related to token ID\n   * @param {AccountId} accountId \n   * @param {TokenId} tokenId \n   * @param {string} freezeKey \n   * @returns {Status}\n   */\n  async unfreezeAccount(accountId: AccountId, tokenId: TokenId, freezeKey: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const transaction = await new TokenUnfreezeTransaction()\n          .setAccountId(accountId)\n          .setTokenId(tokenId)\n          .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(PrivateKey.fromString(freezeKey));\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve({\n          status: receipt.status,\n          transaction_id: txResponse.transactionId.toString()\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * \n   * @param {string} accountId \n   * @param {string} tokenId \n   * @returns {AccountBalance}\n   */\n  getQueryBalance(accountId: string | AccountId, tokenId?: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new AccountBalanceQuery()\n          .setAccountId(accountId);\n\n        const response = await query.execute(this.clientService.getClient());\n        let balance = null;\n\n        if (tokenId) {\n          balance = {\n            tokens: [{\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            }],\n            hbars: response.hbars\n          };\n        } else {\n          let tokens = new Array();\n\n          response.tokens?._map.forEach((value, tokenId) => {\n            tokens.push({\n              tokenId: tokenId,\n              balance: response.tokens?._map.get(tokenId) ? Number(response.tokens._map.get(tokenId)?.toString()) : 0,\n              decimals: response.tokens?._map.get(tokenId) ? Number(response.tokenDecimals?._map.get(tokenId)) : 0\n            });\n          });\n\n          balance = {\n            tokens: tokens,\n            hbars: response.hbars\n          };\n        }\n\n        resolve(balance);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ClientModule.html":{"url":"modules/ClientModule.html","title":"module - ClientModule","body":"\n                   \n\n\n\n\n    Modules\n    ClientModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/client/client.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { Operator } from '../../types/operator.types';\nimport { ClientService } from './client.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class ClientModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: ClientModule,\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: ClientModule,\n      imports: [ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        ClientService,\n      ],\n      exports: [ClientService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/client/client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                network\n                            \n                            \n                                    Private\n                                operator\n                            \n                            \n                                    Private\n                                operators\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getClient\n                            \n                            \n                                getNodeOperator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/client/client.service.ts:37\n                            \n                        \n\n                \n                    \n                            Hedera Network variables\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getClient\n                        \n                    \n                \n            \n            \n                \ngetClient()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('client.invalid_node_operator')\n                \n            \n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:61\n                \n            \n\n\n            \n                \n                    If the client gives invalid node error...\n\n\n                    \n                    \n                    \n                        Returns :     Client\n\n                    \n                    \n                        random operator...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeOperator\n                        \n                    \n                \n            \n            \n                \ngetNodeOperator()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/client/client.service.ts:77\n                \n            \n\n\n            \n                \n                    Gets a node operator\n\n\n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Client\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:17\n                        \n                    \n\n            \n                \n                    Client\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Client Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:37\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"mainnet\" | \"testnet\"\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:32\n                        \n                    \n\n            \n                \n                    Network choice\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Operator\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:22\n                        \n                    \n\n            \n                \n                    Single Operator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        operators\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/client/client.service.ts:27\n                        \n                    \n\n            \n                \n                    Array of Operators\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { Client } from '@hashgraph/sdk';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { Operator } from '../../types/operator.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n\n/**\n * Injectable\n */\n@Injectable()\nexport class ClientService {\n\n  /**\n   * Client\n   */\n  private client: Client;\n\n  /**\n   * Single Operator\n   */\n  private operator: Operator;\n\n  /**\n   * Array of Operators\n   */\n  private operators: Array;\n\n  /**\n   * Network choice\n   */\n  private network: 'mainnet' | 'testnet';\n\n  /**\n   * Logger Service\n   */\n  private logger: Logger = new Logger(\"Client Service\");\n\n  /**\n   * Hedera Network variables\n   * @param {HederaOptions} hederaOptions \n   */\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions\n  ) {\n    this.network = this.hederaOptions.network;\n    this.operators = this.hederaOptions.operators;\n\n    /**\n     * Create our connection to the Hedera network...\n     */\n    this.client = this.getClient();\n    this.operator = this.getNodeOperator();\n  }\n\n  /**\n   * If the client gives invalid node error...\n   * @returns random operator...\n   */\n  @OnEvent('client.invalid_node_operator')\n  getClient(): Client {\n    if (this.network == 'testnet') {\n      this.client = Client.forTestnet();\n    } else {\n      this.client = Client.forMainnet();\n    }\n\n    this.operator = this.operators[Math.floor(Math.random() * this.operators.length)];\n    this.client.setOperator(this.operator.accountId, this.operator.privateKey);\n    return this.client;\n  }\n\n  /**\n   * Gets a node operator\n   * @returns {Operator}\n   */\n  getNodeOperator(): Operator {\n    return this.operator;\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HcsModule.html":{"url":"modules/HcsModule.html","title":"module - HcsModule","body":"\n                   \n\n\n\n\n    Modules\n    HcsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_imports\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hcs/hcs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HcsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HcsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HcsService } from './hcs.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [HcsService],\n  exports: [HcsService]\n})\nexport class HcsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HcsService.html":{"url":"injectables/HcsService.html","title":"injectable - HcsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HcsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hcs/hcs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTopic\n                            \n                            \n                                deleteTopic\n                            \n                            \n                                getMessages\n                            \n                            \n                                submitMessage\n                            \n                            \n                                topicInfo\n                            \n                            \n                                updateTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                            \n                        \n\n                \n                    \n                            HCS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTopic\n                        \n                    \n                \n            \n            \n                \ncreateTopic(adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:47\n                \n            \n\n\n            \n                \n                    Create topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTopic\n                        \n                    \n                \n            \n            \n                \ndeleteTopic(topicId: TopicId, adminKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:211\n                \n            \n\n\n            \n                \n                    Delete topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMessages\n                        \n                    \n                \n            \n            \n                \ngetMessages(topicId: TopicId, callback: (message: any) => void, start?: number, end?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:335\n                \n            \n\n\n            \n                \n                    Get topic message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    end\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Subscription Message\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitMessage\n                        \n                    \n                \n            \n            \n                \nsubmitMessage(topicId: TopicId, message: string | Uint8Array, submitKey?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:278\n                \n            \n\n\n            \n                \n                    Submit Message\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            string | Uint8Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        topicInfo\n                        \n                    \n                \n            \n            \n                \ntopicInfo(topicId: TopicId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:252\n                \n            \n\n\n            \n                \n                    Get topic info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTopic\n                        \n                    \n                \n            \n            \n                \nupdateTopic(topicId: TopicId, currentAdminKey?: PrivateKey, adminKey?: PrivateKey, submitKey?: Key | KeyList, memo?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hcs/hcs.service.ts:125\n                \n            \n\n\n            \n                \n                    Update topic\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                            TopicId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currentAdminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    adminKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    submitKey\n                                    \n                                            Key | KeyList\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HCS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hcs/hcs.service.ts:28\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  TopicCreateTransaction,\n  TopicUpdateTransaction,\n  TopicDeleteTransaction,\n  TopicMessageSubmitTransaction,\n  TopicMessageQuery,\n  TopicMessage,\n  TopicInfoQuery,\n  TopicInfo,\n  TopicId,\n  PrivateKey,\n  Status,\n  Key,\n  KeyList\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HcsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HCS Service\");\n\n  /**\n   * HCS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) {\n  }\n\n\n  /**\n   * Create topic\n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {TopicId}\n   */\n  createTopic(\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicCreateTransaction();\n        let txResponse = null;\n\n        /**\n         * setting the admin key, if any...\n         */\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n\n        /**\n         * setting the submit key, if any...\n         */\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n\n        /**\n         * setting the topic memo, if any...\n         */\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n\n        /**\n         * if there is an admin key, transaction must be signed...\n         */\n        if (adminKey) {\n          const signTx = await transaction.sign(adminKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise, we can just execute it...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * finally, fetching the topicId from the response...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n\n  /**\n   * Update topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} currentAdminKey \n   * @param {PrivateKey} adminKey \n   * @param {Key} submitKey \n   * @param {string} memo \n   * @returns {Status}\n   */\n  updateTopic(\n    topicId: TopicId,\n    currentAdminKey?: PrivateKey,\n    adminKey?: PrivateKey,\n    submitKey?: Key | KeyList,\n    memo?: string\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicUpdateTransaction().setTopicId(topicId);\n        let txResponse = null;\n\n        /**\n         * setting the new admin key, if any...\n         */\n        if (adminKey) {\n          transaction.setAdminKey(adminKey);\n        }\n\n        /**\n         * setting the new submit key, if any...\n         */\n        if (submitKey) {\n          transaction.setSubmitKey(submitKey);\n        }\n\n        /**\n         * setting the new topic memo, if any...\n         */\n        if (memo) {\n          transaction.setTopicMemo(memo);\n        }\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * if the transaction has got an admin key, we must use it to sign...\n         */\n        if (currentAdminKey) {\n          let signTx = await transaction.sign(currentAdminKey);\n\n          /**\n           * if there is a new admin key, we must use it to double sign it...\n           */\n          if (adminKey) {\n            signTx = await signTx.sign(adminKey);\n          }\n\n          /**\n           * executing the transaction, after signatures...\n           */\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise we can just sign the transaction...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * fetching the status of the executed transaction...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Delete topic\n   * @param {TopicId} topicId \n   * @param {PrivateKey} adminKey \n   * @returns {Status}\n   */\n  deleteTopic(\n    topicId: TopicId,\n    adminKey: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction, and freezing it...\n         */\n        const transaction = new TopicDeleteTransaction()\n          .setTopicId(topicId)\n          .freezeWith(this.clientService.getClient());\n\n        /**\n         * signing the transaction with admin key...\n         */\n        const signTx = await transaction.sign(adminKey);\n\n        /**\n         * fetching response...\n         */\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        /**\n         * resolving status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic info\n   * @param {TopicId} topicId \n   * @returns {TopicInfo}\n   */\n  topicInfo(\n    topicId: TopicId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n        * creating the transaction for the query...\n        */\n        const transaction = new TopicInfoQuery().setTopicId(topicId);\n        const info = await transaction.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Submit Message\n   * @param {TopicId} topicId \n   * @param {string} message \n   * @param {PrivateKey} submitKey \n   * @returns {string} \n   */\n  submitMessage(\n    topicId: TopicId,\n    message: string | Uint8Array,\n    submitKey?: PrivateKey\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let txResponse = null;\n\n        /**\n         * creating the transaction, setting topic and message...\n         */\n        const transaction = new TopicMessageSubmitTransaction()\n          .setTopicId(topicId)\n          .setMessage(message);\n\n        /**\n         * freezing the transaction...\n         */\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * if there is an submit key, transaction must be signed...\n         */\n        if (submitKey) {\n          const signTx = await transaction.sign(submitKey);\n          txResponse = await signTx.execute(this.clientService.getClient());\n        }\n\n        /**\n         * otherwise, we can just execute it...\n         */\n        else {\n          txResponse = await transaction.execute(this.clientService.getClient());\n        }\n\n        /**\n         * finally, fetching the status...\n         */\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.topicSequenceNumber?.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n\n  /**\n   * Get topic message\n   * @param {TopicId} topicId \n   * @param {any} callback \n   * @param {number} start \n   * @param {number} end \n   * @param {number} limit \n   * @returns {any} Subscription Message\n   */\n  getMessages(\n    topicId: TopicId,\n    callback: (message: any) => void,\n    start?: number,\n    end?: number,\n    limit?: number\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * creating the transaction...\n         */\n        const transaction = new TopicMessageQuery()\n          .setTopicId(topicId);\n\n        if (start !== undefined) {\n          transaction.setStartTime(start);\n        }\n\n        if (end !== undefined) {\n          transaction.setEndTime(end);\n        }\n\n        if (limit !== undefined) {\n          transaction.setLimit(limit);\n        }\n\n        let subscription = transaction.subscribe(\n          this.clientService.getClient(),\n          null,\n          (message) => callback(message)\n        );\n\n        resolve(subscription);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HederaModule.html":{"url":"modules/HederaModule.html","title":"module - HederaModule","body":"\n                   \n\n\n\n\n    Modules\n    HederaModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hedera.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hedera.module.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule, Provider } from '@nestjs/common';\nimport { HederaService } from './hedera.service';\nimport { KeysModule } from './keys/keys.module';\nimport { TransactionsModule } from './transactions/transactions.module';\nimport { ClientModule } from './client/client.module';\nimport { RestModule } from './rest/rest.module';\nimport { Operator } from '../types/operator.types';\nimport { MirrorNode } from '../types/mirror.types';\nimport { HcsModule } from './hcs/hcs.module';\nimport { HfsModule } from './hfs/hfs.module';\nimport { HtsModule } from './hts/hts.module';\nimport { AccountsModule } from './accounts/accounts.module';\nimport { HederaOptions } from '../types/hedera_options.types';\n\n@Module({})\nexport class HederaModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRoot(options), \n        RestModule.forRoot(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: HederaModule,\n      imports: [\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule, \n        HtsModule,\n        AccountsModule    \n      ],\n      providers: [HederaService],\n      exports: [\n        HederaService,\n        KeysModule, \n        ClientModule.forRootAsync(options), \n        RestModule.forRootAsync(options),\n        TransactionsModule,\n        HcsModule,\n        HfsModule,\n        HtsModule,\n        AccountsModule\n      ],\n      global: true\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HederaOptions.html":{"url":"interfaces/HederaOptions.html","title":"interface - HederaOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HederaOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/hedera_options.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mirrorNode\n                                        \n                                \n                                \n                                        \n                                            network\n                                        \n                                \n                                \n                                        \n                                            operators\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mirrorNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mirrorNode:         MirrorNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MirrorNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network:     \"mainnet\" | \"testnet\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"mainnet\" | \"testnet\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operators\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operators:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MirrorNode } from \"./mirror.types\";\nimport { Operator } from \"./operator.types\";\n\nexport interface HederaOptions {\n  operators: Array\n  mirrorNode: MirrorNode\n  network: 'mainnet' | 'testnet'\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HederaService.html":{"url":"injectables/HederaService.html","title":"injectable - HederaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HederaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hedera.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Hedera Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hedera.service.ts:12\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HederaService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"Hedera Service\");\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HfsModule.html":{"url":"modules/HfsModule.html","title":"module - HfsModule","body":"\n                   \n\n\n\n\n    Modules\n    HfsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_imports\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hfs/hfs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HfsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HfsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HfsService } from './hfs.service';\nimport { ClientModule } from '../client/client.module';\n\n@Module({\n  imports: [ClientModule],\n  controllers: [],\n  providers: [HfsService],\n  exports: [HfsService]\n})\nexport class HfsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HfsService.html":{"url":"injectables/HfsService.html","title":"injectable - HfsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HfsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hfs/hfs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                append\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getContents\n                            \n                            \n                                    Async\n                                getInfos\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hfs/hfs.service.ts:26\n                            \n                        \n\n                \n                    \n                            HFS Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        append\n                        \n                    \n                \n            \n            \n                \n                    \n                    append(fileId: FileId, key: PrivateKey, content: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:106\n                \n            \n\n\n            \n                \n                    Append File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(key: PrivateKey, content: string, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:45\n                \n            \n\n\n            \n                \n                    Create File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(fileId: FileId, key: PrivateKey, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:231\n                \n            \n\n\n            \n                \n                    Delete File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getContents\n                        \n                    \n                \n            \n            \n                \n                    \n                    getContents(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:281\n                \n            \n\n\n            \n                \n                    Get contents\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getInfos\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfos(fileId: FileId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:309\n                \n            \n\n\n            \n                \n                    Get Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(fileId: FileId, content: string, signKey: PrivateKey, newKey?: PrivateKey, memo?: string, maxTransactionFee?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hfs/hfs.service.ts:163\n                \n            \n\n\n            \n                \n                    Update File\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                            FileId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    signKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    maxTransactionFee\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HFS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hfs/hfs.service.ts:26\n                        \n                    \n\n            \n                \n                    Logger Service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  FileAppendTransaction,\n  FileContentsQuery,\n  FileCreateTransaction,\n  FileDeleteTransaction,\n  FileId,\n  FileInfo,\n  FileInfoQuery,\n  FileUpdateTransaction,\n  Hbar,\n  PrivateKey,\n  Status\n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HfsService {\n\n  /**\n   * Logger Service\n   */\n  protected logger: Logger = new Logger(\"HFS Service\");\n\n\n  /**\n   * HFS Service\n   * @param {ClientService} clientService \n   */\n  constructor(\n    private clientService: ClientService\n  ) { }\n\n  /**\n   * Create File\n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {FileId} \n   */\n  async create(\n    key: PrivateKey,\n    content: string,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileCreateTransaction()\n          .setKeys([key])\n          .setContents(content);\n\n        if (memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n        // \n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the file ID...\n         */\n        resolve(receipt.fileId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Append File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {string} content \n   * @param {number} maxTransactionFee \n   * @returns {Status}\n   */\n  async append(\n    fileId: FileId,\n    key: PrivateKey,\n    content: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileAppendTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Update File\n   * @param {FileId} fileId \n   * @param {string} content \n   * @param {PrivateKey} signKey \n   * @param {PrivateKey} newKey \n   * @param {string} memo \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async update(\n    fileId: FileId,\n    content: string,\n    signKey: PrivateKey,\n    newKey?: PrivateKey,\n    memo?: string,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileUpdateTransaction()\n          .setFileId(fileId)\n          .setContents(content);\n\n        if (memo) {\n          transaction.setFileMemo(memo);\n        }\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        if (newKey) {\n          transaction.setKeys([newKey]);\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing the transaction...\n         */\n        let signTx = await transaction.sign(signKey);\n\n        if (newKey) {\n          signTx = await signTx.sign(newKey);\n        }\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Delete File\n   * @param {FileId} fileId \n   * @param {PrivateKey} key \n   * @param {number} maxTransactionFee \n   * @returns {Status} \n   */\n  async delete(\n    fileId: FileId,\n    key: PrivateKey,\n    maxTransactionFee?: number,\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = await new FileDeleteTransaction()\n          .setFileId(fileId);\n\n        if (maxTransactionFee) {\n          transaction.setMaxTransactionFee(new Hbar(maxTransactionFee));\n        }\n\n        transaction.freezeWith(this.clientService.getClient());\n\n        /**\n         * Signing with the file private keys...\n         */\n        const signTx = await transaction.sign(key);\n\n        /**\n         * Executing the transaction...\n         */\n        const submitTx = await signTx.execute(this.clientService.getClient());\n\n        /**\n         * Requesting the receipt...\n         */\n        const receipt = await submitTx.getReceipt(this.clientService.getClient());\n\n        /**\n         * Get the transaction status...\n         */\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get contents\n   * @param {FileId} fileId \n   * @returns {string}\n   */\n  async getContents(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new FileContentsQuery()\n          .setFileId(fileId);\n\n        /**\n         * Signing the transaction...\n         */\n        const contents = await transaction.execute(this.clientService.getClient());\n        resolve(contents.toString());\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get Info\n   * @param {FileId} fileId \n   * @returns {FileInfo}\n   */\n  async getInfos(\n    fileId: FileId\n  ): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n\n        /**\n         * Creating the transaction...\n         */\n        const transaction = new FileInfoQuery()\n          .setFileId(fileId);\n\n        /**\n         * Signing the transaction...\n         */\n        const infos = await transaction.execute(this.clientService.getClient());\n        resolve(infos);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HtsModule.html":{"url":"modules/HtsModule.html","title":"module - HtsModule","body":"\n                   \n\n\n\n\n    Modules\n    HtsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_imports\n\n\n\ncluster_HtsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/hts/hts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HtsRestService\n                        \n                        \n                            HtsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HtsService } from './hts.service';\nimport { HtsRestService } from './hts-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule, ClientModule],\n  controllers: [],\n  providers: [HtsService, HtsRestService],\n  exports: [HtsService, HtsRestService]\n})\nexport class HtsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsRestService.html":{"url":"injectables/HtsRestService.html","title":"injectable - HtsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts-rest.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllHolders\n                            \n                            \n                                getAllHoldersFromWallet\n                            \n                            \n                                getTokenInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts-rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            HTS REST Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHolders\n                        \n                    \n                \n            \n            \n                \ngetAllHolders(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:42\n                \n            \n\n\n            \n                \n                    Get array of holders by tokenId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllHoldersFromWallet\n                        \n                    \n                \n            \n            \n                \ngetAllHoldersFromWallet(tokenId: string, walletId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:74\n                \n            \n\n\n            \n                \n                    Get array of holders from walletId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    walletId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTokenInfo\n                        \n                    \n                \n            \n            \n                \ngetTokenInfo(tokenId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts-rest.service.ts:24\n                \n            \n\n\n            \n                \n                    Get Token Info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        response\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\nimport * as lodash from 'lodash';\n\n/**\n * Injectable\n */\n@Injectable()\nexport class HtsRestService {\n\n  /**\n   * HTS REST Service\n   * @param restService \n   */\n  constructor(\n    private restService: RestService\n  ) {}\n\n  /**\n   * Get Token Info\n   * @param {string} tokenId \n   * @returns {any} response\n   */\n  getTokenInfo(tokenId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`tokens/${tokenId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders by tokenId\n   * @param {string} tokenId \n   * @returns {Array}\n   */\n  getAllHolders(tokenId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Get array of holders from walletId\n   * @param {string} tokenId \n   * @param {string} walletId \n   * @returns {Array}\n   */\n  getAllHoldersFromWallet(tokenId: string, walletId: string): Promise> {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let holders: any = [];\n\n        let response = await this.restService\n        .call(`tokens/${tokenId}/balances?account.id=gt:${walletId}`);\n\n        holders = holders.concat(response.balances);\n\n        while(response.links.next) {\n          let next = lodash.get(response.links.next.split(\"?\"), 1);\n\n          response = await this.restService\n            .call(`tokens/${tokenId}/balances?${next}`);\n\n          holders = holders.concat(response.balances);\n        }\n\n        resolve(holders);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HtsService.html":{"url":"injectables/HtsService.html","title":"injectable - HtsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HtsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/hts/hts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                associateToken\n                            \n                            \n                                    Async\n                                dissociateToken\n                            \n                            \n                                    Async\n                                getNftInfo\n                            \n                            \n                                    Async\n                                mintNftToken\n                            \n                            \n                                    Async\n                                pauseToken\n                            \n                            \n                                    Async\n                                transferHbar\n                            \n                            \n                                    Async\n                                transferNftToken\n                            \n                            \n                                    Async\n                                transferToken\n                            \n                            \n                                    Async\n                                unpauseToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/hts/hts.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        associateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    associateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        dissociateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    dissociateToken(accountId: AccountId, tokenId: TokenId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getNftInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNftInfo(tokenId: TokenId, serialNumber: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        mintNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    mintNftToken(tokenId: TokenId, supplyKey: PrivateKey, CID: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    supplyKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    CID\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    pauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferHbar\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferHbar(amount: number, from: AccountId, to: AccountId, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferNftToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferNftToken(tokenId: TokenId, from: AccountId, to: AccountId, serialNumber: number, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    serialNumber\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transferToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    transferToken(tokenId: TokenId, from: AccountId, to: AccountId, amount: number, tokenDecimals: number, memo?: string, key?: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    from\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    to\n                                    \n                                            AccountId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenDecimals\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    memo\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unpauseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    unpauseToken(tokenId: TokenId, pauseKey: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/hts/hts.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenId\n                                    \n                                            TokenId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pauseKey\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"HTS Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/hts/hts.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { \n  AccountId, \n  Hbar, \n  PrivateKey, \n  Status, \n  TokenAssociateTransaction, \n  TokenId, \n  TokenMintTransaction, \n  TokenPauseTransaction, \n  TokenUnpauseTransaction, \n  TokenDissociateTransaction,\n  Transaction, \n  TransferTransaction, \n  TransactionReceipt, \n  NftId, \n  TokenNftInfoQuery, \n  TokenNftInfo \n} from '@hashgraph/sdk';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { TransactionDetails } from '../../types/transaction_details.types';\nimport { ClientService } from '../client/client.service';\n\n@Injectable()\nexport class HtsService {\n  protected logger: Logger = new Logger(\"HTS Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async associateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenAssociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async dissociateToken(\n    accountId: AccountId,\n    tokenId: TokenId,\n    key: PrivateKey\n    ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = await new TokenDissociateTransaction()\n        .setAccountId(accountId)\n        .setTokenIds([tokenId])\n        .freezeWith(this.clientService.getClient());\n\n        let signTx = await transaction.sign(key);         \n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    })\n  }\n\n  async pauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenPauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async unpauseToken(tokenId: TokenId, pauseKey: PrivateKey): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenUnpauseTransaction()\n        .setTokenId(tokenId)\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(pauseKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt.status);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async mintNftToken(\n    tokenId: TokenId,\n    supplyKey: PrivateKey,\n    CID: string\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const transaction = new TokenMintTransaction()\n        .setTokenId(tokenId)\n        .addMetadata(Buffer.from(CID))\n        .freezeWith(this.clientService.getClient());\n\n        const signTx = await transaction.sign(supplyKey);\n        const txResponse = await signTx.execute(this.clientService.getClient());\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n        resolve(receipt);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getNftInfo(\n    tokenId: TokenId,\n    serialNumber: number,\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let nftId = new NftId(tokenId, serialNumber);\n        let nftInfos = await new TokenNftInfoQuery()\n        .setNftId(nftId)\n        .execute(this.clientService.getClient());\n\n        resolve(nftInfos);        \n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async transferHbar(\n    amount: number,\n    from: AccountId,\n    to: AccountId,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating a transaction...\n        const transaction = new TransferTransaction()\n          .addHbarTransfer(from, new Hbar(-amount))\n          .addHbarTransfer(to, new Hbar(amount));\n\n        if(memo) {\n          transaction.setTransactionMemo(memo);\n        }\n          \n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }\n          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,    \n    amount: number,\n    tokenDecimals: number,\n    memo?: string,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addTokenTransfer(tokenId, from, Number(-amount  * (10 ** tokenDecimals)))\n          .addTokenTransfer(tokenId, to, Number(amount  * (10 ** tokenDecimals)));\n\n          if(memo) {\n            transaction.setTransactionMemo(memo);\n          }\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n\n  async transferNftToken(\n    tokenId: TokenId,\n    from: AccountId,\n    to: AccountId,\n    serialNumber: number,\n    key?: PrivateKey\n  ): Promise {\n    return new Promise(async(resolve,reject) => {\n      try {\n        // Creating the transfer transaction...\n        const transaction = await new TransferTransaction()\n          .addNftTransfer(new NftId(tokenId, serialNumber), from, to);\n\n        if(key) {\n          transaction.freezeWith(this.clientService.getClient());\n\n          // signing the transaction with the sender key...\n          let signTx = await transaction.sign(key);\n            \n          // Submitting the transaction to a Hedera network...\n          const txResponse = await signTx.execute(this.clientService.getClient());\n  \n          // Requesting the receipt of the transaction...\n          const receipt = await txResponse.getReceipt(this.clientService.getClient());\n  \n          // Resolving the transaction consensus status...\n          resolve({\n            status: receipt.status,\n            transaction_id: txResponse.transactionId\n          });\n        } else {\n          resolve(transaction);\n        }          \n      } catch(error) {\n        reject(error);        \n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeysModule.html":{"url":"modules/KeysModule.html","title":"module - KeysModule","body":"\n                   \n\n\n\n\n    Modules\n    KeysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_KeysModule_exports\n\n\n\n\nKeysService \n\nKeysService \n\n\n\nKeysModule\n\nKeysModule\n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/keys/keys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            KeysService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            KeysService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { KeysService } from './keys.service';\n\n@Module({\n  controllers: [],\n  providers: [KeysService],\n  exports: [KeysService]\n})\nexport class KeysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KeysService.html":{"url":"injectables/KeysService.html","title":"injectable - KeysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KeysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/keys/keys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateKey\n                            \n                            \n                                generateKeyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/hedera/keys/keys.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKey\n                        \n                    \n                \n            \n            \n                \ngenerateKey()\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyList\n                        \n                    \n                \n            \n            \n                \ngenerateKeyList(publicKeys?: string[], length?: number, threshold?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/keys/keys.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    publicKeys\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    threshold\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Keys Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/keys/keys.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { PrivateKey, KeyList, PublicKey } from '@hashgraph/sdk';\nimport { PrivateKeyList } from '../../types/private-key-list.types';\n\n@Injectable()\nexport class KeysService {\n  protected logger: Logger = new Logger(\"Keys Service\");\n\n  constructor() {\n    // KeyService Class\n  }\n\n  generateKey(): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        const key = await PrivateKey.generate();\n        resolve(key);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  generateKeyList(\n    publicKeys?: string[],\n    length?: number,\n    threshold?: number\n  ): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let publicKeyList: any = [];\n        // if an array of keys is provided, we use it...\n        if(publicKeys) {\n          publicKeys.forEach(key => {\n            publicKeyList.push(PublicKey.fromString(key));\n          });\n\n          resolve({\n            privateKeys: [], \n            keyList: new KeyList(publicKeyList, threshold? threshold : null)\n          });          \n        }\n        // otherwise, we generate the keys we need...\n        else {\n          let privateKeys: any = [];\n\n          if(length) {\n            [...Array(length).keys()].forEach(() => {\n              let key = PrivateKey.generate();\n              privateKeys.push(key);\n              publicKeyList.push(key.publicKey);\n            });\n\n            resolve({\n              privateKeys: privateKeys, \n              keyList: new KeyList(publicKeyList, threshold? threshold : null)\n            });\n          } else {\n            resolve({\n              privateKeys: [], \n              keyList: new KeyList([])\n            });\n          }\n        }\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MirrorNode.html":{"url":"interfaces/MirrorNode.html","title":"interface - MirrorNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MirrorNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/mirror.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface MirrorNode {\n  url: string\n  apiKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Operator.html":{"url":"interfaces/Operator.html","title":"interface - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/operator.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accountId\n                                        \n                                \n                                \n                                        \n                                            privateKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            publicKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accountId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accountId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Operator {\n  accountId: string\n  privateKey: string\n  publicKey?: string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrivateKeyList.html":{"url":"interfaces/PrivateKeyList.html","title":"interface - PrivateKeyList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PrivateKeyList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/private-key-list.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            keyList\n                                        \n                                \n                                \n                                        \n                                            privateKeys\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyList:     KeyList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyList\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        privateKeys\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        privateKeys:     PrivateKey[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrivateKey[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { KeyList, PrivateKey } from \"@hashgraph/sdk\";\n\nexport interface PrivateKeyList {\n  privateKeys: PrivateKey[]\n  keyList: KeyList\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestModule.html":{"url":"modules/RestModule.html","title":"module - RestModule","body":"\n                   \n\n\n\n\n    Modules\n    RestModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/rest/rest.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(options: HederaOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                HederaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRootAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRootAsync(options: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { RestService } from './rest.service';\nimport { HttpModule } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { ConfigModule } from '@nestjs/config';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Module({})\nexport class RestModule {\n  static forRoot(options: HederaOptions): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useValue: options,\n        },\n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n\n  static forRootAsync(options: any): DynamicModule {\n    return {\n      module: RestModule,\n      imports: [HttpModule, ConfigModule],\n      providers: [\n        {\n          provide: 'hederaOptions',\n          useFactory: options.useFactory,\n          inject: [options.useExisting]\n        },       \n        RestService,\n      ],\n      exports: [RestService]\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestService.html":{"url":"injectables/RestService.html","title":"injectable - RestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/rest/rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                            \n                                    Private\n                                mirrorNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                call\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hederaOptions: HederaOptions, httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/rest/rest.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hederaOptions\n                                                  \n                                                        \n                                                                        HederaOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        call\n                        \n                    \n                \n            \n            \n                \n                    \n                    call(endpoint: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/rest/rest.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    endpoint\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Rest Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mirrorNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MirrorNode\n\n                    \n                \n                    \n                        \n                                Defined in src/hedera/rest/rest.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { HttpService } from '@nestjs/axios';\nimport { MirrorNode } from '../../types/mirror.types';\nimport { HederaOptions } from '../../types/hedera_options.types';\n\n@Injectable()\nexport class RestService {\n  private mirrorNode: MirrorNode;\n  protected logger: Logger = new Logger(\"Rest Transactions Service\");\n\n  constructor(\n    @Inject('hederaOptions') private hederaOptions: HederaOptions,\n    private httpService: HttpService\n  ) {\n    this.mirrorNode = this.hederaOptions.mirrorNode;\n  }\n\n  async call(endpoint: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let headers = {};\n\n        if(this.mirrorNode.apiKey) {\n          headers = {\n            'authorization': this.mirrorNode.apiKey\n          }\n        }\n\n        let response = await this.httpService\n        .get(\n          `${this.mirrorNode.url}/api/v1/${endpoint}`,\n          { headers: headers }).toPromise();\n  \n        resolve(response?.data);\n      } catch(error) {\n        reject(error);\n      }      \n    });   \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenBalance.html":{"url":"interfaces/TokenBalance.html","title":"interface - TokenBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/token_balance.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            balance\n                                        \n                                \n                                \n                                        \n                                            decimals\n                                        \n                                \n                                \n                                        \n                                            tokenId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        balance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        balance:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        decimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        decimals:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenBalance {\n  tokenId: string\n  balance: number\n  decimals: number  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionDetails.html":{"url":"interfaces/TransactionDetails.html","title":"interface - TransactionDetails","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/transaction_details.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            transaction_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     Status\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Status\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transaction_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transaction_id:     TransactionId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TransactionId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Status, TransactionId } from \"@hashgraph/sdk\";\n\nexport interface TransactionDetails {\n  status: Status\n  transaction_id: TransactionId\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\n\n\nRestModule\n\nRestModule\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hedera/transactions/transactions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ClientModule\n                        \n                        \n                            RestModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsRestService\n                        \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionsRestService } from './transactions-rest.service';\nimport { ClientModule } from '../client/client.module';\nimport { RestModule } from '../rest/rest.module';\n\n@Module({\n  imports: [ClientModule, RestModule],\n  controllers: [],\n  providers: [TransactionsService, TransactionsRestService],\n  exports: [TransactionsService, TransactionsRestService]\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsRestService.html":{"url":"injectables/TransactionsRestService.html","title":"injectable - TransactionsRestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsRestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions-rest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllTransactions\n                            \n                            \n                                getAllTransactionsFromTimestamp\n                            \n                            \n                                getLatestTransactions\n                            \n                            \n                                getScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(restService: RestService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions-rest.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        restService\n                                                  \n                                                        \n                                                                        RestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactions\n                        \n                    \n                \n            \n            \n                \ngetAllTransactions(accountId: string, filters?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filters\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTransactionsFromTimestamp\n                        \n                    \n                \n            \n            \n                \ngetAllTransactionsFromTimestamp(timestamp: string, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    timestamp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLatestTransactions\n                        \n                    \n                \n            \n            \n                \ngetLatestTransactions(accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScheduledTransaction\n                        \n                    \n                \n            \n            \n                \ngetScheduledTransaction(transactionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions-rest.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RestService } from '../rest/rest.service';\n\n@Injectable()\nexport class TransactionsRestService {\n  constructor(\n    private restService: RestService\n  ) {}\n\n  getAllTransactionsFromTimestamp(timestamp: string, accountId: string):  Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}&timestamp=gt:${timestamp}`);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n          \n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getAllTransactions(accountId: string, filters?: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transactions: any = [];\n        let url = `transactions/?account.id=${accountId}`;\n\n        if(filters) {\n          url += `&${filters}`;\n        }\n\n        let response = await this.restService\n        .call(url);\n\n        transactions = transactions.concat(response.transactions);\n\n        while(response.links.next) {\n          let nextArray = response.links.next.split(\"&\");\n          let next = nextArray.slice(1, nextArray.length).join('&');\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          response = await this.restService\n            .call(`transactions/?account.id=${accountId}&${next}`);\n\n          transactions = transactions.concat(response.transactions);\n        }\n\n        resolve(transactions);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getLatestTransactions(accountId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`transactions/?account.id=${accountId}`);\n\n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  getScheduledTransaction(transactionId: string): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let response = await this.restService\n        .call(`schedules/${transactionId}`);\n        \n        resolve(response);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hedera/transactions/transactions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createScheduledTransaction\n                            \n                            \n                                    Async\n                                getScheduledTrasaction\n                            \n                            \n                                    Async\n                                getTransactionQuery\n                            \n                            \n                                    Async\n                                getTransactionReceipt\n                            \n                            \n                                    Async\n                                signScheduledTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    createScheduledTransaction(transactionToSchedule: Transaction)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionToSchedule\n                                    \n                                            Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getScheduledTrasaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    getScheduledTrasaction(scheduleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionQuery(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTransactionReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionReceipt(transactionId: TransactionId)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transactionId\n                                    \n                                            TransactionId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signScheduledTransaction\n                        \n                    \n                \n            \n            \n                \n                    \n                    signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey)\n                \n            \n\n\n            \n                \n                    Defined in src/hedera/transactions/transactions.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    scheduleId\n                                    \n                                            ScheduleId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            PrivateKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(\"Transactions Service\")\n                    \n                \n                    \n                        \n                                Defined in src/hedera/transactions/transactions.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { \n  PrivateKey, \n  ScheduleCreateTransaction, \n  ScheduleId, \n  ScheduleInfoQuery, \n  ScheduleSignTransaction, \n  Status, \n  Transaction, \n  TransactionId, \n  TransactionReceipt, \n  TransactionReceiptQuery,\n  TransactionRecordQuery, \n  TransactionResponse \n} from '@hashgraph/sdk';\n\n@Injectable()\nexport class TransactionsService {\n  protected logger: Logger = new Logger(\"Transactions Service\");\n\n  constructor(\n    private clientService: ClientService\n  ) {}\n\n  async getTransactionQuery(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionRecordQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error: any) {\n        reject(error);\n      }\n    });\n  }  \n\n  async getTransactionReceipt(transactionId: TransactionId): Promise {\n    return new Promise(async(resolve, reject) => {\n      try {\n        let transaction = new TransactionReceiptQuery()\n        .setTransactionId(transactionId)\n        .setIncludeDuplicates(true)\n        .setIncludeChildren(true);\n\n        let receipt = await transaction.execute(this.clientService.getClient());\n        resolve(receipt);\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  async signScheduledTransaction(scheduleId: ScheduleId, key: PrivateKey): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating the transaction...\n        const transaction = await new ScheduleSignTransaction()\n            .setScheduleId(scheduleId)\n            .freezeWith(this.clientService.getClient())\n            .sign(key);\n\n        // Signing with the client operator key...\n        const txResponse = await transaction.execute(this.clientService.getClient());\n\n        // Getting the receipt of the transaction...\n        const receipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Getting the transaction status...\n        resolve(receipt.status);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async createScheduledTransaction(transactionToSchedule: Transaction): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        // Creating a schedule transaction...\n        let  scheduledTransaction: ScheduleCreateTransaction = new ScheduleCreateTransaction()\n            .setScheduledTransaction(transactionToSchedule);\n\n        // Signing with the client operator key and submit the transaction to a Hedera network...\n        let txResponse: TransactionResponse = await scheduledTransaction.execute(this.clientService.getClient());\n\n        // Requesting the receipt of the transaction...\n        let receipt: TransactionReceipt = await txResponse.getReceipt(this.clientService.getClient());\n\n        // Geting the schedule ID...\n        let scheduleId: ScheduleId | null = receipt.scheduleId;\n        resolve(scheduleId);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  async getScheduledTrasaction(scheduleId: string): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const query = new ScheduleInfoQuery()\n          .setScheduleId(scheduleId);\n\n        const info = await query.execute(this.clientService.getClient());\n        resolve(info);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/hedera/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/hedera/client/client.service.ts\n            \n            injectable\n            ClientService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hcs/hcs.service.ts\n            \n            injectable\n            HcsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hedera.service.ts\n            \n            injectable\n            HederaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/hedera/hfs/hfs.service.ts\n            \n            injectable\n            HfsService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts-rest.service.ts\n            \n            injectable\n            HtsRestService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/hedera/hts/hts.service.ts\n            \n            injectable\n            HtsService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/hedera/keys/keys.service.ts\n            \n            injectable\n            KeysService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/rest/rest.service.ts\n            \n            injectable\n            RestService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions-rest.service.ts\n            \n            injectable\n            TransactionsRestService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/hedera/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/types/account_balance.types.ts\n            \n            interface\n            AccountBalance\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/hedera_options.types.ts\n            \n            interface\n            HederaOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/mirror.types.ts\n            \n            interface\n            MirrorNode\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/operator.types.ts\n            \n            interface\n            Operator\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/private-key-list.types.ts\n            \n            interface\n            PrivateKeyList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/types/token_balance.types.ts\n            \n            interface\n            TokenBalance\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/types/transaction_details.types.ts\n            \n            interface\n            TransactionDetails\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hashgraph/sdk : ^2.14.0\n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.4.5\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/event-emitter : ^1.1.1\n        \n            axios : ^0.27.2\n        \n            rxjs : ^7.5.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHSuite - Hedera for NestJS\nAn hedera-js-sdk wrapper for NestJS.\nInstallation\nIf you use npm, you shall run:\nnpm install hsuite-nestjs-hederainstead, if you use yarn:\nyarn add hsuite-nestjs-hederaImport into your AppModule\nFirst you need to import the HederaModule into your app.module.ts.\nYou can use the forRoot method in order to pass the needed variables to create the Hedera Client and to connect to a Mirror Node, like this:\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HederaModule } from 'hsuite-nestjs-hedera/lib';\n\n@Module({\n  imports: [\n    HederaModule.forRoot({\n      operators: [\n          {\n            accountId: 'YOUR_OPERATOR_ACCOUNT_ID', \n            privateKey: 'YOUR_OPERATOR_PRIVATE_KEY'\n          }\n        ], \n        mirrorNode: {\n          url: 'https://mainnet-public.mirrornode.hedera.com'\n        }, \n        network: 'mainnet'\n      }),\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule {}You can also use NestJS ConfigService, to protect your keys by calling the forRootAsync method, like this:\nHederaModule.forRootAsync({\n  imports: [ConfigModule],\n  useExisting: ConfigService,\n  useFactory: async (configService: ConfigService) => ({\n    operators: configService.get>(`operators`),\n    mirrorNode: configService.get(`mirrorNode`),\n    network: configService.get('network')\n  }),\n}),Usage\nOnce imported, you can then import the service you need, and use it.\nFor example:\nimport { Injectable } from '@nestjs/common';\nimport { KeysService } from 'hsuite-nestjs-hedera/lib/hedera/keys/keys.service';\nimport { HcsService } from 'hsuite-nestjs-hedera/lib/hedera/hcs/hcs.service';\nimport { HfsService } from 'hsuite-nestjs-hedera/lib/hedera/hfs/hfs.service';\nimport { AccountsService } from 'hsuite-nestjs-hedera/lib/hedera/accounts/accounts.service';\nimport { TransactionsRestService } from 'hsuite-nestjs-hedera/lib/hedera/transactions/transactions-rest.service';\nimport { TopicId, PrivateKey } from '@hashgraph/sdk';\n\n@Injectable()\nexport class AppService {\n  constructor(\n    private keysService: KeysService,\n    private hcsService: HcsService,\n    private hfsService: HfsService,\n    private transactionsService: TransactionsRestService,\n    private accountsService: AccountsService\n  ) {\n    // creating an hedera account...\n    this.accountsService.createAccount(1, 1).then(account => {\n      console.log(\"account generated\", account.key.toString());\n      // generating a new private key...\n      this.keysService.generateKey().then(key => {\n        // updating the account with the new generated private key...\n        this.accountsService.updateAccount(\n          account.accountId, \n          PrivateKey.fromString(account.key.toString()),\n          key).then(response => {\n            console.log(response);\n          }).catch(error => {\n            console.error(error);\n          });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    })\n\n    // fetching latest transactions from mirror node for a given accountId...\n    this.transactionsService.getLatestTransactions('YOUR_ACCOUNT_ID_HERE').then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    });\n\n    // subscribing to a HCS Topic...\n    this.hcsService.getMessages(\n      TopicId.fromString('YOUR_HCS_TOPIC_ID_HERE'),\n      async(message) => {\n        let hcsMessage = JSON.parse(Buffer.from(message.contents).toString());\n        console.log(hcsMessage);\n      }\n      ).then(() => {\n        console.log(\"subscribed\");\n      }).catch(error => {\n        console.error(error);\n      })\n\n    // creating an HFS file...\n    this.hfsService.create(\n      PrivateKey.fromString('YOUR_PRIVATE_KEY_HERE'),\n      'YOUR_CONTENT_HERE'\n    ).then((response) => {\n      console.log(response);\n    }).catch(error => {\n      console.error(error);\n    })\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ClientModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HcsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HederaModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HfsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HtsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_HcsModule\n\n\n\ncluster_HcsModule_exports\n\n\n\ncluster_HcsModule_providers\n\n\n\ncluster_HfsModule\n\n\n\ncluster_HfsModule_exports\n\n\n\ncluster_HfsModule_providers\n\n\n\ncluster_HtsModule\n\n\n\ncluster_HtsModule_exports\n\n\n\ncluster_HtsModule_providers\n\n\n\ncluster_KeysModule\n\n\n\ncluster_KeysModule_exports\n\n\n\ncluster_KeysModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nClientModule\n\nClientModule\n\n\n\nHtsModule\n\nHtsModule\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\nHtsModule -->\n\nClientModule->HtsModule\n\n\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nClientModule->AccountsModule\n\n\n\n\n\nHcsModule\n\nHcsModule\n\nHcsModule -->\n\nClientModule->HcsModule\n\n\n\n\n\nHfsModule\n\nHfsModule\n\nHfsModule -->\n\nClientModule->HfsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nClientModule->TransactionsModule\n\n\n\nAccountsModule -->\n\nHtsModule->AccountsModule\n\n\n\n\n\nHtsRestService \n\nHtsRestService \n\nHtsRestService  -->\n\nHtsModule->HtsRestService \n\n\n\n\n\nHtsService \n\nHtsService \n\nHtsService  -->\n\nHtsModule->HtsService \n\n\n\n\n\nKeysModule\n\nKeysModule\n\nAccountsModule -->\n\nKeysModule->AccountsModule\n\n\n\n\n\nKeysService \n\nKeysService \n\nKeysService  -->\n\nKeysModule->KeysService \n\n\n\n\n\nRestModule\n\nRestModule\n\nHtsModule -->\n\nRestModule->HtsModule\n\n\n\nAccountsModule -->\n\nRestModule->AccountsModule\n\n\n\nHcsModule -->\n\nRestModule->HcsModule\n\n\n\nTransactionsModule -->\n\nRestModule->TransactionsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nHcsService \n\nHcsService \n\nHcsService  -->\n\nHcsModule->HcsService \n\n\n\n\n\nHcsService\n\nHcsService\n\nHcsModule -->\n\nHcsService->HcsModule\n\n\n\n\n\nHfsService \n\nHfsService \n\nHfsService  -->\n\nHfsModule->HfsService \n\n\n\n\n\nHfsService\n\nHfsService\n\nHfsModule -->\n\nHfsService->HfsModule\n\n\n\n\n\nHtsRestService\n\nHtsRestService\n\nHtsModule -->\n\nHtsRestService->HtsModule\n\n\n\n\n\nHtsService\n\nHtsService\n\nHtsModule -->\n\nHtsService->HtsModule\n\n\n\n\n\nKeysService\n\nKeysService\n\nKeysModule -->\n\nKeysService->KeysModule\n\n\n\n\n\nTransactionsRestService \n\nTransactionsRestService \n\nTransactionsRestService  -->\n\nTransactionsModule->TransactionsRestService \n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsRestService\n\nTransactionsRestService\n\nTransactionsModule -->\n\nTransactionsRestService->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.2\n        \n            Description : \n        \n            Keywords : hsuite, smart-node, nestjs-hedera, hsuite-network, hedera, dex\n        \n            Homepage : https://hsuite.finance\n        \n            Bugs : https://github.com/HbarSuite/nestjs-hedera/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/HbarSuite/nestjs-hedera.git\n        \n            Author : HSuite\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
